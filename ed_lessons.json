{
  "course_id": 16645,
  "lessons": [
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:56.793607+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53359,
      "index": 18,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47936,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384763,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362186,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384763,
          "original_id": null,
          "lesson_id": 53359,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Permutations, Heap's algorithm and cryptarithms",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:13:54.78301+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/poexadVLQhfaT05EfhjhuCNQ"
        },
        {
          "id": 362186,
          "original_id": 326302,
          "lesson_id": 53359,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Permutations, Heap's algorithm and cryptarithms",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.793607+10:00",
          "updated_at": null,
          "challenge_id": 119465,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Permutations, Heap's algorithm and cryptarithms",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-06-15T11:04:30.570648+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 55026,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11532,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 53351,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 372901,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 372902,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 372901,
          "original_id": 362154,
          "lesson_id": 55026,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Python 3 Cheat Sheet",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-15T11:04:30.570648+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/wtAsN9UFVMYE451tBfLudQpD"
        },
        {
          "id": 372902,
          "original_id": 362155,
          "lesson_id": 55026,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Example Exam Question with Doctest",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-15T11:04:30.570648+10:00",
          "updated_at": null,
          "challenge_id": 123399,
          "content": "<document version=\"2.0\"><paragraph>The <link href=\"https://docs.python.org/3/library/doctest.html#module-doctest\"><code>doctest</code></link> module searches for pieces of text that look like <bold>interactive Python sessions</bold>, and then <bold>executes those sessions to verify that they work exactly as shown</bold>. There are several common ways to use doctest:</paragraph><list style=\"number\"><list-item><paragraph>To <bold>check</bold> that a <bold>module’s docstrings are up-to-date</bold> by <bold>verifying</bold> that <bold>all interactive examples still work as documented</bold>.</paragraph></list-item><list-item><paragraph>To perform regression testing by verifying that interactive examples from a test file or a test object work as expected.</paragraph></list-item><list-item><paragraph>To <bold>write tutorial documentation for a package</bold>, liberally illustrated with <bold>input-output examples</bold>. Depending on whether the examples or the expository text are emphasized, this has the flavor of “literate testing” or “executable documentation”.</paragraph></list-item></list><paragraph>For the sake of <bold>exam questions in this course</bold>, we are using <bold>way (1)</bold> above.</paragraph><paragraph>We will look at a complete but small example module called <code>example.py</code></paragraph><paragraph>For more information about <code>doctest</code> module, see <link href=\"https://docs.python.org/3/library/doctest.html\">https://docs.python.org/3/library/doctest.html</link></paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Exam Questions with Doctest",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:38.841144+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53314,
      "index": 9,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47896,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 4,
      "slide_marks_summary": [
        {
          "id": 361995,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361996,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361997,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361998,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361995,
          "original_id": 326126,
          "lesson_id": 53314,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "From decimal expansions to reduced fractions",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.841144+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/cWe8odHYgevTH4PqgZXuoMWE"
        },
        {
          "id": 361996,
          "original_id": 326127,
          "lesson_id": 53314,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "From decimal expansions to reduced fractions",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.841144+10:00",
          "updated_at": null,
          "challenge_id": 119335,
          "content": ""
        },
        {
          "id": 361997,
          "original_id": 326128,
          "lesson_id": 53314,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Rational Number",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.841144+10:00",
          "updated_at": null,
          "challenge_id": 119336,
          "content": ""
        },
        {
          "id": 361998,
          "original_id": 326129,
          "lesson_id": 53314,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "From decimal expansions to reduced fractions",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.841144+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/_j5C00srKcw"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 4 -  Notes 5 From Decimal Expansions to Reduced Fractions",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.688903+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53285,
      "index": null,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": null,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 48670,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361890,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361890,
          "original_id": 330128,
          "lesson_id": 53285,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Special Consideration and Application Process",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.688903+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>https://www.student.unsw.edu.au/special-consideration</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Special Consideration and Application Process",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.833317+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53288,
      "index": 3,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": null,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47879,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361893,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361893,
          "original_id": 326036,
          "lesson_id": 53288,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Online Tutorials using Collaborate",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.833317+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>https://moodle.telt.unsw.edu.au/mod/lti/view.php?id=6800190</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Blackboard Collaborate - Online Tutorials",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.951175+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53291,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11527,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47883,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 361896,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361897,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361898,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361899,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361900,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361901,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361902,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361903,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361896,
          "original_id": 326057,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "1. Meet Karel",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>In the 1970s, a Stanford graduate student, Rich Pattis decided that it would be easier to teach the fundamentals of programming if students could somehow learn the basic ideas in a simple environment free from the complexities that characterize most programming languages. Rich designed an introductory programming environment in which students teach a robot to solve simple problems. That robot was named Karel, after the Czech playwright <link href=\"https://en.wikipedia.org/wiki/Karel_%C4%8Capek\">Karel Čapek</link>, whose 1923 play R.U.R. (<link href=\"https://en.wikipedia.org/wiki/R.U.R.\">Rossum’s Universal Robots</link>) gave the word robot to the English language.</paragraph><paragraph>Karel the Robot was quite a success. Karel has been used in introductory computer science courses all across the world and has been taught to millions of students. Many generations of students have learned how programming works with Karel, and it is still the gentle introduction to coding used at Stanford.</paragraph><heading level=\"2\">What is Karel?</heading><paragraph>Karel is a very simple robot living in a very simple world. By giving Karel a set of commands, you can direct it to perform certain tasks within its world. The process of specifying those commands is called <bold>programming</bold>. Initially, Karel understands only a very small number of predefined commands, but an important part of the programming process is teaching Karel new commands that extend its capabilities.</paragraph><paragraph>Karel programs have much the same structure and involve the same fundamental elements as <link href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\">Python</link>, a major <link href=\"https://en.wikipedia.org/wiki/Programming_language\">programming language</link>. The critical difference is that Karel’s programming language is extremely small and as such the details are easy to master. Even so, you will discover that solving a problem can be challenging.</paragraph><paragraph>By starting with Karel, you can concentrate on solving problems from the very beginning. Problem solving is the essence of programming. And because Karel encourages imagination and creativity, you can have quite a lot of fun along the way.</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def main():\n    move() \n    for c in range(4):\n        put_beeper()\n        move()\n\n    for c in range(3):\n        while front_is_clear():\n            move()\n            put_beeper()\n        turn_left()\n        move()\n</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"3\">{&#34;width&#34;:6,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><heading level=\"2\">Karel’s world</heading><paragraph>Karel’s world is defined by rows running horizontally (east-west) and columns running vertically (north-south). The intersection of a row and a column is called a corner. Karel can only be positioned on corners and must be facing one of the four standard compass directions (north, south, east, west). A sample Karel world is shown below. Here Karel is located at the corner of 1st row and 1st column, facing east.</paragraph><figure><image width=\"253\" height=\"176\" src=\"https://static.edusercontent.com/files/V2IAjqHcT1jbUD2cYWcC1kUc\"></image></figure><paragraph>Several other components of Karel’s world can be seen in this example. The object in front of Karel is a beeper. As described in Rich Pattis’s book, beepers are “plastic cones which emit a quiet beeping noise.” Karel can only detect a beeper if it is on the same corner. The solid lines in the diagram are walls. Walls serve as barriers within Karel’s world. Karel cannot walk through walls and must instead go around them. Karel’s world is always bounded by walls along the edges, but the world may have different dimensions depending on the specific problem Karel needs to solve.</paragraph><heading level=\"2\">Karel&#39;s commands</heading><paragraph>When Karel is shipped from the factory, it responds to a very small set of commands.</paragraph><web-snippet layout=\"seamless\" preview-hidden=\"true\"><web-snippet-file language=\"html\" hidden=\"true\">&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/purecss@2.0.3/build/pure-min.css&#34; integrity=&#34;sha384-cg6SkqEOCV1NbJoCu11+bm0NvBRc8IYLRGXkmNrqUBfTjmMYwNKPWBTIKyw9mHNJ&#34; crossorigin=&#34;anonymous&#34;&gt;\n&lt;table class=&#34;pure-table&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;code&gt;move()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Asks Karel to move forward one block. Karel cannot respond to a &lt;code&gt;move()&lt;/code&gt; command if there is a wall blocking its way.&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;code&gt;turn_left()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Asks Karel to rotate 90 degrees to the left (counterclockwise).&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;code&gt;pick_beeper()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Asks Karel to pick up one beeper from a corner and stores the beeper in its beeper bag, which can hold an infinite number of beepers. Karel cannot respond to a &lt;code&gt;pick_beeper()&lt;/code&gt; command unless there is a beeper on the current corner.&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;code&gt;put_beeper()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Asks Karel to take a beeper from its beeper bag and put it down on the current corner. Karel cannot respond to a &lt;code&gt;put_beeper()&lt;/code&gt; command unless there are beepers in its beeper bag.&lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;</web-snippet-file><web-snippet-file language=\"css\" hidden=\"true\"></web-snippet-file><web-snippet-file language=\"js\" hidden=\"true\"></web-snippet-file></web-snippet><paragraph>The empty pair of parentheses that appears in each of these commands is part of the common syntax shared by Karel and Python and is used to specify the invocation of the command. Eventually, the programs you write will include additional information in the space between the parentheses, but such information is not part of the Karel’s primitive world. These parentheses will therefore be empty in standard Karel programs, but you must remember to include them nonetheless.</paragraph><paragraph>If Karel tries to do something illegal, such as moving through a wall or picking up a nonexistent beeper, an error condition occurs.</paragraph><paragraph>Karel’s commands, are not executed on their own. Instead, you need to incorporate them into a Karel program. You will have a chance to see a few simple Karel programs in Chapter 2!</paragraph><paragraph></paragraph><paragraph><break></break>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361897,
          "original_id": 326058,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "2. Programming Karel",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>The simplest style of Karel program uses text to specify a sequence of built-in commands that should be executed when the program is <bold>run</bold>. Consider the simple Karel program below. The text on the left is the program. The state of Karel&#39;s world is shown on the right:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: FirstKarel\n# -----------------------------\n# The FirstKarel program defines a &#34;main&#34; function\n# with three commands. These commands cause Karel\n# to move forward one block, pick up a beeper and\n# then move ahead to the next corner.\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    move()\n    pick_beeper()\n    move()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:6,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[{&#34;x&#34;:1,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:2,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:true,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:true},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;}]}</snippet-file></snippet><paragraph>Press the &#34;Run&#34; button to execute the program. Programs are typically written in a text editor or a special application called an IDE. This reader has the ability to execute programs in order to help you <italic>see</italic> how things work as you learn.</paragraph><paragraph>The program is composed of several parts. The first part consists of the following lines:</paragraph><pre># Program: FirstKarel\n# -----------------------------\n# The FirstKarel program defines a &#34;main&#34; function\n# with three commands. These commands cause Karel\n# to move forward one block, pick up a beeper\n# and then move ahead to the next corner.\n</pre><paragraph>These lines are an example of a <bold>comment</bold>, which is simply text designed to explain the operation of the program to human readers. Comments in both Karel and Python begin with the characters <code>#</code> and include the rest of the line. In a simple program, extensive comments may seem silly because the effect of the program is obvious, but they are extremely important as a means of documenting the design of larger, more complex programs. The second part of the program is the line:</paragraph><pre>from karel.stanford import *\n</pre><paragraph>This line requests the inclusion of all definitions from the <code>karel.stanford</code> library. This library contains the basic definitions necessary for writing Karel programs, such as the definitions of the standard operations <code>move()</code> and <code>pick_beeper()</code>. Because you always need access to these operations, every Karel program you write will include this import command before you write the actual program.</paragraph><paragraph>The final part of the Karel program consists of the following function definition:</paragraph><pre>def main():\n    move()\n    pick_beeper()\n    move()\n</pre><paragraph>These lines represent the definition of a new <bold>function</bold>, which specifies the sequence of steps necessary to respond to a command. As in the case of the FirstKarel program itself, the function definition consists of two parts that can be considered separately: The first line constitutes the function header and the indented code following is the function body. If you ignore the body for now, the function definition looks like this:</paragraph><pre>def main():\n    body of the function definition\n</pre><paragraph>The first word in the function header, <code>def</code>, is part of Python&#39;s syntactic structure. It says that you are creating a new function. The next word on the header line specifies the name of the new function, which in this case is <bold>main</bold>. Defining a function means that Karel can now respond to a new command with that name. The <code>main()</code> command plays a special role in a Karel program. When you start a Karel program it creates a new Karel instance, adds that Karel to a world that you specify, and then issues the <code>main()</code> command. The effect of running the program is defined by the body of the <code>main()</code> function, which is a sequence of commands that the robot will execute in order. For example, the body of the <code>main()</code> function for the <code>FirstKarel</code> program is:</paragraph><pre>    move()\n    pick_beeper()\n    move()\n</pre><paragraph>Thus, if the initial state of the world matches the example given in Chapter 1, Karel first moves forward into the corner containing the beeper, picks up that beeper, and finally moves forward to the corner just before the wall.</paragraph><heading level=\"2\">Solving a more interesting problem</heading><paragraph>The FirstKarel program defined above doesn’t do very much as yet. Let’s try to make it a little more interesting. Suppose that the goal is not simply to get Karel to pick up the beeper but to move the beeper from its initial position on 2nd column and 1st row to the center of a ledge. Thus, your next assignment is to define a new Karel program that accomplishes the task illustrated in this diagram:</paragraph><figure><image src=\"https://static.ap.edusercontent.com/files/yn5zK3NnI3gGvBoLqdP2xG2N\" width=\"292\" height=\"210\"></image></figure><paragraph>The first three commands in the new program—the ones that move forward, pick up the beeper, and then move up to the ledge—are the same as before:</paragraph><pre>    move()\n    pick_beeper()\n    move()</pre><paragraph>From here, the next step is to turn left to begin climbing the ledge. That operation is easy, because Karel has a <code>turn_left()</code> command in its standard repertoire. Executing a <code>turn_left()</code> command at the end of the preceding sequence of commands leaves Karel facing north on the corner of 1st row and 3rd column. If Karel then executes a <code>move()</code> command, it will move north to reach the following position:</paragraph><figure><image src=\"https://static.ap.edusercontent.com/files/vaDmenl7nbKG6PDXft8TEPNp\" width=\"297\" height=\"209\"></image></figure><paragraph>From here, the next thing you need to do is get Karel to turn right so that it is again facing east. While this operation is conceptually just as easy as getting Karel to turn left, there is a slight problem: Karel’s language includes a <code>turn_left()</code> command, but no <code>turn_right()</code> command. It’s as if you bought the economy model and have now discovered that it is missing some important features.</paragraph><paragraph>At this point, you have your first opportunity to begin thinking like a programmer. You have one set of commands, but not exactly the set you need. What can you do? Can you accomplish the effect of a <code>turn_right()</code> command using only the capabilities you have? The answer, of course, is yes. You can accomplish the effect of turning right by turning left three times. After three left turns, Karel will be facing in the desired direction. From here, all you need to do is program Karel to move over to the center of the ledge, drop the beeper and then move forward to the final position. Here is a complete implementation of a program that accomplishes the entire task:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: FirstKarel\n# -----------------------------\n# The FirstKarel program defines a &#34;main&#34; function\n# with commands that cause Karel to pick up\n# a beeper and place it on a ledge.\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    move()\n    pick_beeper()\n    move()\n    turn_left()\n    move()\n    turn_left()\n    turn_left()\n    turn_left()\n    move()\n    move()\n    put_beeper()\n    move()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"3\">{&#34;width&#34;:6,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[{&#34;x&#34;:1,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:2,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:true,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:true},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;}]}</snippet-file></snippet><paragraph></paragraph><paragraph><break></break>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361898,
          "original_id": 326059,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "3. Defining New Functions",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>In the last chapter we wrote a program to help Karel climb a simple ledge:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: FirstKarel\n# -----------------------------\n# Karel picks up a beeper and places it on a ledge.\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    move()\n    pick_beeper()\n    move()\n    turn_left()\n    move()\n    turn_left()\n    turn_left()\n    turn_left()\n    move()\n    move()\n    put_beeper()\n    move()</snippet-file><snippet-file initial-speed-idx=\"\" id=\"karel-world\">{&#34;width&#34;:6,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[{&#34;x&#34;:1,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:2,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:true,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:true},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;}]}</snippet-file></snippet><paragraph>Even though the <code>FirstKarel</code> program above demonstrates that it is possible to perform the <code>turn_right()</code> operation using only Karel’s built-in commands, the resulting program is not particularly clear conceptually. In your mental design of the program, Karel turns right when it reaches the top of the ledge. The fact that you have to use three <code>turn_left()</code> commands to do so is annoying. It would be much simpler if you could simply say <code>turn_right()</code> and have Karel understand this command. The resulting program would not only be shorter and easier to write, but also significantly easier to read.</paragraph><heading level=\"2\">Defining New Commands</heading><paragraph>Fortunately, the Karel programming language makes it possible to define new commands simply by including new function definitions. Whenever you have a sequence of Karel commands that performs some useful task--such as turning right--you can define a new function that executes that sequence of commands. The format for defining a new Karel function has much the same as the definition of <code>main()</code> in the preceding examples, which is a function definition in its own right. A typical function definition looks like this:</paragraph><pre>def name():\n    commands that make up the body of the function\n</pre><paragraph>In this pattern, name represents the name you have chosen for the new function. To complete the definition, all you have to do is provide the sequence of commands in the lines after the colon, which are all indented by one tab. For example, you can define <code>turn_right()</code> as follows:</paragraph><pre>def turn_right():\n    turn_left()\n    turn_left()\n    turn_left()\n</pre><paragraph>Similarly, you could define a new <code>turn_around()</code> function like this:</paragraph><pre>def turn_around():\n    turn_left()\n    turn_left()\n</pre><paragraph>You can use the name of a new function just like any of Karel’s built-in commands. For example, once you have defined <code>turn_right()</code>, you could replace the three <code>turn_left()</code> commands in the program with a single call to the <code>turn_right()</code> function. Here is a revised implementation of the program that uses <code>turn_right()</code>:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: BeeperPickingKarel\n# -----------------------------\n# The BeeperPickingKarel program defines a &#34;main&#34; \n# function with three commands. These commands cause  \n# Karel to move forward one block, pick up a  \n# beeper and then move ahead to the next corner.\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    move()\n    pick_beeper()\n    move()\n    turn_left()\n    move()\n    turn_right()\n    move()\n    move()\n    put_beeper()\n    move()\n\ndef turn_right():\n    turn_left()\n    turn_left()\n    turn_left()</snippet-file><snippet-file initial-speed-idx=\"\" id=\"karel-world\">{&#34;width&#34;:6,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[{&#34;x&#34;:1,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:2,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:true,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:true},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:5,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;}]}</snippet-file></snippet><heading level=\"2\">Function Code Blocks</heading><paragraph>A group of commands follow the colon <code>:</code> which are indented, is called a <bold>code block</bold>. The body of your function is a code block. Notice how the contents of a code block are all indented one tab in. This is important functionally since it allows Python to know what lines of code are in a given block.</paragraph><paragraph>You can define as many functions as you want. They should all be written one after another. You can&#39;t define a function inside another function.</paragraph><paragraph></paragraph><paragraph></paragraph><paragraph>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361899,
          "original_id": 326060,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "4. Decomposition",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>As a way of illustrating more of the power that comes with being able to define new functions, it’s useful to have Karel do something a little more practical than move a beeper from one place to another. The roadways often seem to be in need of repair, and it might be fun to see if Karel can fill potholes in its abstract world. For example, imagine that Karel is standing on the “road” shown in the following figure, one corner to the left of a pothole in the road. Karel’s job is to fill the hole with a beeper and proceed to the next corner. </paragraph><figure><image height=\"241\" src=\"https://static.ap.edusercontent.com/files/6HSdqhprA8fsjQiIWUUuFmVv\" width=\"288\"></image></figure><paragraph>The following diagram illustrates how the world should look after the program execution.</paragraph><figure><image height=\"241\" src=\"https://static.ap.edusercontent.com/files/G5MuXPfewZtNrkev9UBVtaWp\" width=\"287\"></image></figure><paragraph>If you are limited to the four predefined commands, the <code>main()</code> function to solve this problem would look like this:</paragraph><pre>def main():\n    move()\n    turn_left()\n    turn_left()\n    turn_left()\n    move()\n    put_beeper()\n    turn_left()\n    turn_left()\n    move()\n    turn_left()\n    turn_left()\n    turn_left()\n    move()\n</pre><paragraph>The initial motivation for defining the <code>turn_right()</code> function was that it was cumbersome to keep repeating three <code>turn_left()</code> commands to accomplish a right turn. Defining new functions has another important purpose beyond allowing you to avoid repeating the same command sequences every time you want to perform a particular task. The power to define functions unlocks the most important strategy in programming—the process of breaking a large problem down into smaller pieces that are easier to solve. The process of breaking a program down into smaller pieces is called decomposition, and the component parts of a large problem are called subproblems.</paragraph><paragraph>As an example, the problem of filling the hole in the roadway can be decomposed into the following subproblems:</paragraph><list style=\"number\"><list-item><paragraph>Move up to the hole</paragraph></list-item><list-item><paragraph>Fill the hole by dropping a beeper into it</paragraph></list-item><list-item><paragraph>Move on to the next corner</paragraph></list-item></list><paragraph>If you think about the problem in this way, you can use function definitions to create a program that reflects your conception of the program structure. The main function would look like this:</paragraph><pre>def main():\n    move()\n    fill_pothole()\n    move()\n</pre><paragraph>The correspondence with the outline is immediately clear, and everything would be great if only you could get Karel to understand what you mean by <code>fill_pothole()</code>. Given the power to define functions, implementing <code>fill_pothole()</code> is extremely simple. All you have to do is define a <code>fill_pothole()</code> function whose body consists of the commands you have already written to do the job, like this:</paragraph><pre>def fill_pothole():\n    turn_right()\n    move()\n    put_beeper()\n    turn_around()\n    move()\n    turn_right()\n</pre><paragraph>Here is the complete program. Notice how you can understand the programmer&#39;s intent simply from reading the main function. When you run the program, the line highlighting shows how a computer will execute it, step by step. However, because the program is nicely broken down we can understand it on a human thought level:</paragraph><snippet line-numbers=\"true\" language=\"karel\" runnable=\"true\"><snippet-file id=\"code\">from karel.stanfordkarel import *\n\ndef main():\n    move()\n    fill_pothole()\n    move()\n\n# Fills the pothole beneath Karel&#39;s current position by \n# placing a beeper on that corner. For this function to work \n# correctly, Karel must be facing east immediately above the \n# pothole. When execution is complete, Karel will have \n# returned to the same square and will again be facing east.\ndef fill_pothole():\n    turn_right()\n    move()\n    put_beeper()\n    turn_around()\n    move()\n    turn_right()\n\n# Turns Karel 90 degrees to the right. \ndef turn_right():\n    turn_left()\n    turn_left()\n    turn_left()\n\n# Turns Karel around 180 degrees. \ndef turn_around():\n    turn_left()\n    turn_left()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:5,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:1,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[{&#34;x&#34;:0,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:true,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:1,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:true,&#34;2&#34;:false,&#34;3&#34;:true},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:2,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:true},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:true,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:0,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:2,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:1,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:true,&#34;3&#34;:false},&#34;beepers&#34;:0,&#34;colour&#34;:&#34;BLANK&#34;}]}</snippet-file></snippet><paragraph></paragraph><paragraph></paragraph><paragraph>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361900,
          "original_id": 326061,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "5. For Loops",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>One of the things that computers are especially good at is repetition. How can we convince Karel to execute a block of code multiple times? To see how repetition can be used, consider the task of placing 42 beepers:</paragraph><figure><image height=\"277\" src=\"https://static.ap.edusercontent.com/files/iYqlkXAfTQiF75YPdDczGE5x\" width=\"271\"></image></figure><figure><image src=\"https://static.ap.edusercontent.com/files/PsUL8Em2ffXZ4dAifb3q4diq\" width=\"270\" height=\"272\"></image></figure><heading level=\"2\">Basic For Loop</heading><paragraph>Since you know that there are exactly 42 beepers to place, the control statement that you need is a <bold>for loop</bold>, which specifies that you want to repeat some operation a fixed number of times. The structure of the <code>for</code> statement appears complicated primarily because it is actually much more powerful than anything Karel needs. The only version of the <code>for</code> syntax that Karel uses is:</paragraph><pre>for i in range(count):\n    statements to be repeated\n</pre><paragraph>We will go over all the details of the <code>for</code> loop later in the class. For now you should read this line as a way to express, &#34;repeat the statements in the function body <italic>count</italic> times.&#34; We can use this new <bold>for loop</bold> to place 42 beepers by replacing <italic>count</italic> with 42 and putting the command <code>put_beeper()</code> inside of the <code>for</code> loop code block. We call commands in the code block the <bold>body</bold>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"karel\"><snippet-file id=\"code\"># Program: PlaceManyBeepers\n# -----------------------------\n# Places 42 beepers using a for loop\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    move()\n    # Repeat put_beeper many times \n    for i in range(42):\n        put_beeper()\n    move()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"4\">{&#34;width&#34;:4,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><paragraph><bold>The code above is editable</bold>. Try to change it so that it places only 15 beepers.</paragraph><heading level=\"2\">Matching Postconditions with Preconditions</heading><paragraph>The previous example gives the impression that a <code>for</code> loop repeats a single line of code. However the body of the <code>for</code> loop (the statements that get repeated) can be multiple lines. Here is an example of a program that puts a beeper in each corner of a world:</paragraph><snippet line-numbers=\"true\" language=\"karel\" runnable=\"true\"><snippet-file id=\"code\"># Program: CornerBeepers\n# -----------------------------\n# Places one beeper in each corner\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    # Repeat the body 4 times \n    for i in range(4):\n        put_beeper()\n        move()\n        move()\n        move()\n        turn_left()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:4,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><paragraph>Pay very close attention to the way that the program flows through these control statements. The program runs through the set of commands in the <code>for</code> loop body one at a time. It repeats the body four times.</paragraph><paragraph>Perhaps the single most complicated part of writing a loop is that you need the state of the world at the end of the loop (the <bold>postcondition</bold>) to be a valid state of the world for the start of the loop (the <bold>precondition</bold>). In the above example the assumptions match. Good times. At the start of the loop, Karel is always on a square with no beepers facing the next empty corner. What if you deleted the <code>turn_left()</code> at the end of the loop? The postcondition at the end of the first iteration would no longer satisfy the assumptions made about Karel facing the next empty corner. The code is editable. Try deleting the <code>turn_left()</code> command to see what happens!</paragraph><heading level=\"2\">Nested Loops</heading><paragraph>Technically the body of a <code>for</code> loop can contain any control flow code, even other loops. Here is an example of a <code>for</code> loop that repeats a call to a function which also has a <code>for</code> loop. We call this a &#34;nested&#34; loop. Try to read through the program, and understand what it does, before running it:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: CornerFiveBeepers\n# -----------------------------\n# Places five beepers in each corner\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    # Repeat once for each corner \n    for i in range(4):\n        put_five_beepers()\n        move_to_next_corner()\n\n# Reposition karel to the next corner \ndef move_to_next_corner() :\n    move()\n    move()\n    move()\n    turn_left()\n\n# Places 5 beepers using a for loop \ndef put_five_beepers() :\n    for i in range(5):\n        put_beeper()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:4,&#34;height&#34;:4,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><paragraph></paragraph><paragraph></paragraph><paragraph>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361901,
          "original_id": 326062,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "6. While Loops",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>The technique of defining new functions, and defining for loops—as useful as they are—does not actually enable Karel to solve any new problems. Every time you run a program it always does exactly the same thing. Programs become a lot more useful when they can respond differently to different inputs.</paragraph><paragraph>As an example. Let&#39;s say you wanted to write a program to have Karel move to a wall. But you don&#39;t simply want this program to work on one world with a fixed size. You would like to write a single program that could work on any world.</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: MoveToWall\n# ------------------------------\n# Uses a &#34;while&#34; loop to move Karel until it hits\n# a wall. Works on any sized world.\nfrom karel.stanfordkarel import *\n\n# the program starts with main\ndef main():\n    # call the move to wall function\n    move_to_wall()\n\n# this is a very useful function\ndef move_to_wall():\n    # repeat the body while the condition holds\n    while front_is_clear():\n        move()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:7,&#34;height&#34;:7,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><paragraph>Try changing the world by clicking the numbers above the world. For any sized world, Karel will move until it hits a wall. Notice that this feat can not be accomplished using a <code>for</code> loop. That would require us to know the size of the world at the time of programming.</paragraph><heading level=\"2\">Basic While Loop</heading><paragraph>In Karel, a <code>while</code> loop is used to repeat a body of code <italic>as-long-as</italic> a given condition holds. The <code>while</code> loop has the following general form:</paragraph><pre>while test:\n    statements to be repeated\n</pre><paragraph>The control-flow of a <code>while</code> loop is as follows. When the program hits a <code>while</code> loop it starts repeating a process where it first <italic>checks</italic> if the test passes, and if so <italic>runs</italic> the code in the body.</paragraph><paragraph>When the program <italic>checks</italic> if the test passes, it decides if the <italic>test</italic> is true for the current state of the world. If so, the loop will run the code in the body. If the test fails, the loop is over and the program moves on.</paragraph><paragraph>When the program <italic>runs</italic> the body of the loop, the program executes the lines in the body one at a time. When the program arrives at the end of the <code>while</code> loop, it jumps back to the top of the loop. It then rechecks the test, continuing to loop if it passes. The program does not exit the loop until it gets to a check, and the test fails.</paragraph><paragraph>Karel has many <italic>test</italic> statements, and we will go over all of them in the next chapter. For now we are going to use a single test statement: <code>front_is_clear()</code> which is true if there is no wall directly in front of Karel.</paragraph><heading level=\"2\">Fencepost Bug</heading><paragraph>Let&#39;s modify our program above to make it more interesting. Instead of just moving to a wall, have Karel place a line of beepers, one in each square. Again we want this program to work for a world of any size:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: BeeperLineBug\n# ------------------------------\n# Uses a while loop to place a line of beepers.\n# This program works for a world of any size.\n# However, because each world requires one fewer\n# moves than put_beepers it always misses a beeper.\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    # Repeat until karel faces a wall\n    while front_is_clear():\n        # Place a beeper on current square\n        put_beeper()\n        # Move to the next square\n        move()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:7,&#34;height&#34;:7,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><paragraph>That looks great. Except for one problem. On every world Karel doesn&#39;t place a beeper on the last square of the line (look closely). When Karel is on the last square, the program does not execute the body of the loop because the test no longer passes -- Karel is facing a wall. You might be tempted to try switching the order of the body so that Karel moves before placing a beeper. The code is editable so go try it!</paragraph><paragraph>There is a deeper problem that no rearrangement of the body can solve. For the world with 7 columns, Karel needs to put 7 beepers, but should only move 6 times. Since the <code>while</code> loop executes both lines when a test passes, how can you get the program to execute one command one more time than the other?</paragraph><paragraph>The bug in this program is an example of a programming problem called a <bold>fencepost error</bold>. The name comes from the fact that if you want to build a fence made of panels which have one fence post on either size, the number of fence posts is always one greater than the number of panels. How many fence posts, for example, do you need to build a fence with 10 panels? The answer is 11, as illustrated by the following diagram:</paragraph><paragraph></paragraph><figure><image src=\"https://static.ap.edusercontent.com/files/Utx8Uvis0uwdZ02aDez2h1XO\" width=\"743\" height=\"199.26977848101268\"></image></figure><paragraph>Once you discover it, fixing this bug is actually quite easy. Before Karel stops at the end of the world, all that the program has to do is place a final beeper:</paragraph><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Program: BeeperLine\n# ------------------------------\n# Uses a while loop to place a line of beepers.\n# This program works for a world of any size.\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    # Repeat until karel faces a wall\n    while front_is_clear():\n        # Place a beeper on current square\n        put_beeper()\n        # Move to the next square\n        move()\n    # Solve the fencepost error\n    put_beeper()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:7,&#34;height&#34;:7,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[]}</snippet-file></snippet><paragraph></paragraph><paragraph></paragraph><paragraph>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361902,
          "original_id": 326063,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "7. If Statements",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>The final core programming control-flow construct to learn are conditional statements (<code>if</code> and <code>if/else</code>).</paragraph><heading level=\"2\">Basic Conditionals</heading><paragraph>An <code>if/else</code> statement executes an &#34;if&#34; code-block if and only if the provided <italic>test</italic> is true for the state of the world at the time the program reaches the statement. Otherwise the program executes the &#34;else&#34; code-block.</paragraph><pre>if test:\n    if code-block\nelse:\n    else code-block\n</pre><paragraph>To get a sense of where conditional statements might come in handy, let&#39;s write a program that has Karel invert a line of beepers. If a square previously had a beeper, Karel should pick it up. If a square has no beeper, Karel should put one down.</paragraph><snippet line-numbers=\"true\" language=\"karel\" runnable=\"true\"><snippet-file id=\"code\"># Program: UpAndDown\n# -----------------------------\n\nfrom karel.stanfordkarel import *\n\ndef main():\n    while front_is_clear():\n        invert_beeper()\n        move()\n    # Prevent a fencepost bug\n    invert_beeper()\n\n# Picks up a beeper if one is present\n# Puts down a beeper otherwise\ndef invert_beeper():\n    # An if/else statement\n    if beepers_present():\n        pick_beeper()\n    else:\n        put_beeper()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\">{&#34;width&#34;:8,&#34;height&#34;:8,&#34;initialX&#34;:0,&#34;initialY&#34;:0,&#34;initialD&#34;:1,&#34;initialB&#34;:1000,&#34;cells&#34;:[{&#34;x&#34;:1,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:3,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:4,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;},{&#34;x&#34;:6,&#34;y&#34;:0,&#34;wall&#34;:{&#34;0&#34;:false,&#34;1&#34;:false,&#34;2&#34;:false,&#34;3&#34;:false},&#34;beepers&#34;:1,&#34;colour&#34;:&#34;BLANK&#34;}]}</snippet-file></snippet><paragraph>Note that an <code>if</code> statement does not need to have an <code>else</code> block -- in which case the statement operates like a <code>while</code> loop that only executes one time:</paragraph><pre>if test:\n    if code-block\n</pre><heading level=\"2\">Conditions</heading><paragraph>That last example used a new condition. Here is a list of all of the conditions that Karel knows of:</paragraph><web-snippet layout=\"seamless\"><web-snippet-file language=\"html\">&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/purecss@2.0.3/build/pure-min.css&#34; integrity=&#34;sha384-cg6SkqEOCV1NbJoCu11+bm0NvBRc8IYLRGXkmNrqUBfTjmMYwNKPWBTIKyw9mHNJ&#34; crossorigin=&#34;anonymous&#34;&gt;\n\n&lt;table class=&#34;pure-table&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;Test&lt;/th&gt;&lt;th&gt;Opposite&lt;/th&gt;&lt;th&gt;What it checks&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;front_is_clear()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;front_is_blocked()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is there a wall in front of Karel?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;beepers_present()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;no_beepers_present()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Are there beepers on this corner?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;left_is_clear()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;left_is_blocked()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is there a wall to Karel’s left?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;right_is_clear()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;right_is_blocked()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is there a wall to Karel’s right?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;code&gt;beepers_in_bag()&lt;/code&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;code&gt;no_beepers_in_bag()&lt;/code&gt;&lt;/td&gt;\n    &lt;td&gt;Does Karel have any beepers in its bag?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;!-- dirs --&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;facing_north()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;not_facing_north()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is Karel facing north?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;facing_south()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;not_facing_south()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is Karel facing south?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;facing_east()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;not_facing_east()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is Karel facing east?&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;facing_west()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;&lt;code&gt;not_facing_west()&lt;/code&gt;&lt;/td&gt;\n  &#x9;&lt;td&gt;Is Karel facing west?&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/p&gt;</web-snippet-file><web-snippet-file language=\"css\"></web-snippet-file><web-snippet-file language=\"js\"></web-snippet-file></web-snippet><heading level=\"2\">Putting it all together</heading><paragraph>Congrats! You now know all of the core programming control-flow blocks. While you learned them with Karel, methods, while loops, for loops, if/else statements work in the same way in almost all major languages, including Python.</paragraph><paragraph>Now that you have the building blocks you can put them together to build solutions to ever more complex problems. To a large extent, programming is the science of solving problems by computer. Because problems are often difficult, solutions—and the programs that implement those solutions—can be difficult as well. In order to make it easier for you to develop those solutions, you need to adopt a methodology and discipline that reduces the level of that complexity to a manageable scale.</paragraph><paragraph></paragraph><paragraph></paragraph><paragraph>Based on work by Chris Piech and Eric Roberts at Stanford University.<break></break><link href=\"https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html\">https://compedu.stanford.edu/karel-reader/docs/python/en/intro.html</link></paragraph></document>"
        },
        {
          "id": 361903,
          "original_id": 326064,
          "lesson_id": 53291,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "8. Code",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.951175+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Write and test any code here!</heading><snippet language=\"karel\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from karel.stanfordkarel import *\n\ndef main():\n    # your code here...\n    move()</snippet-file><snippet-file id=\"karel-world\" initial-speed-idx=\"\"></snippet-file></snippet></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Meet Karel the Robot",
      "tutorial_regex": "",
      "type": "karel",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-10-01T22:23:01.477696+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53299,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361915,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47890,
      "outline": "You'll learn to write and run your first Python program",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 14,
      "slide_marks_summary": [
        {
          "id": 361915,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361916,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361917,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361918,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361919,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361920,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361921,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361922,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361923,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361924,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361925,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361926,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361927,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361928,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361915,
          "original_id": 326073,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Program, language, and Python",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Program</heading><paragraph>A computer <italic>program</italic> (or <italic>code</italic>) is a set of instructions for a computer to follow. Computer <italic>programming</italic> (or <italic>coding</italic>) is the activity of writing computer programs.</paragraph><heading level=\"2\">Language</heading><paragraph>When you write a program you must use a language that the computer can understand. There are many such languages - Java, Python, C, Ruby, JavaScript, PHP, and many, many more.  Each language has its own advantages and disadvantages, and there is no \"best\" language that will be the most appropriate choice in all situations.  While, for expediency, this course will focus on a single language (Python), many of the fundamental principles you will learn, such as program flow, data manipulation and code modularity, carry over to almost every other language.</paragraph><paragraph>Like natural languages, such as English and French, programming languages have a specific grammar; this is known as the language's <italic>syntax</italic>. Unlike natural languages, programming languages require you to be precise and unambiguous.  Python has very simple syntax and is considered one of the best designed programming languages in this respect.</paragraph><heading level=\"2\">Python</heading><paragraph>In this course, you will learn the <link href=\"https://www.python.org/\">Python language</link>. Python is one of the most popular languages for several reasons: </paragraph><list style=\"unordered\"><list-item><list style=\"unordered\"><list-item><paragraph>It is a general-purpose language that can be used in a wide variety of situations.</paragraph></list-item><list-item><paragraph>It is mature enough that many comprehensive libraries for many disciplines have been built and extensively tested.</paragraph></list-item><list-item><paragraph>It was developed recently enough to be built upon many of the fundamental programming principles that have been developed and fine-tuned over the years.</paragraph></list-item><list-item><paragraph>It has a human-friendly syntax that is easy to learn.</paragraph></list-item></list></list-item></list><paragraph>Python has become one of the most popular languages for working with data. It has data processing and visualisation libraries such as <italic>pandas</italic> and <italic>Matplotlib</italic> that make handling data very easy.</paragraph><paragraph>Even though you will be learning just one language, many of the fundamental principles you will learn, such as controlling program flow, manipulating data, and modularising code, carry over to almost every other language.</paragraph><heading level=\"2\">Version</heading><paragraph>Like natural languages, programming languages tend to change over time. You'll be using the latest version of Python throughout this course - Python 3. You may encounter some Python 2 code from time to time. The language differences between these two are minor however they can be incompatible with each other.</paragraph><paragraph>In this course, code will usually be presented in a web interpreter as seen below, the language the code is written in can be seen in the top right corner of the web interpreter, most code will be editable and runnable. Try running the code below to see the exact version of Python 3 we are using (in ed):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import sys\nprint(sys.version)</snippet-file></snippet><paragraph><bold>Python nuts and bolts</bold></paragraph><paragraph>Python is an <italic>interpreted</italic> language which means that code is passed directly to an interpreter (a program running on the host machine) for execution rather than being <italic>compiled</italic> into machine-readable instructions to be executed directly by the computer. This means that executing Python code can be as simple as starting an interpreter and typing commands to run. If you installed a version of Python on your computer then there will be an interpreter as part of that installation. Alternatively, you can access an interpreter through the <italic><link href=\"https://edstem.org/au/courses/16645/workspaces/\">Workspaces</link></italic> and <italic><bold>code snippets</bold></italic> here on <bold>ed</bold> platform. Increasing usability by simplifying the process from program writing to execution makes Python a very attractive language for the novice programmer.</paragraph></document>"
        },
        {
          "id": 361916,
          "original_id": 326074,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Python Programming Basics",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Here is a very simple Python program: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello, world!&#39;)</snippet-file></snippet><heading level=\"2\">Execution</heading><paragraph>You can execute the program (i.e., run it)  by clicking &#39;Run&#39;. When you do, the Python interpreter executes each line of the program, one at a time, from beginning to end (in this case there is only one line).</paragraph><paragraph>When you run a program like this, the Python <italic>interpreter</italic> executes each line of the program, one at a time, from beginning to end (in this case there is only one line).</paragraph><paragraph>Whenever you see a runnable piece of code like this you can also modify it yourself. This is a great way for you to experiment with Python (don&#39;t worry, you won&#39;t break anything, and everything gets restored when you refresh the page). Try modifying the code above to get it to print your name rather than &#34;world&#34;.</paragraph><heading level=\"2\">Statements</heading><paragraph>Each line in the program is called a <italic>statement</italic>. Your programs will typically contain many statements. Here is one with two statements:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello, world!&#39;)\nprint(&#39;Goodbye, world!&#39;)</snippet-file></snippet><heading level=\"2\">The print() function</heading><paragraph><code>print()</code> is a Python <italic>function,</italic> one that you will find yourself using often. <code>&#39;Hello world!&#39;</code> is an <italic>argument</italic> of the function - some input that we give to the function. The <code>print()</code> function performs the task of printing the argument.</paragraph><paragraph>Try modifying the program below to make it print your name (you need to use quotation marks):</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print()</snippet-file></snippet><paragraph>If you supply <code>print()</code> with multiple arguments it will print them all, separated by spaces. You will find this very useful: </paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(&#39;The value is&#39;, 10*2)</snippet-file></snippet><paragraph>A very handy technique when using <code>print()</code> is to use an <bold>f-string</bold>. If you append an &#39;f&#39; to the start of a quoted string (before the first quote) you can get Python to do things inside the string before it prints, such as perform calculations. You do this by using curly brackets. Here are some examples: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(f&#39;The result is {10*2}.&#39;)\nprint(f&#39;The results are {10*2}, {10*3}, and {10*4}.&#39;)</snippet-file></snippet><heading level=\"2\">Input</heading><heading level=\"2\">Getting user input</heading><paragraph>Another Python function that you will use often is <code>input()</code>, which you can use to get input from the user. For example:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(input(&#39;What would you like to print? &#39;))</snippet-file></snippet><paragraph>This program asks the user for some input and then prints it.</paragraph><heading level=\"2\">Syntax errors</heading><paragraph>Before executing a program the interpreter first checks that it has correct syntax. If it finds any <italic>syntax errors</italic> it will tell you, and not run the program. The following program contains a syntax error (it&#39;s missing a quotation mark) - try running it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(&#39;Hello, world!)</snippet-file></snippet><heading level=\"2\">Runtime errors</heading><paragraph>Sometimes the syntax of a program is fine, but Python raises an error during its execution. These are called <italic>runtime errors</italic>. When this happens, execution stops, and Python returns some information about the error.</paragraph><paragraph>For example, the following program asks Python to divide a number by zero, which is impossible. It generates a runtime error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(10/0)</snippet-file></snippet><heading level=\"2\">Logical errors</heading><paragraph>Sometimes the syntax of a program is fine, and it executes without any runtime errors, but it doesn&#39;t do what you intended it to do. This is called a <italic>logical error</italic>.</paragraph><paragraph>For example, suppose you write the following program to add 1 and 2 and then multiply the result by 3:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(1 + 2 * 3)</snippet-file></snippet><paragraph>The result you&#39;re expecting is 9, because 1 + 2 is 3, and 3 times 3 is 9. But the program above prints 7. Error! This is not a syntax error, nor a runtime error - it&#39;s a logical error. The problem is that Python assumes that you want the multiplication to happen first, then the addition (you will learn more about this). So it calculates 2 x 3 = 6, then 1 + 6 = 7. You should write you program like this instead:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print((1 + 2) * 3)</snippet-file></snippet><paragraph>This removes the logical error.</paragraph><heading level=\"2\">Comments</heading><paragraph>In Python, anything on the same line after a <code>#</code> will be ignored by the Python interpreter. This allows you to add comments. It is important that the programs you write are easily understandable by someone who reads them. To help with this it can be a good idea to add comments throughout.</paragraph><paragraph>Here is an example from above, with an explanatory comment added:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\"># Ask the user for input and then print it:\nprint(input(&#39;What would you like to print? &#39;))</snippet-file></snippet><paragraph>Comments can start anywhere on a line (but use comments on the same line as the code sparingly):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(input(&#39;What would you like to print? &#39;)) # Ask the user for input and then print it</snippet-file></snippet><callout type=\"info\">You should not use comments to state the obvious. Comments should explain the intentions of the code, instead of describing the exact procedure it is performing. What the code is <italic>doing</italic> is often obvious, but it may not be obvious <italic>why</italic> it is doing that.<break></break>Here in Ed we&#39;ll add quite a few comments to code that wouldn&#39;t ordinarily be added, for <italic>instructional</italic> purposes.</callout><heading level=\"2\">Disabling code</heading><paragraph>You can also use <code>#</code> to disable one or more lines of code, either because they are not yet finished and will cause an error, or because your program is not working and you are trying to find the cause of the error, or because you are not using them but want to save them just in case you decide to use them again. For example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(&#39;Hello, world!&#39;)\n# print(&#39;Goodbye, world!&#39;)</snippet-file></snippet><heading level=\"2\">Whitespace</heading><paragraph>Python will ignore blank lines between statements and spaces between arguments in a statement.  So the following code snippets are equivalent:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">\nprint  ( &#39;Hello&#39;   )\n\nprint(   10    *      2)</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello&#39;)\nprint(10*2)</snippet-file></snippet><paragraph>Spacing at the start of a line (i.e. <italic>indentation</italic>) is not ignored by Python - it indicates a <italic>compound statement</italic> and we will see this further when we cover the <code>if</code> and <code>while</code> commands.  If you incorrectly add indentation, Python will throw a (syntax) error.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">    print(&#39;Hello&#39;)</snippet-file></snippet><paragraph>Spacing inside quotes is also not ignored by Python:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(&#39;Hello     world&#39;)</snippet-file></snippet><paragraph>Although much of your whitespace is ignored by Python it has become conventional to use it in a certain way, described in a set of guidelines called &#34;The PEP 8 Style Guide&#34;, or just &#34;PEP 8&#34;. According to PEP 8, for example, you should use <code>print(&#39;Hello&#39;)</code> rather than <code>print( &#39;Hello&#39; )</code>  or <code>print ( &#39;Hello&#39; )</code>.</paragraph><paragraph>There is a link to <link href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8</link> in the main section of this course, for your information. The guidelines are comprehensive, covering much more than just the use of whitespace. You&#39;re not expected to know all of them. If you just follow the formatting used in the examples throughout this course then your code should be fine.</paragraph><heading level=\"2\">Case sensitivity</heading><paragraph>Python is a <bold>case-sensitive</bold> language. This means that &#34;print&#34; and &#34;Print&#34; are considered to be different words. See what happens when you try to use &#34;Print&#34; instead of &#34;print&#34;:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">Print(&#39;Hello world!&#39;)</snippet-file></snippet></document>"
        },
        {
          "id": 361917,
          "original_id": 330833,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Importing modules",
          "index": 13,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph/><paragraph>You won't get far using Python before you need to <bold>import a module</bold>. A module is just a file that contains Python code, with a \".py\" extension. Although the core Python language contains a lot of functionality, some of the functionality you'll want is included in modules, rather than in the core. You can access that functionality by importing those modules.</paragraph><paragraph>For example, there is a lot of non-core mathematics functionality in the \"math.py\" module. You can import that module as follows (note that you don't include \".py\" - Python will figure it out):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math</snippet-file></snippet><paragraph>This makes all of the code that has been saved in the math.py file available for use in your program. For example, in math.py there is a function <code>floor()</code>, which rounds a number down to the nearest integer. Having imported math.py you can now call this function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\nprint(math.floor(3.14))</snippet-file></snippet><paragraph>Note that you call the function using <code>math.floor()</code>, rather than using just <code>floor()</code>. If you'd like to be able to use this function without having to add the prefix, you can do so using the <code>from</code> keyword when you import:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import floor\nprint(floor(3.14))</snippet-file></snippet><paragraph>If you'd like to import more functions then you can just separate their names by commas:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import floor, ceil\nprint(floor(3.14))\nprint(ceil(3.14))</snippet-file></snippet><paragraph>You can import everything by using an asterisk:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import *\nprint(floor(3.14))\nprint(ceil(3.14))</snippet-file></snippet><paragraph>But you should avoid doing this because you might end up with the same function name being used twice as shown in the examples below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import *\r\n\r\ndef ceil(x): # my ceil() doubles the number given\r\n    return 2*x\r\n\r\nprint(ceil(3.14))  # you will get 6.28</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import *\r\n\r\n#def ceil(x): # my ceil() doubles the number given\r\n#    return 2*x\r\n\r\nprint(ceil(3.14))  # you will get 4</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\r\n\r\ndef ceil(x): # my ceil() doubles the number given\r\n    return 2*x\r\n\r\nprint(math.ceil(3.14))  # you will get 4\r\nprint(ceil(3.14))  # you will get 6.28</snippet-file></snippet><paragraph/><paragraph>You can use the <code>dir()</code> function to see what is available to you in a module that you have imported:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\nprint(dir(math))</snippet-file></snippet><paragraph>When you import a module you can give it an <bold>alias</bold> using the <code>as</code> keyword, to save yourself some typing. One module that we will be using a lot in the second half of this course is the pandas module. It is standard to give it the alias \"pd\" when importing it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import pandas as pd\nprint(dir(pd))</snippet-file></snippet><paragraph>When Python gets installed on a computer many modules are installed with it. These are called <bold>built-in modules</bold>. These are automatically available for you to import. If you want to import other modules they will first need to be installed on the computer. You can also write your own modules, and import them.</paragraph></document>"
        },
        {
          "id": 361918,
          "original_id": 326075,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Objects",
          "index": 14,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>When you program with Python (and many other languages) you will work a lot with <italic>objects.</italic> Objects encapsulate a piece of data (which may be simple, such as a single number; or more complex, such as a collection of smaller objects) and are the building blocks of Python.  For example, in the statement <code>print(&#39;The value is&#39;, 10*2)</code>, <code>&#39;The value is&#39;</code>, <code>10</code> and <code>2</code> are all objects.  Indeed, even the <code>print()</code> function is an object.  </paragraph><heading level=\"2\">Types</heading><paragraph>Every object is of a certain <italic>type</italic>. The type of an object determines how Python interacts with it, for example it makes sense to add two numbers, but it does not make sense to add functions.  In Python, the main types are:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Integer (int)</bold>. A whole number, positive or negative, including zero (i.e. ..., -2, -1, 0, 1, 2, ...).</paragraph></list-item><list-item><paragraph><bold>Floating-point number (float)</bold>. A positive or negative number, not necessarily whole, including zero (e.g. 3.14, -0.12, 89.56473).</paragraph></list-item><list-item><paragraph><bold>String (str)</bold>. A sequence of characters (e.g. &#39;Hello&#39;, &#39;we34t&amp;2*&#39;).  Used to store text.</paragraph></list-item><list-item><paragraph><bold>Boolean (bool)</bold>. A truth value, either true or false.</paragraph></list-item><list-item><paragraph><bold>List (list)</bold>. An ordered container of objects.</paragraph></list-item><list-item><paragraph><bold>Tuple (tuple)</bold>. An immutable list (i.e. one that cannot be changed).</paragraph></list-item><list-item><paragraph><bold>Set (set)</bold>. An unordered container of unique objects.</paragraph></list-item><list-item><paragraph><bold>Dictionary (dict)</bold>. A set of key-object pairs.</paragraph></list-item><list-item><paragraph><bold>Function</bold>. A piece of code that can be run by calling it.</paragraph></list-item><list-item><paragraph><bold>Class</bold>. A user-defined type of object.</paragraph></list-item></list><paragraph>Python also has a special object, <code>None</code>, which represents the absence of an object. It is of type <bold>NoneType</bold>. It is the only object of this type.</paragraph><paragraph>You will be learning more about the objects of each type. This week you will learn about integers, floats, strings, and booleans. Next week you will learn about lists, tuples, sets, and dictionaries. In Week 3 you will learn about functions and classes. </paragraph><heading level=\"2\">Checking the type of an object</heading><paragraph>You can find out the type of an object by using Python&#39;s <code>type()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(type(1))\nprint(type(3.14))\nprint(type(&#39;Hello&#39;))\nprint(type(None))\nprint(type(print))</snippet-file></snippet><paragraph>Notice in the last example above that we have provided the <code>print</code> function as an argument to the <code>type</code> function. You can do that - the <code>print</code> function is an object, just like numbers and strings are, and you can provide it as an argument to the <code>type()</code> function to find out what type of object it is. Most of the time you&#39;ll be calling <code>print()</code>, and providing arguments to it, but occasionally you might provide it as an argument to some other function, as we have done above. In fact, you can even provide <code>print</code> as an argument to <code>print()</code> function itself:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(print)</snippet-file></snippet><paragraph>When an object is of a certain type we say that it is an <bold>instance</bold> of that type. You can also use Python&#39;s <code>isinstance()</code> function to check whether an object is of a certain type:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(isinstance(1, int)) # True\nprint(isinstance(1, float)) # False\nprint(isinstance(3.14, float)) # True\nprint(isinstance(3.14, int)) # False\nprint(isinstance(&#39;Hello&#39;, str)) # True\nprint(isinstance(&#39;Hello&#39;, float)) # False</snippet-file></snippet><heading level=\"2\">Attributes</heading><paragraph>Objects have <italic>attributes</italic>. Attributes are properties that are specific to the object.  For example, the string object &#39;Hello&#39;, has an attribute <code>upper()</code>, which is a function that produces an upper-case version of the string. You can access this attribute of the string by using <italic>dot notation</italic>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello&#39;.upper())</snippet-file></snippet><paragraph>It can be useful to think of &#39;.&#39; as representing &#34; &#39;s &#34; (i.e. apostrophe-s) - the statement <code>&#39;Hello&#39;.upper()</code> is instructing Python to execute the <code>upper()</code> function of the <code>&#39;Hello&#39;</code> object.</paragraph><paragraph>When an attribute is a function, like this one is, it is also called a <italic>method</italic>. Attributes which are not methods are also known as <italic>fields</italic>.</paragraph><paragraph>Which attributes an object has depends upon what type of object it is. String objects have the <code>upper()</code> attribute (method), but integer objects do not. If you try to access this attribute of an integer you will get an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#34;Hello&#34;.upper())\nnumber = 12\nprint(number.upper())</snippet-file></snippet><paragraph>Part of learning Python, and other languages, is learning what attributes the different types of objects have.</paragraph></document>"
        },
        {
          "id": 361919,
          "original_id": 326076,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Expressions",
          "index": 16,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>To work with an object you need to refer to it, and to refer to it you use an <italic>expression</italic>. </paragraph><paragraph>Expressions come in two varieties: <bold>simple expressions</bold> and <bold>complex expressions</bold>. We&#39;ll consider simple expressions first, and then complex expressions.</paragraph><paragraph>There are three types of simple expressions:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Literals</bold></paragraph></list-item><list-item><paragraph><bold>Variables</bold></paragraph></list-item><list-item><paragraph><bold>Constants</bold></paragraph></list-item></list><heading level=\"2\">Literals</heading><paragraph>A <italic>literal</italic> shows explicitly which object they refer to. Here are some examples: </paragraph><list style=\"bullet\"><list-item><paragraph>Integer literals: <code>1</code>, <code>26</code>, <code>-14</code></paragraph></list-item><list-item><paragraph>Floating-point literals: <code>3.14</code>, <code>0.06</code>, <code>-9.7</code></paragraph></list-item><list-item><paragraph>String literals: <code>&#39;Hello&#39;</code>, <code>&#34;Goodbye&#34;</code> (you can use single or double quotes, but they must match)</paragraph></list-item><list-item><paragraph>Boolean literals: <code>True</code>, <code>False</code> (there are only two)</paragraph></list-item><list-item><paragraph>None literal: <code>None</code> (there is only one)</paragraph></list-item></list><paragraph>You might be wondering whether <code>-14</code> counts as a literal. The answer is no: Python understands this expression not as a literal for the number -14, but as the application of the <code>-</code> operator to the number 14 (more about number operators in the next slide).</paragraph><heading level=\"2\">Variables</heading><paragraph>You can also introduce your own names for objects, and these are called <italic>variables</italic>. </paragraph><paragraph>When you introduce a variable you have to specify which object it refers to. This is called <bold>assigning</bold> the variable, and you do it using the <bold>assignment operator</bold> <code>=</code>. This is sometimes also called <bold>binding</bold> the variable - you bind it to an object.</paragraph><paragraph>Here is an example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(message)</snippet-file></snippet><paragraph>The first line introduces a variable <code>message</code> and assigns it the string object <code>&#39;Hello there&#39;</code>. The second line uses this variable to print the object.</paragraph><paragraph>Once you introduce a variable you can use it as many times as you like throughout your program:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(message)\nprint(message)\nprint(message)\nprint(message)</snippet-file></snippet><paragraph>The object that the variable refers to is often called the <bold>value</bold> of the variable. You can change the value of a variable (i.e., change which object the variable refers to) as often as you like:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(message)\nmessage = 3.14 # Assign a new value\nprint(message)\nmessage = True # Assign a new value\nprint(message)</snippet-file></snippet><paragraph>Notice that the variable <code>message</code> in the program refers to different types of object as the program proceeds - first it refers to a string, then to a floating-point number, and then to a boolean. Because variables in Python can do this we say that Python has <italic>flexible typing</italic>. (Some languages, such as C and Java, do not allow variables to change their reference to a different type of object.)</paragraph><paragraph>If you want to check the type of the object that a variable refers to, you can use the <code>type()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = &#39;Hello there&#39;\nprint(type(x)) # str\nx = 3.14\nprint(type(x)) # float\nx = True\nprint(type(x)) # bool\nx = print\nprint(type(x)) # function</snippet-file></snippet><paragraph>Any type of object can be assigned to a variable, not just numbers, strings or booleans. Look at the last example above - we have assigned the <code>print</code> function to the variable <code>x</code>. Having done that, <code>x</code> is then another name for the <code>print</code> function, and we can use it accordingly:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = print\nx(&#39;Hello, world!&#39;)</snippet-file></snippet><paragraph>You can use variables to assign other variables:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nnew_message = message\nprint(new_message)</snippet-file></snippet><paragraph>Be careful to understand what&#39;s going on here. In line 2 you are getting <code>new_message</code> to refer to whatever it is that <code>message</code> refers to at the time. If a different object is later assigned to <code>message</code>, it will <underline>not</underline> automatically be assigned to <code>new_message</code> as well - there will be no change in what <code>new_message</code> refers to. Let&#39;s check that:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nnew_message = message\nmessage = &#39;Goodbye&#39; # Value of new_message not changed \nprint(new_message)</snippet-file></snippet><paragraph>You must assign a value to a variable before you use it, otherwise Python will generate an error:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(message) # Error - message has no value</snippet-file></snippet><paragraph>If you want to introduce a variable but don&#39;t yet have any significant value to assign it then you can assign it the value <code>None</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = None\nprint(message) # No error - message has a value</snippet-file></snippet><paragraph>You can assign multiple variables the same value:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = y = z = 0 # All get assigned 0\nprint(x, y, z)</snippet-file></snippet><paragraph>Or different values, using a technique called <bold>multiple assignment</bold>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x, y, z = 1, 2, 3 # x gets 1, y gets 2, z gets 3\nprint(x, y, z)</snippet-file></snippet><paragraph>This technique gives you a way to swap the values of two variables:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x, y = 1, 2\nprint(x, y)\nx, y = y, x # Swap the values of x and y\nprint(x, y)</snippet-file></snippet><heading level=\"2\">Naming rules</heading><paragraph>You have a fair bit of freedom in what names you can introduce, but there are some rules and restrictions.</paragraph><paragraph>First,  you cannot use any of Python&#39;s keywords, such as <code>import</code>, <code>from</code>, <code>True</code>, <code>False</code>, <code>None</code>, etc. There are 33 keywords in version 3 - you will be learning most of them.</paragraph><paragraph>Second, a name can only contain uppercase letters (<code>A-Z</code>), lower case letters (<code>a-z</code>),  digits (<code>0-9</code>) and the underscore (<code>_</code>). Moreover, the first character cannot be a digit.</paragraph><paragraph>Keep in mind that Python is case sensitive, and this applies to your names as well. The program below generates an error because the variable <code>Message</code> is not given a value before it is used (the variable <code>message</code> is, but that&#39;s a different variable):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(Message) # Error - Message does not have a value</snippet-file></snippet><paragraph>It is best to choose names for your variables that make the intention of your program as clear as possible. Consider the following two pieces of code:</paragraph><pre>var1 = 10\nvar2 = 120\nprint(var1 * var2)\n</pre><pre>days = 10\nfish_per_day = 120\nprint(days * fish_per_day)</pre><paragraph>Both pieces of code do the same thing, but the second makes it much clearer what is going on. In effect, by choosing variable names carefully we can use them to help explain the code.</paragraph><paragraph>It is fairly standard to make variable names lowercase, with words separated by underscores, e.g, <code>fish_per_day</code>. This is often called <bold>snake case</bold>.</paragraph><heading level=\"2\">Unbinding variables</heading><paragraph>You can unbind a variable from an object by using <code>del</code>.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = 10\nprint(x)\ndel x # Unbind x from its value\nprint(x) # Now we get an error</snippet-file></snippet><paragraph>Note that the word &#34;del&#34; is a bit misleading. You are not deleting the variable or the object it is bound to - you are just severing the connection between them.</paragraph><paragraph>Although, when you do this the variable and/or the object might get removed from memory, via a process called <bold>garbage collection</bold>. An object is removed from memory by Python when nothing is referring to it.</paragraph><paragraph>Also note that unbinding a variable is not the same as <bold>rebinding</bold> it to <code>None</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 10\nprint(x)\nx = None\nprint(x) # No error - x has a value</snippet-file></snippet><heading level=\"2\">Choosing types</heading><paragraph>You can get Python to return an object of a certain type by using the functions <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>list</code>, <code>tuple</code>, <code>set</code>, and <code>dict</code>. For example, if you would like <code>var</code> to refer to the floating-point number 1 rather than the integer 1 you can use the <code>float</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">var = 1 # var refers to the integer 1\nprint(var, type(var))\n\nvar = float(1) # var refers to the floating point number 1.0\nprint(var, type(var))</snippet-file></snippet><paragraph>You might need to do this when you are getting user input. Python treats user input as a string, so if you are asking the user to enter a number then you will need to convert the input, using <code>int</code> or <code>float</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># number will be a string:\nnumber = input(&#39;Enter a number: &#39;)\nprint(number, type(number))\n\n# number will be an integer:\nnumber = int(input(&#39;Enter a number: &#39;))\nprint(number, type(number))\n\n# number will be a float:\nnumber = float(input(&#39;Enter a number: &#39;))\nprint(number, type(number))</snippet-file></snippet><paragraph>Sometimes Python can&#39;t return an object of the type you are asking for, and it will raise an error. For example, Python cannot make every string into an integer:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">var = int(&#39;hello&#39;) # Error - cannot make &#39;hello&#39; into an integer\nprint(type(var))</snippet-file></snippet><paragraph>You can use the same functions to change the type of object a variable refers to after it has been set: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">var = 2 # var refer to the integer 2, by default\nprint(var, type(var))\n\nvar = float(var) # var now refers to the floating-point number 2.0\nprint(var, type(var))\n\nvar = str(var) # var now refers to the string &#39;2.0&#39;\nprint(var, type(var))</snippet-file></snippet><paragraph>Note that when it operates on a floating-point number the <code>int</code> function truncates all decimal places:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(int(1.2))\nprint(int(-1.2))</snippet-file></snippet><heading level=\"2\">Constants</heading><paragraph>If you intend the value of a variable not to change, then you are using it as a <bold>constant</bold>. It is conventional to indicate this by naming it using all capital letters, with underscores separating the words, e.g, <code>MAX_INT</code>. One of the main reasons for using constants is to give an indication as to <italic>why</italic> a particular value is being used (e.g. using the constant HOURS_PER_DAY instead of the literal 24), so again, it&#39;s best to use names that help to explain what your program does:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">HOURS_PER_DAY = 24 # Signal that this should not change\nMINUTES_PER_HOUR = 60 # Signal that this should not change\n\nnum_days = int(input(&#39;How many days? &#39;))\nnum_minutes = num_days * HOURS_PER_DAY * MINUTES_PER_HOUR\n\nprint(num_days, &#39;days is&#39;, num_minutes, &#39;minutes&#39;)</snippet-file></snippet><paragraph>Note that just with any other variable, it is <italic>possible</italic> to change the value of a constant - it is up to the programmer to ensure that variables that are intended to be constants do not change after they are defined.</paragraph><heading level=\"2\">Complex expressions</heading><paragraph>A <bold>complex expression</bold> is an expression that contains subexpressions, combined using arithmetical and other kinds of operators (you will be learning about various kinds of operators).</paragraph><paragraph>For example, <code>10 * 2</code>. This is an expression, because it refers to an object - the number 20. And it is a complex expression, because it contains a subexpression - the literal <code>10</code>. Actually, it contains another subexpression too - the literal <code>2</code>. But it only needs to contain one subexpression to count as complex. These two subexpressions are combined using the <code>*</code> operator.</paragraph><paragraph>You will see many examples of complex expressions as we proceed.</paragraph></document>"
        },
        {
          "id": 361920,
          "original_id": 331536,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Working with numbers",
          "index": 88,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Python has 3 built-in types for numbers: </paragraph><list style=\"unordered\"><list-item><paragraph><code>int</code> - representing whole numbers (positive and negative integers) with unlimited precision (i.e. there is no <italic>a priori</italic> maximum or minimum value an <code>int</code> object can have)</paragraph></list-item><list-item><paragraph><code>float</code> - representing <link href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic\">floating point numbers</link> (non-whole numbers) with a limited precision (i.e. a <code>float</code> object is limited to a certain number of significant figures)</paragraph></list-item><list-item><paragraph><code>complex</code> - representing complex numbers. A complex number is a number with two distinct components: a <bold>real</bold> part and an <bold>imaginary</bold> part.</paragraph></list-item></list><paragraph>While numeric types are largely interchangeable (for example you can add an <code>int</code> to a <code>float</code>), a common source of runtime errors is when objects of the wrong type are being used (for example using a <code>float</code> when an <code>int</code> was expected or vice versa).</paragraph><heading level=\"2\">Operating on numbers</heading><paragraph>You can add, subtract, multiply, and divide numbers by using the <bold>operators</bold> <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, respectively, and combinations of them:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(1 + 2)\nprint(10 - 5)\nprint(3 * 4)\nprint(20/4)\nprint((1 + 2)*(3 + 4))\nprint(10/(3-1)) </snippet-file></snippet><paragraph>Complex numbers examples:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">n = 1 + 2j\nprint(n)\nprint(n.real)\nprint(n.imag)\na = 1 + 2j\nb = 3 - 4j\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)</snippet-file></snippet><paragraph></paragraph><paragraph>You can raise one number to the power of another number by using the <bold>exponentiation operator</bold><italic>,</italic> <code>**</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(10 ** 2) # 10 to the power 2\nprint(2 ** 3)  # 2 to the power 3</snippet-file></snippet><paragraph>You can divide one number by another number and round down to the nearest whole number by using the <bold>integer division operator</bold>, <code>//</code>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(10 // 3) # 10 divided by 3 and rounded down</snippet-file></snippet><paragraph>Note the effect of using <code>//</code> on negative numbers:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(-10 // 3) # -10 divided by 3 and rounded down</snippet-file></snippet><paragraph>You can divide one number by another number and get the remainder by using the <bold>modulus operator</bold>, <code>%</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(10 % 3) # The remainder when 10 is divided by 3</snippet-file></snippet><heading level=\"2\">Order of operations</heading><paragraph>Unless you specify the order in which operations are to be performed, by using brackets, Python performs them in a very particular order:</paragraph><list style=\"bullet\"><list-item><paragraph>First, <code>**</code> is performed, from right to left</paragraph></list-item><list-item><paragraph>Next,  <code>*</code>, <code>/</code>, <code>//</code>, and <code>%</code> are performed, from left to right.</paragraph></list-item><list-item><paragraph>Next,  <code>+</code> and <code>-</code> are performed, from left to right.</paragraph></list-item></list><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(1 + 2 * 3) # Same as 1 + (2*3) \nprint(2 ** 3 * 4) # Same as (2**3) * 4\nprint(24 / 6 * 2) # Same as (24/6) * 2\nprint(24 / 6 / 2) # Same as (24/6) / 2\nprint(2 ** 2 ** 3) # Same as 2**(2**3)</snippet-file></snippet><heading level=\"2\">Augmented assignment operators</heading><paragraph>You will often find yourself wanting to operate on a variable and then re-assign the result to that same variable. Python provides <bold>augmented assignment operators</bold> to allow for more concise code: <code>+=</code>, <code>-=,</code> ,<code>*=</code>, <code>/=</code>, <code>//=</code>, and <code>%=</code> .</paragraph><list style=\"bullet\"><list-item><paragraph><code>x += 2</code> is equivalent to <code>x = x + 2</code></paragraph></list-item><list-item><paragraph><code>x -= 2</code> is equivalent to <code>x = x - 2</code></paragraph></list-item><list-item><paragraph><code>x *= 2</code> is equivalent to <code>x = x * 2</code></paragraph></list-item><list-item><paragraph><code>x /= 2</code> is equivalent to <code>x = x / 2</code></paragraph></list-item><list-item><paragraph><code>x //= 2</code> is equivalent to <code>x = x // 2</code></paragraph></list-item><list-item><paragraph><code>x %= 2</code> is equivalent to <code>x = x % 2</code></paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 12\nx += 2 # Equivalent to x = x + 2 (assign to x the result of x + 2)\nprint(x)</snippet-file></snippet><heading level=\"2\">Comparing numbers</heading><paragraph>Python has a number of <bold>comparison operators</bold> which you can use to compare numbers:</paragraph><list style=\"bullet\"><list-item><paragraph><code>num1 == num2</code> is <code>True</code> if the value of <code>num1</code> <bold>equals</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 is num2</code> is <code>True</code> if the value of <code>num1</code> <bold>equals</bold> the value of <code>num2</code>, and <code>num1</code> and <code>num2</code> <bold>have the same type</bold>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 != num2</code> is <code>True</code> if the value of <code>num1</code> <bold>does not equal</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 is not num2</code> is <code>True</code> if the value of <code>num1</code> <bold>does not</bold> <bold>equal</bold> the value of <code>num2</code>, or <code>num1</code> and <code>num2</code> <bold>have different types</bold>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &lt; num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is less than</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &lt;= num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is less than or equal to</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &gt; num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is greater than</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &gt;= num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is greater than or equal to</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 1\ny = 1.0\nprint(1 == 1.0)\nprint(x is y)</snippet-file></snippet><heading level=\"2\">Floating-point numbers and <code>==</code></heading><paragraph>Because floating point numbers are stored with limited precision you might experience strange results when attempting to compare them with <code>==</code>. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(0.1 + 0.2 == 0.3)</snippet-file></snippet><paragraph>Why does this comparison return <code>False</code>? Because <code>0.1 + 0.2</code> is not what you would expect:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(0.1 + 0.2)</snippet-file></snippet><paragraph>When you compare floating point numbers using <code>==</code> or <code>!=</code> you should always round them float to a specified precision, using the <code>round</code> function: <code>round(x, n)</code> rounds the value of <code>x</code> to n decimal places.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(round(0.1 + 0.2, 1))\nprint(round(0.3, 1))\nprint(round(0.1 + 0.2, 1) == round(0.3, 1))</snippet-file></snippet><paragraph>Note: the <code>round</code> function implements <link href=\"https://en.wikipedia.org/wiki/Rounding#Round_half_to_even\">round half to even</link>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(round(4.5, 0))\nprint(round(5.5, 0))\nprint(round(-4.5, 0))\nprint(round(-5.5, 0))</snippet-file></snippet><heading level=\"2\">Applying functions</heading><paragraph>Python has the functions <code>int</code>, <code>float</code>,  <code>abs</code>, <code>pow</code>, <code>round</code> that you can use to manipulate numbers:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(int(&#39;3&#39;) + float(&#39;2.0&#39;)) # Convert strings to numbers and add them\nprint(abs(-5)) # Absolute value of -5\nprint(pow(2, 4)) # 2 to the power of 4.  This is the same as 2**4\nprint(round(3.567, 2)) # Round 3.567 to 2 decimal places</snippet-file></snippet><heading level=\"2\">Generating random numbers</heading><paragraph>It can be very useful to generate random numbers. You can do this by importing the functions <code>random</code> and <code>randint</code> from the <code>random</code> module.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">from random import random, randint\nprint(random()) # Random float between 0 and 1\nprint(randint(10, 20)) # Random integer between 10 and 20 (inclusive)</snippet-file></snippet><heading level=\"2\">Other mathematical functions</heading><paragraph>A lot of other mathematical functions that you might need are in in <code>math</code> module:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\nprint(math.sin(0.5)) # Degrees are in radians\nprint(math.cos(0.5))\nprint(math.tan(0.5))\nprint(math.sqrt(225)) # Square root\nprint(math.log(10)) # Natural logarithm, base e\nprint(math.ceil(2.05)) # Round up to nearest integer\nprint(math.floor(2.95)) # Round down to nearest integer</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361921,
          "original_id": 331537,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Working with strings",
          "index": 89,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>A string is a sequence of characters. The characters might be ones you can type on your keyboard, or any of the hundreds of thousands of other <bold>unicode characters</bold>, including symbols and foreign language letters.</paragraph><heading level=\"2\">String literals</heading><paragraph>As you have seen, string literals have the characters between quotes, either single quotes or double quotes.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">literal_one = 'A string' # You can use single quotes\nliteral_two = \"A string\" # Or double quotes\nprint(literal_one)\nprint(literal_two)</snippet-file></snippet><heading level=\"2\">The empty string</heading><paragraph>One of the most useful strings is the <bold>empty string</bold> - a string with no characters. The literal for an empty string is <code>''</code>, or <code>\"\"</code>.</paragraph><paragraph>Note that the empty string is not the same thing as <code>None</code> - they are different objects:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">empty_string = ''\nprint(empty_string)\nprint(None)\nprint(empty_string is None)</snippet-file></snippet><heading level=\"2\">Escaping special characters</heading><paragraph>Sometimes you will need to use a string literal that contains quote marks or other characters that have special meaning in Python. You can do this by <bold>escaping</bold> those special characters, which means prefixing them with a backslash <code>\\</code>.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Backslash used to escape a quote mark\nprint('Penny\\'s dog')\nprint(\"Penny's dog is called \\\"Mac\\\".\")\n\n# Backslash used to escape a new line symbol\nprint('This is one line.\\nThis is a second line')\n\n# Backslash used to escape a tab symbol\nprint('Here\\tThere')</snippet-file></snippet><paragraph>This means that the backslash itself has a special meaning in strings, so to include it you must escape it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(\"You can have tea neither\\nor coffee\")\nprint(\"You can have tea neither\\\\nor coffee\")</snippet-file></snippet><paragraph>If you have a lot of backslashes and no special characters then you can tell Python to ignore the special meaning of the backslash by preceding the string with <code>r</code> (for \"raw\"):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(r\"You can have tea neither\\nor coffee\")</snippet-file></snippet><paragraph>You can avoid having to escape single quote marks by enclosing the whole string in double quotes. Similarly, you can avoid having to escape double quote marks by enclosing the whole string in single quotes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(\"Penny's dog\")\nprint('Penny said, \"This is my dog\".')</snippet-file></snippet><paragraph>If you like to include line breaks in a string then you can either use <code>\\n</code>, as in the example above, or you can use triple quotes around the string:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Using \\n\ntext = 'This is one line.\\nThis is a second line'\nprint(text)\n\n# Using triple single quotes\ntext = '''This is one line.\nThis is a second line.'''\nprint(text)\n\n# Using triple double quotes\ntext = \"\"\"This is one line.\nThis is a second line.\"\"\"\nprint(text)\n\ntext = \"\"\"\\\nThis is one line.\nThis is a second line.\"\"\"\nprint(text)</snippet-file></snippet><paragraph>You can also use triple quotes around a string that contains both single and double quotes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">text = '''She said, \"I don't know how you do it!\"'''\nprint(text)\ntext = \"\"\"She said, 'I don't know what \"\" means'\"\"\"\nprint(text)</snippet-file></snippet><paragraph>You'll get an error if you end up with four quotes in a row.</paragraph><heading level=\"2\">Concatenating strings</heading><paragraph>You can <bold>concatenate</bold> strings (i.e. join them) using the  <code>+</code> operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">first_name = 'Leo'\nlast_name = 'Tolstoy'\nfull_name = first_name + ' ' + last_name\nprint(full_name)</snippet-file></snippet><paragraph> You can also use the <code>+=</code> augmented assignment operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">name = 'Leo'\nname += ' '\nname += 'Tolstoy'\nprint(name)</snippet-file></snippet><paragraph>You can duplicate a string a given number of times by using the <code>*</code> operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('a' * 10)</snippet-file></snippet><heading level=\"2\">Comparing strings</heading><paragraph>Just as with numbers, you can use Python's comparison operators to compare strings:</paragraph><list style=\"bullet\"><list-item><paragraph><code>str1 == str2</code> is <code>True</code> if <code>str1</code> and <code>str2</code> are the same sequence of characters, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 != str2</code> is <code>True</code>  if <code>str1</code> and <code>str2</code> are not the same sequence of characters, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 in str2</code> is <code>True</code> if <code>str1</code> appears as a substring in <code>str2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 not in str2</code> is <code>True</code> if <code>str1</code> does not appear as a substring in <code>str2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 &lt; str2</code> is <code>True</code> if <code>str1</code> <bold>is lexicographically less than</bold> (i.e. would appear earlier in the dictionary than) <code>str2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph>Similarly we have <code>str1 &lt;= str2</code>, <code>str1 &gt; str2</code>, and <code>str1 &gt;= str2</code></paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('A' == 'A')\nprint('A' == \"A\") # Whether you define literals with ' or \" does not matter</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('fish' in 'selfishness')\nprint('fine' in 'selfishness') # Substrings have to be contiguous</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('A' &lt; 'B')\nprint('AA' &lt; 'AB')\nprint('A' &lt; 'AA')</snippet-file></snippet><heading level=\"2\">Applying functions to strings</heading><paragraph>You can use the <code>len</code> function to find the length of a string:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(len('abcde'))</snippet-file></snippet><heading level=\"2\">Calling string methods</heading><paragraph>String objects have many useful methods. For example, they have a method <code>upper</code> which returns a string with the same characters but all in upper case.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">s = 'hello'\nprint(s.upper())</snippet-file></snippet><paragraph>None of a string's methods <bold>modify the string in place</bold> - they all <bold>return a new string</bold>. So, if you want to modify a string by using one of the methods you have to assign the result of the method back to the string. To illustrate: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">s = 'hello'\nprint(s)\n\ns.upper() # Returns a new string - does not change s\nprint(s)\n\ns = s.upper() # Assign the new string back to s - changes s\nprint(s)</snippet-file></snippet><paragraph>Some of the most useful string methods are listed below.</paragraph><list style=\"bullet\"><list-item><paragraph><code>str.isupper()</code> - Returns true if all characters in <code>str</code> are upper case</paragraph></list-item><list-item><paragraph><code>str.islower()</code> - Returns true if all characters in <code>str</code> are lower case</paragraph></list-item><list-item><paragraph><code>str.isalpha()</code> - Returns true if all characters in <code>str</code> are from the alphabet</paragraph></list-item><list-item><paragraph><code>str.isdigit()</code> - Returns true if all characters in <code>str</code> are digits</paragraph></list-item><list-item><paragraph><code>str.isnumeric()</code> - Returns true if all characters in <code>str</code> are numeric</paragraph></list-item><list-item><paragraph><code>str.isspace()</code> - Returns true if all characters in <code>str</code>are whitespace characters (i.e. space, tab, or new line)</paragraph></list-item><list-item><paragraph><code>str.startswith()</code> - Returns true if <code>str</code> starts with the specified value</paragraph></list-item><list-item><paragraph><code>str.endswith()</code> - Returns true if <code>str</code> ends with the specified value</paragraph></list-item><list-item><paragraph><code>str.upper()</code> - Returns <code>str</code> with every character in upper case</paragraph></list-item><list-item><paragraph><code>str.lower()</code> - Returns <code>str</code> with every character in lower case</paragraph></list-item><list-item><paragraph><code>str.title()</code> - Returns <code>str</code> with the first character of each word in upper case</paragraph></list-item><list-item><paragraph><code>str.capitalize()</code> - Returns <code>str</code> with the first character uppercase and the rest lowercase</paragraph></list-item><list-item><paragraph><code>str.format()</code> - Returns <code>str</code> formatted as specified</paragraph></list-item><list-item><paragraph><code>str.find()</code> - Searches <code>str</code> for a specified value and returns the index at which it is first found (or -1 if it was not found)</paragraph></list-item><list-item><paragraph><code>str.index()</code> - like <code>str.find</code> but raises an error if the value is not found</paragraph></list-item><list-item><paragraph><code>str.rfind()</code> - Searches <code>str</code> for a specified value and returns the index at which it is last found (or -1 if it was not found)</paragraph></list-item><list-item><paragraph><code>str.count()</code> - Returns the number of times a specified value occurs in <code>str</code></paragraph></list-item><list-item><paragraph><code>str.split()</code> - Splits the string at the specified separator, and returns a list</paragraph></list-item><list-item><paragraph><code>str.strip()</code> - Returns <code>str</code> with whitespace stripped from both ends</paragraph></list-item><list-item><paragraph><code>str.lstrip()</code> - Returns <code>str</code> with whitespace stripped from the left end </paragraph></list-item><list-item><paragraph><code>str.rstrip()</code> - Returns <code>str</code> with whitespace stripped from the right end </paragraph></list-item><list-item><paragraph><code>str.replace()</code> - Returns <code>str</code> with a specified value replaced by a specified value</paragraph></list-item></list><paragraph/></document>"
        },
        {
          "id": 361922,
          "original_id": 331538,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Working with booleans",
          "index": 90,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Boolean objects are the simplest type of objects in Python, but often they play the most significant role in determining the path that a program takes (as you will see).</paragraph><paragraph>There are two boolean objects: <code>True</code> and <code>False</code>.  They most commonly appear as the result of the comparison operations we have seen for the other types, for example <code>3 &lt; 5</code> will evaluate to <code>True</code>; and <code>1 + 1 == 3</code> will evaluate to <code>False</code>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(3 &lt; 5) # True\nprint(1 + 1 == 3) # False</snippet-file></snippet><heading level=\"2\">Operating on booleans</heading><paragraph>You can build complex boolean expressions by combining simple boolean expressions with the logical operators <code>not</code>, <code>and</code>, and <code>or</code>:</paragraph><list style=\"bullet\"><list-item><paragraph><code>not x</code> is true if <code>x</code> is false, otherwise it is false.</paragraph></list-item><list-item><paragraph><code>x and y</code> is true if <code>x</code> is true and <code>y</code> is true, otherwise it is false.</paragraph></list-item><list-item><paragraph><code>x or y</code> is true if <code>x</code> is true or <code>y</code> is true or both, otherwise it is false</paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(not True) # False\nprint(not False) # True\nprint(not 3 &lt; 5) # False</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(True and True) # True\nprint(True and False) # False\nprint(False and True) # False\nprint(False and False) # False\nprint((3 &lt; 5) and (1 + 1 == 3)) # False</snippet-file></snippet><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(True or True) # True\nprint(True or False) # True\nprint(False or True) # True\nprint(False or False) # False\nprint((3 &lt; 5) or (1 + 1 == 3)) # True</snippet-file></snippet><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">guess = int(input(&#39;Enter a number: &#39;))\nprint(&#39;Your number is between 2 and 5?&#39;)\nprint(guess &gt; 2 and guess &lt; 5)</snippet-file></snippet><heading level=\"2\">Chaining comparisons</heading><paragraph>It is possible to combine comparisons into a chain:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 12\n# Rather than this\nprint(5 &lt; x and x &lt; 15)\n# You can use this\nprint(5 &lt; x &lt; 15)</snippet-file></snippet><heading level=\"2\">Short circuiting</heading><paragraph>The operators <code>or</code> and <code>and</code> are said to be <bold>short circuiting</bold> operators, because they only evaluate their second expression if they need to.</paragraph><paragraph>To illustrate, the program below does not generate an error, even though the variable <code>var</code> has not been defined. That&#39;s because Python doesn&#39;t even look at that variable. It doesn&#39;t need to, because the first <code>True</code> is enough to make the whole expression true.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(True or var)</snippet-file></snippet><paragraph>Similarly, the program below does not generate an error, even though the variable <code>var</code> has not been defined. That&#39;s because Python doesn&#39;t need to look at it - the first <code>False</code> is enough to make the whole expression false.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(False and var)</snippet-file></snippet><paragraph>If you swap the order in either case, you get an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(var and False)</snippet-file></snippet></document>"
        },
        {
          "id": 361923,
          "original_id": 331539,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Controlling program flow",
          "index": 91,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>In a simple program, Python executes the statements of the program one-by-one in <bold>sequence</bold>, from start to finish. However, you will often want your program to deviate from this:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Conditional execution</bold>. You might want to execute a certain statement only if a certain condition is true.</paragraph></list-item><list-item><paragraph><bold>Loops</bold>. You might want to loop through a block of code multiple times.</paragraph></list-item><list-item><paragraph><bold>Handling exceptions</bold>. You might want to run a block of code in a \"cautious\" way, so that if an error arises you can deal with it without your whole program stopping. </paragraph></list-item></list><paragraph>We will look at these one-by-one in the next few slides.</paragraph></document>"
        },
        {
          "id": 361924,
          "original_id": 331540,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "If statements",
          "index": 92,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You will often want Python to execute a certain statement only if a certain condition is true. For this you can use an <code>if</code> statement.</paragraph><paragraph>The following program uses an <code>if</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42:\n    print('That is my favourite number too!')\nprint('Good bye')</snippet-file></snippet><paragraph>If the user enters the number 42 then Python executes line 3, otherwise it skips line 3 and goes straight to line 4.</paragraph><heading level=\"2\">Syntax</heading><paragraph>The syntax for an if statement is:</paragraph><pre>if &lt;expression&gt;:\n    &lt;statement(s)&gt;\n</pre><paragraph>There are two parts to this statement - the part between <code>if</code> and <code>:</code> is called the <bold>header</bold> of the statement; the rest is called the <bold>body</bold> of the statement. The body of the statement is a <bold>block</bold> of statements.</paragraph><paragraph>Notice that the body contains one or more statements (as many as you like), so an <code>if</code> statement contains other statements as part of it. Because of this we call it a <bold>compound statement</bold>. </paragraph><paragraph>Also notice that the body is <bold>indented</bold>. This is required - if you don't use indentation then Python will issue an error: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\nprint('Hello')</snippet-file></snippet><paragraph>You can use either the tab character or the space character to create the indentation, but you must use the same character for each line, and the same number of those characters, otherwise Python will issue an error. Each of the following will cause an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n\tprint('Hello') # Indentation using a tab\n    print('Hello') # Indentation using 4 spaces - Error</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n    print('Hello') # Indentation using 4 spaces\n     print('Hello') # Indentation using 5 spaces - Error</snippet-file></snippet><callout type=\"info\">It is standard to use 4 spaces for indentation.  You can set this to be the default behaviour in the code editor for ed by selecting \"Soft tabs\" under the settings menu (icon: ⚙) in the top right of an editor window.</callout><paragraph>The statement block after <code>if</code> must contain at least one statement. It is common use the <code>pass</code> statement as a placeholder for unfinished code - it is a statement that does nothing:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n\tpass # There must be at least one statement in the body</snippet-file></snippet><heading level=\"2\">Conditions</heading><paragraph>Any boolean expression can be used between the <code>if</code> and the <code>:</code> :</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n    print('The condition is true')\nif 2 &gt; 1:\n    print('The condition is true')\nif 2 &gt; 1 and 2 &lt; 3:\n    print('The condition is true')\nif 1 &gt; 2 or 2 &gt; 1:\n    print('The condition is true')\nif 'cat' == 'cat':\n    print('The condition is true')</snippet-file></snippet><heading level=\"2\">Be careful with variables</heading><paragraph>If you introduce a variable inside the block of an if statement then that variable will only be defined if the block is executed. This might cause you some unexpected errors. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if False:\n    x = 1\nprint(x) # Error - x does not have a value</snippet-file></snippet><paragraph>Since line 2 is not executed the variable <code>x</code> does not get assigned a value, so when it is used in line 3 Python issues an error.</paragraph><heading level=\"2\">Else clauses</heading><paragraph>You can add an <code>else</code> <bold>clause</bold> to an <code>if</code> statement, to tell Python what to do if the condition of the <code>if</code> statement is false:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42:\n    print('That is my favourite number too!')\nelse:\n\tprint('That is not my favourite number.')</snippet-file></snippet><heading level=\"2\">Grade example with multiple conditions</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># we assume the user gives a valid mark between 0 and 100 inclusive\nmark = float(input(\"Please give your mark: \"))\nif mark &lt; 50:\n    print(\"FL\")\nelse: # we know that mark is &gt;= 50\n    if mark &lt; 65:\n        print(\"PS\")\n    else: # we know that mark &gt;= 65\n        if mark &lt; 75:\n            print(\"CR\")\n        else: # we know that mark is &gt;=75\n            if mark &lt; 85:\n                print(\"DN\")\n            else: # mark is &gt;=85\n                print('HD')</snippet-file></snippet><heading level=\"2\">Elif clauses</heading><paragraph>You can add <code>elif</code> clauses (short for 'else if') to chain together multiple conditions:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42:\n    print('That is my favourite number too!')\nelif number == 21:\n    print('That is my second favourite number')\nelse:\n    print('That is neither of my favourite numbers.')</snippet-file></snippet><heading level=\"2\">Grade example with elif</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># we assume the user gives a valid mark between 0 and 100 inclusive\nmark = float(input(\"Please give your mark: \"))\nif mark &lt; 50:\n    print(\"FL\")\nelif mark &lt; 65: # we know that mark is &gt;= 50\n    print(\"PS\")\nelif mark &lt; 75: # we know that mark &gt;= 65\n    print(\"CR\")\nelif mark &lt; 85: # we know that mark is &gt;=75\n    print(\"DN\")\nelse: # mark is &gt;=85\n    print('HD')</snippet-file></snippet><heading level=\"2\">Abbreviations</heading><paragraph>If you only have one statement in an <code>if</code> body then you can put it on the same line as the header. The same applies to <code>elif</code> and <code>else</code>. Note that you still need the colon:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42: print('That is my favourite number too!')\nelif number == 21: print('That is my second favourite number')\nelse: print('That is neither of my favourite numbers.')</snippet-file></snippet><heading level=\"2\">Nesting</heading><paragraph>Inside the block of an <code>if</code> statement you can have other <code>if</code> statements. These other <code>if</code> statements are said to be <bold>nested</bold>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number &gt; 10:\n    print('That is a big number')\n    if number &gt; 100: # This if statement is nested\n        print('It is bigger than 100')\nprint('Good bye')</snippet-file></snippet><heading level=\"2\">Breaking up complex expressions</heading><paragraph>Do not try to do too much in one go by building overly complex expressions; code should not be concise at the expense of readability.  Consider the following two pieces of code:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">if (is_admin and not admin_expired) or (is_person and (has_override or special_override)):\n    call_security()\nelse:\n    activate_launch()</snippet-file></snippet><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">if is_admin and not admin_expired:\n    call_security()\nelif is_person and has_override:\n    call_security()\nelif is_person and special_override:\n    call_security()\nelse:\n    activate_launch()</snippet-file></snippet><paragraph>The second piece of code is vastly more clear on the conditions required for a launch.</paragraph><heading level=\"2\">Ternary expression</heading><paragraph>Python has an expression whose value depends upon a condition.</paragraph><pre>&lt;expression&gt; if &lt;expression&gt; else &lt;expression&gt;\n</pre><paragraph>It is called a <bold>ternary</bold> expression, because it combines three expressions into one.</paragraph><paragraph>Here is an example of it being used to assign a value to a variable:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nparity = \"even\" if x % 2 == 0 else \"odd\"\nprint(parity)</snippet-file></snippet><paragraph>This is equivalent to using the following if statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nif x % 2 == 0:\n    parity = \"even\"\nelse:\n    parity = \"odd\"\nprint(parity)</snippet-file></snippet><paragraph>Notice that the ternary expression is an <italic>expression</italic>, not a statement. This means that it returns a value, which you can assign to variables or print:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nprint(\"even\" if x % 2 == 0 else \"odd\")</snippet-file></snippet><paragraph>An if statement is not an expression, so it doesn't return a value that you can assign to variables or print.:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nprint(if x % 2 == 0: \"even\") # Error</snippet-file></snippet><paragraph>Be careful when using this ternary operator that your code does not become difficult to read. It is usually best to put parentheses around it.</paragraph><heading level=\"2\">Match Case statement</heading><paragraph>The Match Case is the Switch Case (from languages such as Java and C/C++) of Python which was introduced in Python <bold>3.10</bold>.</paragraph><paragraph>We have to first pass a parameter and then try to check with which case the parameter is getting satisfied. If we find a <bold>match</bold> we will execute some code and if there is no match, a <bold>default</bold> action will take place.</paragraph><paragraph>The Match Case statement is initialized with the <bold>match</bold> keyword followed by the parameter to be matched. Then various cases are defined using the <bold>case</bold> keyword and the value to match the parameter. The \"<bold>_</bold>\" is the <bold>wildcard</bold> character that runs when all the cases fail to match the parameter value.</paragraph><heading level=\"2\">Syntax</heading><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">match parameter:\n    case value1:\n        # code for value 1\n    case value2:\n        # code for value 2\n    .\n    .\n    .\n    case valueN:\n        # code for value N\n    case _:\n        # default code block</snippet-file></snippet><heading level=\"2\">Example</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># new from Python 3.10\n# The program asks for the day number and displays the corresponding day name\ndayNumber = int(input(\"Give a day number: \")) \nmatch dayNumber:\n    case 1:\n        print(\"Sunday\")\n    case 2:\n        print(\"Monday\")\n    case 3:\n        print(\"Tuesday\")\n    case 4:\n        print(\"Wednesday\")\n    case 5:\n        print(\"Thursday\")\n    case 6:\n        print(\"Friday\")\n    case 7:\n        print(\"Saturday\")\n    case _:\n        print(\"Error. You provided an incorrect day number\")</snippet-file></snippet></document>"
        },
        {
          "id": 361925,
          "original_id": 331541,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "While statements",
          "index": 93,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Sometimes you might want to repeat a set of statements for as long as a certain condition is true. For this you can use a <code>while</code> statement.</paragraph><paragraph>Here's a program that uses a <code>while</code> statement to print the first 10 positive integers:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">n = 1\nwhile n &lt;= 10:\n    print(n)\n    n = n + 1\nprint('Finished')</snippet-file></snippet><paragraph>When Python gets to line 2 it evaluates the condition after <code>while</code>. If the condition is true then it executes the statement block below, in lines 3-4, and then returns to line 2 again. If the condition is false then it skips the block and goes straight to line 5.</paragraph><paragraph>You could achieve the same effect by using 10 different <code>print</code> statements, but using a <code>while</code> statement is more elegant and less repetitive. And if you don't know in advance how many integers to print, for example if you want to ask the user, then it might be impossible to use just <code>print</code> statements.</paragraph><heading level=\"2\">The while block</heading><paragraph>The <code>while</code> block can contain any statement(s) you like, including <code>if</code> statements and other <code>while</code> statements. For example, here's a program that prints the even numbers between 1 and 10. It uses an <code>if</code> statement inside the <code>while</code> loop:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">n = 1\nwhile n &lt;= 10:\n    if n % 2 == 0:\n        print(n)\n    n = n + 1\nprint('Finished')</snippet-file></snippet><paragraph>Here is an example of a <code>while</code> loop used to iterate through a string, counting the number of times <code>'e'</code> occurs in it.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">string = 'The quick brown fox jumped over the lazy dog'\noccurrences = 0\ni = 0\nwhile i &lt; len(string):\n    if string[i] == 'e':\n        occurrences += 1\n    i += 1\nprint(\"The letter 'e' occurs\", occurrences, \"times\")</snippet-file></snippet><heading level=\"2\">Continuing</heading><paragraph>You can use a <code>continue</code> statement to skip to the next iteration of a loop:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">i = 0\nwhile i &lt; 10:\n    i += 1\n    if i == 5:\n\t    continue\n    print(i)\nprint('Finished')</snippet-file></snippet><paragraph>When the value of <code>i</code> gets to 5 the <code>continue</code> statement is executed, and Python jumps directly back to line 2 and continues. The number 5 does not get printed, but 6 - 10 do.</paragraph><paragraph>Why might you use <code>continue</code>? It can help to keep your code from getting to many levels of indentation. We will see examples of this.</paragraph><heading level=\"2\">Breaking</heading><paragraph>You can use a <code>break</code> statement to break out of a loop entirely:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">i = 0\nwhile i &lt; 10:\n    i += 1\n    if i == 5:\n\t    break\n    print(i)\nprint('Finished')</snippet-file></snippet><paragraph>When the value of <code>i</code> gets to 5 the <code>break</code> statement is executed, and Python jumps directly to line 7. The number 5 does not get printed, and nor do 6 - 10.</paragraph><paragraph>Note that if the loop is nested inside another loop, the <code>break</code> statement terminates only the inner loop.</paragraph><heading level=\"2\">Keeping a program running</heading><paragraph>When you run the program below is stops after it gets and prints a name. To run it again you have to click 'Run' again:  </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">name = input('What is your name? ')\nprint('Hello', name)</snippet-file></snippet><paragraph>It can be convenient to have the program keep running - getting it to start again automatically after it does its thing. You can get it to do this by adding a <code>while</code> loop, with a condition that always evaluates to true:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">while True:\n    name = input('What is your name? ')\n    print('Hello', name)</snippet-file></snippet><paragraph>Now the program will keep running, until you click 'Stop'.</paragraph><paragraph>If you want to get a bit fancier, you could get your program to stop when the user enters a certain value, such as 'q'. Remember to let the user know that they can do this:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">while True:\n    name = input('What is your name? (Enter q to quit) ')\n    if name == 'q':\n        break\n    print('Hello', name)</snippet-file></snippet><heading level=\"2\">Nested while loops example</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Write a program to display the following:\r\n# * * * * * \r\n# * * * * *\r\n# * * * * *\r\n\r\ni = 1\r\nwhile i &lt;= 3:\r\n    j = 1\r\n    while j &lt;= 5:\r\n        print('*',end=' ')\r\n        j = j + 1\r\n    print()\r\n    i = i + 1</snippet-file></snippet></document>"
        },
        {
          "id": 361926,
          "original_id": 331542,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Handling exceptions",
          "index": 94,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>If your code interacts with the outside world, you may encounter unexpected circumstances. Perhaps a file that you are trying to open doesn't exist, or when you try to save the user's data you find that the disk is full, or perhaps the user enters a non integer value when you are expecting an integer, or maybe you divided by zero.</paragraph><paragraph><bold>Exceptions</bold> are a mechanism for dealing with the unwanted or unexpected situations.</paragraph><paragraph>The approach in Python is known as <bold>structured exception handling</bold>. This means that if Python encounters an exception in a block of code, it will search for an exception handler enclosing that block. If none exists, it will look for an exception handler enclosing that outer block, and so on.</paragraph><paragraph>It is important to understand that exception handling should be used to handle exceptions that are recoverable. If your program cannot handle the exception or recover from it, it should not even try. Instead it should let the exception terminate your program so the user can deal with it instead. For many cases of exceptions, there is no remedy.</paragraph><heading level=\"2\">Try and except</heading><paragraph>You can handle exceptions by using a <code>try</code> statement.</paragraph><paragraph>Consider the following program, which asks the user to enter a number and then returns the square of that number:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">num = input(\"Please enter a number: \")\nresult = float(num) ** 2\nprint(\"The square of the number is\", result)</snippet-file></snippet><paragraph>If the user enters a string of letters instead of a number then an error occurs and the program very ungracefully ends.</paragraph><paragraph>Python complained with a <code>ValueError</code>. To handle this, we'd write a <code>try ...except ...</code> block around the code that could potentially raise an exception.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">num = input(\"Please enter a number: \")\ntry:\n    result = float(num) ** 2\n    print(\"The square of the number is\", result)\nexcept:\n    print(\"You did not enter a number.\")</snippet-file></snippet><paragraph>In the above code, when control reaches line 2, an exception is raised. Python finds the nearest exception handler and moves control to line 3, which proceeds into the block at line 4. If there was no exception on line 2, then the code in the <code>except</code> block would not be executed.</paragraph><paragraph>If you don't want to do anything with the exception then you can use the <code>pass</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">num = input(\"Please enter a number: \")\ntry:\n    result = float(num) ** 2\n    print(\"The square of the number is\", result)\nexcept:\n    pass</snippet-file></snippet><paragraph>When an exception occurs, there is information about the exception contained in a special Exception object. You can assign that object to a variable and then display that information to the user:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">try:\n\tint('string')\nexcept Exception as err:\n\tprint('Exeption:', err)</snippet-file></snippet><heading level=\"2\">Else</heading><paragraph>If you have some code that you want to execute only if the <code>try</code> block succeeds then you can add an <code>else</code> clause:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 'Hello'\ntry:\n    x = int(x)\nexcept:\n    print('The conversion was not successful.')\nelse:\n    print('The conversion was successful.')</snippet-file></snippet><paragraph/></document>"
        },
        {
          "id": 361927,
          "original_id": 331543,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Working with files",
          "index": 95,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>So far we have seen programs that interact with the external environment via the <code>input()</code> and <code>print()</code> functions. Another way they can interact is by reading from and writing to files. This is very simple in Python, which is why Python is a popular tool for working with files.</paragraph><paragraph>This is what you will typically want to do:</paragraph><list style=\"bullet\"><list-item><paragraph>Open the file</paragraph></list-item><list-item><paragraph>Read from the file, or write to the file</paragraph></list-item><list-item><paragraph>Close the file</paragraph></list-item></list><heading level=\"2\">Opening a file</heading><paragraph>To work with a file you must first open it. You do so using the <code>open()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">f = open('MyData', 'w')</snippet-file></snippet><paragraph>The function expects a <bold>file</bold> as the first argument. This can be given as an absolute or relative filename. If given as a relative filename, it is relative to the directory that Python was executed from - in Ed this is always the same directory as the program.</paragraph><paragraph>You can also supply a <bold>mode</bold> as the second argument. This indicates whether the file is to be opened for reading (i.e. input) or writing (i.e. output). If you don't specify the mode, Python assumes that you want to open the file for reading. </paragraph><paragraph>The available options for the mode are:</paragraph><list style=\"bullet\"><list-item><paragraph><code>'r'</code> -  Open the file for <bold>reading</bold>. <code>open</code> will throw an exception if the file does not exist.</paragraph></list-item><list-item><paragraph><code>'w'</code> - Open the file for <bold>writing</bold>. If the file <bold>exists</bold>, the contents are completely <bold>overwritten</bold>. If the file does not exist, it will be created.</paragraph></list-item><list-item><paragraph><code>'x'</code> - Open the file for <bold>writing</bold>. If the file already <bold>exists</bold> this will <bold>throw an exception</bold>. If the file does not exist, it will be created.</paragraph></list-item><list-item><paragraph><code>'a'</code> - Open the file for <bold>appending</bold>. The file is opened at the end and any writes to the file will append to the end. If the file does not exist it is created.  This option is  useful for adding information to a file - for example a log file.</paragraph></list-item></list><paragraph>The <code>open()</code> function returns a file object (also called a <bold>file handle</bold>) that represents the file that you have opened. It is this object that allows you to perform operations on the underlying file itself.</paragraph><heading level=\"2\">Reading from and writing to a file</heading><paragraph>The <code>read()</code> method of a file object returns a string that contains the entire contents of the file. The <code>write()</code> method takes a string and adds it to the file.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Open a file for writing\nfile = open('myfile', 'w')\n\n# Write to the file\n# If you want a newline anywhere you have to add it, using \\n\nfile.write('Line 1: Some text.\\n')\n\n# Write some more to the file\nfile.write('Line 2: Some more text.')\n\n# Now open the file for reading\nfile = open('myfile', 'r')\n\n# Print the contents\nprint(file.read())</snippet-file></snippet><heading level=\"2\">Closing a file</heading><paragraph>You can close a file by using its <code>close()</code> method. It is important to close a file after you are done working with it, to free up resources back to the system. A program can only have a limited number of files open while it is running. If a running program reaches this limit, it will receive a \"Too many open files\" error when it attempts to open more files. </paragraph><paragraph>So the program above should look like this instead:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">file = open('myfile', 'w')\nfile.write('Line 1: Some text.\\n')\nfile.write('Line 2: Some more text.')\nfile.close()\n\nfile = open('myfile', 'r')\nprint(file.read())\nfile.close()</snippet-file></snippet><heading level=\"2\">Using a <code>with</code> block</heading><paragraph>It's a good idea to work with a file inside a <code>with</code> statement. This ensures that the file is always closed after use, even if an error occurs inside your program. As soon as control exits the <code>with</code> statement the file will be automatically closed.</paragraph><paragraph>Here is the previous example written with <code>with</code> statements:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Open a file for writing\n# The file is automatically closed after the with statement\nwith open('myfile', 'w') as file:\n    file.write('Line 1: Some text.\\n')\n    file.write('Line 2: Some more text.')\n\n# Open the file again for reading\n# The file is automatically closed after the with statement\nwith open('myfile', 'r') as file:\n    print(file.read())</snippet-file></snippet><heading level=\"2\">See <link href=\"https://edstem.org/au/courses/16645/workspaces/psHaYvoThIO0nXiOK4VZEqEtMqpCcqvP\">Files Example</link> in Ed Workspaces</heading></document>"
        },
        {
          "id": 361928,
          "original_id": 326083,
          "lesson_id": 53299,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Further reading",
          "index": 97,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.564438+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com<break/></paragraph></list-item><list-item><paragraph>Numbers in Python<break/><link href=\"https://realpython.com/python-numbers/\">https://realpython.com/python-numbers/</link></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 1 - Python Programming Fundamentals",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.720507+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53301,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47891,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 361930,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361931,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361930,
          "original_id": 326087,
          "lesson_id": 53301,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "From Problem Description to Python Program Example",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.720507+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/LX0uVWVxYjewyC4GQDYWfPVr"
        },
        {
          "id": 361931,
          "original_id": 326088,
          "lesson_id": 53301,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Python Program Example",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.720507+10:00",
          "updated_at": null,
          "challenge_id": 119323,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 1 - From Problem Description to Python Program Example",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:38.498815+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53313,
      "index": 8,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47906,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 361987,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361988,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361989,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361990,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361991,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361992,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361993,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361994,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361987,
          "original_id": 326190,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The towers of Hanoi",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/mEiJHZW5iWxXtejbLUVaR8Aa"
        },
        {
          "id": 361988,
          "original_id": 326191,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful links about the towers of Hanoi",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Tower of Hanoi - Wikipedia<break></break><link href=\"https://en.wikipedia.org/wiki/Tower_of_Hanoi\">https://en.wikipedia.org/wiki/Tower_of_Hanoi</link><break></break></paragraph></list-item><list-item><paragraph>Tower of Hanoi - Game<break></break><link href=\"https://www.mathsisfun.com/games/towerofhanoi.html\">https://www.mathsisfun.com/games/towerofhanoi.html</link></paragraph></list-item></list></document>"
        },
        {
          "id": 361989,
          "original_id": 326192,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "The towers of Hanoi",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "challenge_id": 119332,
          "content": ""
        },
        {
          "id": 361990,
          "original_id": 326193,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "recursive_hanoi.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "challenge_id": 119333,
          "content": ""
        },
        {
          "id": 361991,
          "original_id": 326194,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "iterative_hanoi.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "challenge_id": 119334,
          "content": ""
        },
        {
          "id": 361992,
          "original_id": 326195,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The towers of Hanoi I",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/_kp8HxpaNto"
        },
        {
          "id": 361993,
          "original_id": 326196,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The towers of Hanoi II",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/Ad7K-9CH0dg"
        },
        {
          "id": 361994,
          "original_id": 326197,
          "lesson_id": 53313,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The towers of Hanoi III",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.498815+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/Un8gCbN7Lig"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 4 - Notes 3 The Towers of Hanoi",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:39.145437+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53315,
      "index": 10,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 50767,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 361999,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362000,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361999,
          "original_id": 343295,
          "lesson_id": 53315,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 5 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.145437+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 5 Tuesday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 2</bold> marks and sample solution released</paragraph></list-item><list-item><paragraph><bold>Quiz 3</bold> worth <bold>4 marks</bold> is due <bold>Week 5 Thursday 27/6 @ 9pm</bold></paragraph></list-item><list-item><paragraph><bold>Assignment 1</bold> worth <bold>13 marks</bold> is due <bold>Week 7 Monday 8/7 @ 10am</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Classes</paragraph></list-item></list><paragraph/><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>Python <code>help()</code> function in Python:<break/><link href=\"https://www.geeksforgeeks.org/help-function-in-python/\">https://www.geeksforgeeks.org/help-function-in-python/</link><break/><link href=\"https://www.tutorialsteacher.com/python/help-method\">https://www.tutorialsteacher.com/python/help-method</link><break/></paragraph></list-item><list-item><paragraph>Difference between <bold>Method</bold> and <bold>Function</bold> in Python<break/><link href=\"https://www.geeksforgeeks.org/difference-method-function-python/\">https://www.geeksforgeeks.org/difference-method-function-python/</link></paragraph></list-item></list></document>"
        },
        {
          "id": 362000,
          "original_id": 343296,
          "lesson_id": 53315,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 5 Thursday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.145437+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 5 Thursday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 4</bold> worth <bold>4 marks</bold> will be released <bold>today @ 7.15pm</bold></paragraph></list-item><list-item><paragraph><bold>Quiz 3</bold> worth <bold>4 marks</bold> is due <bold>today @ 9pm</bold></paragraph></list-item><list-item><paragraph><bold>Assignment 1</bold> worth <bold>13 marks</bold> is due <bold>Week 7 Monday 8/7 @ 10am</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Continue <bold>Classes</bold> lesson from <bold>Class attributes</bold> slide<break/><break/></paragraph></list-item><list-item><paragraph>Week 5 Notes 6 <bold>Eratosthenes' Sieve</bold><break/></paragraph><list style=\"bullet\"><list-item><paragraph>imprecision of floating point calculation</paragraph></list-item><list-item><paragraph><code>int()</code> vs <code>round()</code>, rounding half to <bold>even</bold></paragraph></list-item><list-item><paragraph>string formatting</paragraph></list-item><list-item><paragraph><code>range([first],last,[step])</code> function</paragraph></list-item><list-item><paragraph>iterables vs iterators, <code>iter()</code></paragraph></list-item><list-item><paragraph><code>chain()</code> function from <code>itertools</code> library</paragraph></list-item><list-item><paragraph><code>timeit()</code> function returns a time the execution takes in seconds as a float<break/><break/></paragraph></list-item></list></list-item><list-item><paragraph>Week 5 Notes 7 <bold>Euler's Sieve</bold></paragraph></list-item></list><list style=\"number\"><list-item><list style=\"bullet\"><list-item><paragraph>Matplotlib library - Plotting</paragraph></list-item><list-item><paragraph>Global variable</paragraph></list-item></list></list-item></list><paragraph/><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>Sieve of Eratosthenes<break/><link href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</link><break/></paragraph></list-item><list-item><paragraph>Sieve of Euler<break/><link href=\"https://programmingpraxis.com/2011/02/25/sieve-of-euler/\">https://programmingpraxis.com/2011/02/25/sieve-of-euler/</link></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 5 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.304315+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-18T14:07:55.271355+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53295,
      "index": 8,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361909,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11527,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47888,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361909,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361909,
          "original_id": 326070,
          "lesson_id": 53295,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "PEP 8 - Style Guide for Python Code",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.304315+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>https://www.python.org/dev/peps/pep-0008/</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "completed",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "PEP 8 - Style Guide for Python Code",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.572103+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-18T14:41:43.088835+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53308,
      "index": 6,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361969,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47894,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 361969,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361970,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361971,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361972,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361973,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361969,
          "original_id": 326112,
          "lesson_id": 53308,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The Monty Hall problem",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.572103+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/N0DUFegvIjLzehsr5TfSRMar"
        },
        {
          "id": 361970,
          "original_id": 326113,
          "lesson_id": 53308,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful links about Monty Hall problem",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.572103+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Monty Hall problem<break></break><link href=\"https://en.wikipedia.org/wiki/Monty_Hall_problem\">https://en.wikipedia.org/wiki/Monty_Hall_problem</link><break></break><break></break></paragraph></list-item><list-item><paragraph>The Monty Hall Problem (from Khan Academy)<break></break><link href=\"https://www.khanacademy.org/partner-content/wi-phi/wiphi-metaphysics-epistemology/probability-philosophy/v/the-monty-hall-problem\">https://www.khanacademy.org/partner-content/wi-phi/wiphi-metaphysics-epistemology/probability-philosophy/v/the-monty-hall-problem</link><break></break><break></break></paragraph></list-item><list-item><paragraph>Monty Hall Problem Express Explanation<break></break><link href=\"https://www.youtube.com/watch?v=C4vRTzsv4os\">https://www.youtube.com/watch?v=C4vRTzsv4os</link><break></break><break></break></paragraph></list-item><list-item><paragraph>Monty Hall Problem - Numberphile<break></break><link href=\"https://www.youtube.com/watch?v=4Lb-6rxZxx0\">https://www.youtube.com/watch?v=4Lb-6rxZxx0</link><break></break></paragraph></list-item></list><paragraph></paragraph></document>"
        },
        {
          "id": 361971,
          "original_id": 326114,
          "lesson_id": 53308,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "The Monty Hall problem",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.572103+10:00",
          "updated_at": null,
          "challenge_id": 119326,
          "content": ""
        },
        {
          "id": 361972,
          "original_id": 326115,
          "lesson_id": 53308,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Monty Hall",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.572103+10:00",
          "updated_at": null,
          "challenge_id": 119327,
          "content": ""
        },
        {
          "id": 361973,
          "original_id": 326116,
          "lesson_id": 53308,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The Monty Hall problem",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.572103+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/onEVIBcG4zk"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 3 - Notes 2 The Monty Hall Problem (optional)",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:39.437716+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53318,
      "index": 12,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47898,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 6,
      "slide_marks_summary": [
        {
          "id": 362012,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362013,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362014,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362015,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362016,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362017,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362012,
          "original_id": 326142,
          "lesson_id": 53318,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Eratosthenes' sieve",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.437716+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/lrPweuRGdw3yIzBA13i0gVUQ"
        },
        {
          "id": 362013,
          "original_id": 326144,
          "lesson_id": 53318,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Eratosthenes' sieve",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.437716+10:00",
          "updated_at": null,
          "challenge_id": 119338,
          "content": ""
        },
        {
          "id": 362014,
          "original_id": 326145,
          "lesson_id": 53318,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "eratosthenes_sieve_v1.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.437716+10:00",
          "updated_at": null,
          "challenge_id": 119339,
          "content": ""
        },
        {
          "id": 362015,
          "original_id": 326146,
          "lesson_id": 53318,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "eratosthenes_sieve_v2.py",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.437716+10:00",
          "updated_at": null,
          "challenge_id": 119340,
          "content": ""
        },
        {
          "id": 362016,
          "original_id": 326147,
          "lesson_id": 53318,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Eratosthenes' sieve I",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.437716+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/3YUUwiQPLw8"
        },
        {
          "id": 362017,
          "original_id": 326148,
          "lesson_id": 53318,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Eratosthenes' sieve II",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.437716+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/Rk0tZ5IDjrg"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 5 - Notes 6 Eratosthenes' Sieve",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:40.538883+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53322,
      "index": 13,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47901,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 6,
      "slide_marks_summary": [
        {
          "id": 362031,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362032,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362033,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362034,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362035,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362036,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362031,
          "original_id": 326162,
          "lesson_id": 53322,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "US Social Security data on given names",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.538883+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/p0ylfpGVXVa7sGWgU03of8Uu"
        },
        {
          "id": 362032,
          "original_id": 326163,
          "lesson_id": 53322,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "US Social Security data on given names",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.538883+10:00",
          "updated_at": null,
          "challenge_id": 119346,
          "content": ""
        },
        {
          "id": 362033,
          "original_id": 326164,
          "lesson_id": 53322,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "names_per_gender.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.538883+10:00",
          "updated_at": null,
          "challenge_id": 119347,
          "content": ""
        },
        {
          "id": 362034,
          "original_id": 326165,
          "lesson_id": 53322,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "names_revivals.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.538883+10:00",
          "updated_at": null,
          "challenge_id": 119348,
          "content": ""
        },
        {
          "id": 362035,
          "original_id": 326166,
          "lesson_id": 53322,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "US Social Security data on given names I",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.538883+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/gtOIiOtpb3Y"
        },
        {
          "id": 362036,
          "original_id": 326167,
          "lesson_id": 53322,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "US Social Security data on given names II",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.538883+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/65F3tbY2UF8"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 7 - Notes 9 US Social Security Data on Given Names",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:41.980321+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53323,
      "index": 14,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47903,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 4,
      "slide_marks_summary": [
        {
          "id": 362037,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362038,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362039,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362040,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362037,
          "original_id": 326173,
          "lesson_id": 53323,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "K-means clustering",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:41.980321+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/9AfdIxMPWVY9guSSpIfE0rk1"
        },
        {
          "id": 362038,
          "original_id": 326174,
          "lesson_id": 53323,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "K-means clustering",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:41.980321+10:00",
          "updated_at": null,
          "challenge_id": 119349,
          "content": ""
        },
        {
          "id": 362039,
          "original_id": 326175,
          "lesson_id": 53323,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "k_means_clustering.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:41.980321+10:00",
          "updated_at": null,
          "challenge_id": 119350,
          "content": ""
        },
        {
          "id": 362040,
          "original_id": 326176,
          "lesson_id": 53323,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "K-means clustering",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:41.980321+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/Z5yRNKhrgEw"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 8 - Notes 10 K-means Clustering",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:42.658018+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53326,
      "index": 14,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47904,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 362047,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362048,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362049,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362050,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362051,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362052,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362053,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362054,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362047,
          "original_id": 326177,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The game of life",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/ZWP458yx6s3uiQcd2dWff8ny"
        },
        {
          "id": 362048,
          "original_id": 326178,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful links about game of life",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Conway&#39;s Game of Life<break></break><link href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</link><break></break></paragraph></list-item><list-item><paragraph>Gun (cellular automaton)<break></break><link href=\"https://en.wikipedia.org/wiki/Gun_(cellular_automaton)\">https://en.wikipedia.org/wiki/Gun_(cellular_automaton)</link></paragraph></list-item></list><paragraph></paragraph></document>"
        },
        {
          "id": 362049,
          "original_id": 326179,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "The game of life",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "challenge_id": 119354,
          "content": ""
        },
        {
          "id": 362050,
          "original_id": 326180,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "game_of_life.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "challenge_id": 119355,
          "content": ""
        },
        {
          "id": 362051,
          "original_id": 326181,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The game of life I",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/-Xn6VCJELnc"
        },
        {
          "id": 362052,
          "original_id": 326182,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The game of life II",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/QcPLk4pSZsE"
        },
        {
          "id": 362053,
          "original_id": 326183,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The game of life III",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/jGXTHTtvUi4"
        },
        {
          "id": 362054,
          "original_id": 326184,
          "lesson_id": 53326,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The game of live IV",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.658018+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/7K4Kf1VSeIc"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 8 - Notes 12 The Game of Life",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.374378+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-25T11:16:16.736448+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53297,
      "index": 0,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361911,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 49116,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 3,
      "slide_marks_summary": [
        {
          "id": 361911,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 364311,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361912,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361913,
          "is_hidden": true,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361911,
          "original_id": 332895,
          "lesson_id": 53297,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Week 1 - Introduction",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.374378+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/BVaxKoPzvTD4nErxvfDMJhhW"
        },
        {
          "id": 364311,
          "original_id": null,
          "lesson_id": 53297,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 1 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-28T16:39:46.910326+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Week 1 Tuesday To Do List</paragraph><paragraph>Admin/Tips</paragraph><list style=\"number\"><list-item><paragraph>Check Lectures and Tutorials Timetable since some locations have changed</paragraph></list-item><list-item><paragraph>Python 3 Cheat Sheet - allowed in final exam (as a soft copy)</paragraph></list-item><list-item><paragraph>You can generate a PDF version of \"Week 1 - Python Programming Fundamentals\" by clicking on \"<bold>...</bold>\" on the top right corner then \"<bold>Preview Lesson</bold>\" then \"<bold>Download PDF</bold>\"</paragraph></list-item></list><paragraph>Content</paragraph><list style=\"number\"><list-item><paragraph>Go through <bold>Week 1 - Introduction</bold> PPT slides</paragraph></list-item><list-item><paragraph>Start \"<bold>Week 1 - Python Programming Fundamentals</bold>\"</paragraph></list-item></list><paragraph/></document>"
        },
        {
          "id": 361912,
          "original_id": 334690,
          "lesson_id": 53297,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 1 Thursday To Do List",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.374378+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 1 Thursday To Do List</heading><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph>Ed Python Editor</paragraph><paragraph><bold>CTRL + /</bold> to <bold>comment/uncomment</bold> a <bold>selected</bold> code<break/><bold>CTRL + ]</bold> to <bold>add</bold> one <bold>indentation</bold> for a <bold>selected</bold> code<break/><bold>CTRL + [</bold> to <bold>remove</bold> one <bold>indentation</bold> for a <bold>selected</bold> code</paragraph></list-item><list-item><paragraph><bold>Reset to Scaffold</bold> if accidently deleting lesson/practice/quiz/assignment files. However, save your work first (if any).</paragraph></list-item></list><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Continue \"<bold>Week 1 - Python Programming Fundamentals</bold>\" with \"<bold>Importing modules</bold>\" slide</paragraph></list-item><list-item><paragraph><bold>If</bold> statements including <bold>match</bold> new Python statement</paragraph></list-item><list-item><paragraph><bold>While</bold> statements</paragraph></list-item><list-item><paragraph>Show the <bold>flowchart</bold> - problem solving from <bold>requirements</bold> to Python <bold>program</bold></paragraph></list-item><list-item><paragraph>Show how to run <bold>Turing machine simulator</bold></paragraph></list-item><list-item><paragraph>Handling exceptions (if time permits)</paragraph></list-item><list-item><paragraph>Working with files (if time permits)</paragraph></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph><bold>WinSCP</bold> is an open source free <bold>SFTP</bold> client, <bold>FTP</bold> client, <bold>WebDAV</bold> client, <bold>S3</bold> client and <bold>SCP</bold> client and <bold>file manager</bold> for Windows. Its main function is <bold>file transfer between a local and a remote computer</bold>. Download it using the link below:<break/><link href=\"https://winscp.net/eng/download.php\">https://winscp.net/eng/download.php</link></paragraph></list-item><list-item><paragraph>Numbers in Python<break/><link href=\"https://realpython.com/python-numbers/\">https://realpython.com/python-numbers/</link></paragraph></list-item></list><paragraph/></document>"
        },
        {
          "id": 361913,
          "original_id": 334608,
          "lesson_id": 53297,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "More Examples",
          "index": 11,
          "is_hidden": true,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.374378+10:00",
          "updated_at": null,
          "challenge_id": 119322,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 1 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.526112+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53298,
      "index": null,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": true,
      "original_id": 51860,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361914,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361914,
          "original_id": 353034,
          "lesson_id": 53298,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Week 10 - Review",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.526112+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/K664Ub8Nv2yrOphMNs89LCIN"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 10 - Review",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53316,
      "index": 11,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 50768,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 15,
      "slide_marks_summary": [
        {
          "id": 362001,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 374419,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 374426,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362002,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362003,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362004,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362006,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362005,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 374763,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362007,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 374437,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 374438,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362008,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362009,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362010,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362001,
          "original_id": 343297,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Classes",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>There is an important and powerful technique, and another cornerstone of good programming - defining and using <bold>classes</bold>.</paragraph><paragraph>You have learned about Python objects and their attributes, and you have been working with them a lot. You have also learned that objects are of different types, and that the type of an object determines what attributes it has, and thus what you can do with it.</paragraph><paragraph>You might already have found yourself wishing there were other types. Wouldn&#39;t it be nice, for example, to have a &#34;<bold>passage</bold>&#34; type, for large slabs of text, with <bold>methods</bold> such as <code>num_paragraphs()</code>, <code>num_sentences()</code>, <code>num_words()</code>, <code>average_word_length()</code>, and so on?</paragraph><paragraph>Well, you can actually define your <bold>own</bold> types of objects, and give them whatever methods you like. Brilliant!</paragraph><paragraph>You will learn how to do this this week.</paragraph></document>"
        },
        {
          "id": 374419,
          "original_id": null,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "What is OOP?",
          "index": 69,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-25T14:10:32.199272+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>OOP stands for <bold>O</bold>bject-<bold>O</bold>riented <bold>P</bold>rogramming.</paragraph><paragraph><bold>Procedural</bold> programming is about writing <bold>functions</bold> that perform operations on the data, while <bold>object-oriented programming</bold> is about creating <bold>objects</bold> that contain both <bold>data</bold> and <bold>methods</bold>.</paragraph><paragraph>Object-oriented programming (OOP) has several advantages over procedural programming:</paragraph><list style=\"unordered\"><list-item><paragraph>OOP provides a clear structure of the programs</paragraph></list-item><list-item><paragraph>OOP makes the code easier to maintain and modify</paragraph></list-item><list-item><paragraph>OOP makes it possible to create full reusable applications with less code and shorter development time</paragraph></list-item></list><paragraph>Python is an object oriented programming language.</paragraph></document>"
        },
        {
          "id": 374426,
          "original_id": null,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "What are Classes and Objects?",
          "index": 70,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-25T16:00:12.484269+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Classes and objects are the two main aspects of object-oriented programming.</paragraph><paragraph>Look at the following two examples to see the difference between <bold>class</bold> and <bold>objects</bold>:</paragraph><figure><image src=\"https://static.au.edusercontent.com/files/MXjl0SlnYymRM9QGoWwsUnLL\" width=\"332\" height=\"158\"/></figure><figure><image src=\"https://static.au.edusercontent.com/files/tR5095chz053o4szFHwIhcs3\" width=\"334\" height=\"160\"/></figure><paragraph>Therefore, a <bold>class</bold> is a <bold>template</bold> for objects, and an <bold>object</bold> is an <bold>instance</bold> of a class.</paragraph><paragraph>When the individual objects are created, they <bold>inherit</bold> all the <bold>data variables</bold> and <bold>methods</bold> from the class.</paragraph></document>"
        },
        {
          "id": 362002,
          "original_id": 343305,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Defining classes and objects",
          "index": 71,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You have been working extensively with objects of various types: integers, strings, lists, functions, and so on. Here are some examples:</paragraph><list style=\"bullet\"><list-item><paragraph>The integer <code>10</code> is an object of type <code>int</code></paragraph></list-item><list-item><paragraph>The string <code>'Hello'</code> is an object of type <code>str</code></paragraph></list-item><list-item><paragraph>The list <code>[1, 2, 3]</code> is an object of type <code>list</code></paragraph></list-item><list-item><paragraph>The function <code>lambda x: x + 10</code> is an object of type <code>function</code></paragraph></list-item></list><paragraph>You can confirm these for yourself using the <code>type()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(type(10))\nprint(type('Hello'))\nprint(type([1, 2, 3]))\nprint(type(lambda x: x + 10))</snippet-file></snippet><paragraph><bold>Types</bold> are also called <bold>classes</bold>. That is why you see the word \"<bold>class</bold>\" in the results when you run the code above. And <bold>objects</bold> are also called <bold>instances</bold> - they are instances of the class that is their type. So we have two equivalent ways of saying the same thing:</paragraph><list style=\"bullet\"><list-item><paragraph>The integer <code>10</code> is an <bold>object of type</bold> <code>int</code></paragraph></list-item><list-item><paragraph>The integer <code>10</code> is an <bold>instance of the class</bold> <code>int</code></paragraph></list-item></list><paragraph>You can actually define your <bold>own classes</bold>, and create instances of those classes, and this is a very useful thing to do. You specify the <bold>attributes</bold> (that is, <bold>data</bold> and <bold>methods</bold>) that each object of that class should have.</paragraph><paragraph>A <bold>class</bold> is a \"<bold>blueprint</bold>\" for creating <bold>objects</bold>.</paragraph><heading level=\"2\">Defining a class</heading><paragraph>You can define a class using a <code>class</code> statement, which has the following form:</paragraph><pre>class &lt;name&gt;:\n    &lt;statements&gt;</pre><paragraph>For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass</snippet-file></snippet><paragraph>It is conventional to use CapitalCase when naming classes (sometimes called PascalCase). You need to have at least one statement in the body of the class definition - we have just used <code>pass</code> above.</paragraph><paragraph/><heading level=\"2\">Creating instances</heading><paragraph>Once you have defined a class you can create instances of it. You do so by calling the class as if it were a function. In the following code we create two instances of the class Person and assign them to variables <code>p1</code> and <code>p2</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass\n\np1 = Person()\np2 = Person()</snippet-file></snippet><paragraph>You can confirm that p1 and p2 are instances of this class by using <code>type()</code> or <code>isinstance()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass\n\np1 = Person()\np2 = Person()\nprint(type(p1), type(p2))\nprint(isinstance(p1, Person), isinstance(p2, Person))</snippet-file></snippet><paragraph/><heading level=\"2\">Setting and getting attributes</heading><paragraph>Having created these instances you can give them attributes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass\n\np1 = Person()\np2 = Person()\n\np1.first_name = 'Brad'\np1.last_name = 'Pitt'\np1.full_name = 'Brad Pitt'\np2.first_name = 'Angelina'\np2.last_name = 'Jolie'\np2.full_name = 'Angelina Jolie'\n\nprint(p1.first_name, p1.last_name, p1.full_name)\nprint(p2.first_name, p2.last_name, p2.full_name)</snippet-file></snippet><paragraph>The examples above are classes and objects in their simplest form, and are not really useful in real life applications.</paragraph><paragraph>You will typically want to set attributes of an object as soon as you create it, so there is a special way to do this, using an <code>__init__()</code> method (called <bold>constructor</bold>).</paragraph><paragraph/><heading level=\"2\">Defining an <code>__init__()</code> method</heading><paragraph>You can specify what happens when an instance is created by defining a special method <code>__init__()</code> in the class definition. The first parameter must always be named <code>self</code> and represents the <bold>newly created object</bold>. Any other parameters to the method can be added in the usual way.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.full_name = first_name + ' ' + last_name\n\np1 = Person('Brad', 'Pitt')\np2 = Person('Angelina', 'Jolie')\nprint(p1.first_name, p1.last_name, p1.full_name)\nprint(p2.first_name, p2.last_name, p2.full_name)</snippet-file></snippet><paragraph>In the code above, arguments are passed to the class's <code>__init__()</code> method. The <code>self</code> argument is automatically provided by Python. The code in the method adds attributes (<code>first_name</code>, <code>last_name</code>, and <code>full_name</code>) to the newly created object.</paragraph><paragraph/><heading level=\"2\">Defining other methods</heading><paragraph>You can also define methods in the class block, which can then be called on an object created from the class, as methods of the object. The functions you define must have <code>self</code> as the first parameter and Python will automatically set it to the object on which the method is called.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n    \n    def full_name(self): # Define a method called \"full_name\"\n        return self.first_name + ' ' + self.last_name\n    \n    def reverse_name(self): # Define a method called \"reverse_name\"\n        return self.last_name + ', ' + self.first_name\n\nperson = Person('Brad', 'Pitt')\nprint(person.full_name())\nprint(person.reverse_name())</snippet-file></snippet><paragraph/><heading level=\"2\">Examples of class definitions</heading><heading level=\"2\">Class <code>Dog</code></heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Dog():\n    def __init__(self, b, n, w):\n        self.breed = b\n        self.name = n\n        self.weight = w\n    \n    def speak(self):\n        print(\"Woof! woof!\")\n\ngood_dog = Dog(\"Boxer\",\"Jemma\",8.9)\ngood_dog.speak()</snippet-file></snippet><paragraph/><heading level=\"2\">Class <code>Cup</code></heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Cup():\n    def __init__(self, own, con):\n        self.owner = own\n        self.content = con\n        \n    def displayCup(self):\n        print(f'Owner: {self.owner}')\n        print(f'Content: {self.content}')\n    \n    def emptyCup(self):\n        self.content = \"Empty\"\n\n    def changeOwner(self,newOwner):\n        self.owner=newOwner\n\nc1 = Cup(\"Rchid\",\"Milk\")\nc2 = Cup(\"John\",\"Tea\")\n\nc1.displayCup()\nc2.displayCup()\n\nc1.emptyCup()\nc1.displayCup()\n\nc2.changeOwner(\"Helen\")\nc2.displayCup()</snippet-file></snippet></document>"
        },
        {
          "id": 362003,
          "original_id": 343306,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Other special methods",
          "index": 72,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>The <code>__init__()</code> method is an example of a <bold>special instance method.</bold> It is also called a <bold>dunder method</bold> (<bold>d</bold>ouble <bold>under</bold>score <bold>method</bold>). </paragraph><paragraph>You do not need to call it explicitly on an object, because Python calls it automatically whenever it needs to create the object, that is, an instance of the class.</paragraph><paragraph>There are many other special instance methods that you can define. We will look at some examples of the most helpful ones.</paragraph><paragraph/><heading level=\"2\"><code>__str__()</code></heading><paragraph>Consider what happens when you print an instance of the Person class:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n        \nperson = Person('Brad', 'Pitt')\nprint(person.__str__())\n# print(person) # same effect as print(person.__str__())</snippet-file></snippet><paragraph>It is not very informative - when Python prints the instance, it converts the instance into a string, and the default way it does so is just to give some general information.</paragraph><paragraph>You can override this default behaviour and specify what string to produce. You do this by adding another special method, <code>__str__()</code>.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n        \n    def __str__(self):\n\t    return 'Person: ' + self.first_name + ' ' + self.last_name\n        \nperson = Person('Brad', 'Pitt')\nprint(person)</snippet-file></snippet><paragraph>Now you get a more informative result when you print a person.</paragraph><paragraph/><heading level=\"2\"><code>__eq__()</code></heading><paragraph>You can define how to compare two instances of your class for equality.</paragraph><paragraph>Let's add <code>age</code> to the class <code>Person</code> and add an <code>__eq__()</code> special method, which checks whether two people are <bold>equal</bold> if they have the <bold>same</bold> age:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    \n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __eq__(self, other):\n        if isinstance(other, Person):\n            return self.age == other.age\n        return False\n        \njohn = Person('John', 'Citizen', 25)\njane = Person('Jane', 'Doe', 25)\nmary = Person('Mary', 'Smith', 27)\nprint(john == mary)  # False\nprint(john == jane)  # True</snippet-file></snippet><paragraph/><paragraph>Let's switch the example to a \"<bold>Square</bold>\" class. Let's define a class of squares, with a <code>side</code> attribute and an <code>area()</code> method.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n        \n    def area(self):\n        return self.side ** 2\n\nsq = Square(10)\nprint(sq.area())</snippet-file></snippet><paragraph>Let's add an <code>__eq__()</code> special method, which checks whether two squares are equal. Let's consider them equal when they have the same side length. Notice that we need to have a second parameter for the method, to represent the object being compared with.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n\n    def __eq__(self, other):\n        return self.side == other.side\n\n    def area(self):\n        return self.side ** 2\n\nsq1 = Square(10)\nsq2 = Square(11)\nsq3 = Square(10)\nprint(sq1 == sq2) # False\nprint(sq1 != sq3) # False\nprint(sq1 == sq3) # True</snippet-file></snippet><paragraph/><heading level=\"2\"><code>__ne__()</code>, <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, and <code>__ge__()</code> </heading><paragraph>Similarly, we can specify how to compare two squares using <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n    def __eq__(self, other):\n        return self.side == other.side\n    def __ne__(self, other):\n        return self.side != other.side\t\n    def __lt__(self, other):\n        return self.side &lt; other.side\n    def __le__(self, other):\n        return self.side &lt;= other.side\n    def __gt__(self, other):\n        return self.side &gt; other.side\n    def __ge__(self, other):\n        return self.side &gt;= other.side\n\nsq1 = Square(10)\nsq2 = Square(11)\nprint(sq1 != sq2) # True\nprint(sq1 &lt; sq2)  # True \nprint(sq1 &lt;= sq2) # True\nprint(sq1 &gt; sq2)  # False\nprint(sq1 &gt;= sq2) # False</snippet-file></snippet><paragraph/><heading level=\"2\">Others</heading><paragraph>There are many other special methods that you can define, to specify how the objects of your class should behave when operated on, including:</paragraph><pre><underline>Operator</underline>      <underline>Method</underline>\n+             object.__add__(self, other)\n-             object.__sub__(self, other)\n*             object.__mul__(self, other)\n/             object.__div__(self, other)\n%             object.__mod__(self, other)\n**            object.__pow__(self, other)\n&amp;             object.__and__(self, other)\n^             object.__xor__(self, other)\n|             object.__or__(self, other)\n+=            object.__iadd__(self, other) (\"i\" for in place)\n-=            object.__isub__(self, other)\n*=            object.__imul__(self, other)\n/=            object.__idiv__(self, other)\n%=            object.__imod__(self, other)\n**=           object.__ipow__(self, other)\n-             object.__neg__(self)\n+             object.__pos__(self)\nabs()         object.__abs__(self)\nint()         object.__int__(self)\nfloat()       object.__float__(self)\n</pre></document>"
        },
        {
          "id": 362004,
          "original_id": 343307,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Class attributes",
          "index": 158,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph/><paragraph>The attributes you have defined so far are called <bold>instance attributes</bold> - they are attributes of instances of the class, not of the class itself.</paragraph><paragraph>Sometimes you might want to add attributes to a class itself, rather than to instances of the class. These are called <bold>class attributes</bold>.</paragraph><paragraph>If the attribute is a <bold>method</bold> then you can make it a <bold>class method</bold> by omitting the <code><bold>self</bold></code> parameter from the method definition.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n\n    def area(self): # self parameter - this is an instance method\n        return self.side ** 2\n\n    def calculate_area(side): # No self parameter - this is a class method \n        return side ** 2\n\nsq = Square(10) # Create an instance\nprint(sq.area()) # Invoke an instance method\nprint(Square.calculate_area(20)) # Invoke a class method</snippet-file></snippet><paragraph>The method can be invoked by using the <bold>class name</bold> and the method name. It provides a way of organising methods that are related to the class, but do not belong on the instances themselves.</paragraph><paragraph>If the attribute is a <bold>data</bold> then you can make it a <bold>class data</bold> by defining it outside the constructor. It will be then shared by all class instances. it represents a characteristic of the entire class rather than individual objects. Class fields have a single value shared by all instances. Hence changing the value impacts all instances equally as shown in the example below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n\n    nbSquares = 0\n    \n    def __init__(self, side):\n        self.side = side\n        Square.nbSquares += 1\n\n    def area(self): # self parameter - this is an instance method\n        return self.side ** 2\n\n    def calculate_area(side): # No self parameter - this is a class method \n        return side ** 2\n\nsq = Square(10) # Create an instance\nprint(sq.area()) # Invoke an instance method\nprint(Square.calculate_area(20)) # Invoke a class method\nprint(Square.nbSquares) # Outputs 1\nprint(sq.nbSquares) # Outputs 1\nsq2 = Square(10) # Create another instance\nprint(Square.nbSquares) # Outputs 2</snippet-file></snippet></document>"
        },
        {
          "id": 362006,
          "original_id": 343331,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Illustrative example 1 - Length class",
          "index": 159,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find yourself working with lengths. There are many different units in which lengths are measured, including:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>SI (Système International) units</bold>: mm, cm, m, km</paragraph></list-item><list-item><paragraph><bold>Imperial/US Customary units</bold>: in, ft, yd, mi</paragraph></list-item></list><paragraph>Let&#39;s define a class <code>Length</code> to help us work with lengths of various units. Let&#39;s define it so that:</paragraph><list style=\"bullet\"><list-item><paragraph>We can create a <code>Length</code> object by supplying a number and a unit (let&#39;s stick to the units above).</paragraph></list-item><list-item><paragraph>We can get the length of a length object in whatever units we like.</paragraph></list-item><list-item><paragraph>We can add a length object to another.</paragraph></list-item><list-item><paragraph>We can print a length object in an informative way.</paragraph></list-item></list><paragraph>We&#39;ll need the following conversions:</paragraph><list style=\"bullet\"><list-item><paragraph>1mm = 1/000m</paragraph></list-item><list-item><paragraph>1cm = 1/100m</paragraph></list-item><list-item><paragraph>1km = 1000m</paragraph></list-item><list-item><paragraph>1yd = 0.9144m</paragraph></list-item><list-item><paragraph>1 ft = 1/3yd </paragraph></list-item><list-item><paragraph>1 in = 1/12ft</paragraph></list-item><list-item><paragraph>1 mi = 1760yd</paragraph></list-item></list><paragraph>Here&#39;s one way to define the class:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">class Length:\n    &#34;&#34;&#34;A class to help work with lengths in various units&#34;&#34;&#34;\n    \n    def __init__(self, number, unit=&#39;m&#39;):\n        # Convert and store length as self.metres\n        # SI units\n        if unit == &#39;mm&#39;: self.metres = number/1000\n        elif unit == &#39;cm&#39;: self.metres = number/100\n        elif unit == &#39;m&#39;: self.metres = number\n        elif unit == &#39;km&#39;: self.metres = number*1000\n        # Imperial/US Customary units\n        elif unit == &#39;in&#39;: self.metres = (number/36)*0.9144\n        elif unit == &#39;ft&#39;: self.metres = (number/3)*0.9144\n        elif unit == &#39;yd&#39;: self.metres = (number)*0.9144\n        elif unit == &#39;mi&#39;: self.metres = (number*1760)*0.9144\n        # Unit not recognised\n        else: raise Exception(&#34;Unit not recognised&#34;)\n    \n    def to(self, unit, dp=None):\n        # Convert self.metres to unit\n        # SI units\n        if unit == &#39;mm&#39;: number = self.metres*1000\n        elif unit == &#39;cm&#39;: number = self.metres*100\n        elif unit == &#39;m&#39;: number = self.metres\n        elif unit == &#39;km&#39;: number = self.metres/1000\n        # Imperial/US Customary units\n        elif unit == &#39;in&#39;: number = (self.metres*36)/0.9144\n        elif unit == &#39;ft&#39;: number = (self.metres*3)/0.9144\n        elif unit == &#39;yd&#39;: number = (self.metres)/0.9144\n        elif unit == &#39;mi&#39;: number = (self.metres/1760)/0.9144\n        else: raise Exception(&#34;Unit not recognised&#34;)\n        if dp is not None: number = round(number, dp)\n        return f&#34;{number}{unit}&#34;\n    \n    def __str__(self):\n        return f&#34;Length: {self.metres}m&#34;\n    \n    def __add__(self, other):\n        return Length(self.metres + other.metres)\n\n# Try it out\nprint(Length(6, &#39;ft&#39;).to(&#39;cm&#39;))\nprint(Length(6, &#39;ft&#39;).to(&#39;cm&#39;, 1))\nprint(Length(6, &#39;ft&#39;).to(&#39;cm&#39;, 0))\nprint(Length(172.5, &#39;cm&#39;).to(&#39;ft&#39;))\nprint(Length(6, &#39;ft&#39;) + Length(2.5, &#39;m&#39;))\nprint((Length(6, &#39;ft&#39;) + Length(2.5, &#39;m&#39;)).to(&#39;yd&#39;))</snippet-file></snippet></document>"
        },
        {
          "id": 362005,
          "original_id": 343308,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Attributes can be class instances",
          "index": 160,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>There is nothing stopping you from having an attribute of an object being an instance of another class, or perhaps even the same class.</paragraph><paragraph>Consider the following modified definition of the <code>Person</code> class:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name, boss = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.boss = boss\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n        \n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name</snippet-file></snippet><paragraph>We have added a new attribute, <code>boss</code>, which is set when a person is created. It can be set to any object. That means it can be set to a person. </paragraph><paragraph>Here is an example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name, boss = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.boss = boss\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nbasil = Person('Basil', 'Fawlty')\npolly = Person('Polly', 'Sherman', basil) # Set Polly's boss to the Person object basil\nprint(polly.boss.full_name())</snippet-file></snippet><paragraph>Notice that we can print the full name of polly's boss using the expression <code>polly.boss.full_name()</code>.</paragraph><paragraph>You can also write the <code>__str__()</code> special method to cater for that as shown below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name, boss = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.boss = boss\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\n    def __str__(self):\n        if self.boss == None:\n            return self.first_name + \" \" + self.last_name\n        return self.first_name + \" \" + self.last_name + \" \" + str(self.boss)\n   # or return self.first_name + \" \" + self.last_name + \" \" + self.boss.__str__()\n\nbasil = Person('Basil', 'Fawlty')\npolly = Person('Polly', 'Sherman', basil) # Set Polly's boss to the Person object basil\nprint(basil) # outputs Basil Fawlty\nprint(polly) # outputs Polly Sherman Basil Fawlty</snippet-file></snippet></document>"
        },
        {
          "id": 374763,
          "original_id": null,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Illustrative example 2 - Course class",
          "index": 161,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-26T16:19:45.160803+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Here is another example of a <bold>Course</bold> class that has <bold>Textbook</bold> and <bold>Instructor</bold> as instance attributes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Textbook:\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\n    def __str__(self):\n        return f\"{self.title} by {self.author}\"\n\nclass Instructor:\n    def __init__(self, name, department):\n        self.name = name\n        self.department = department\n\n    def __str__(self):\n        return f\"{self.name} from {self.department} department\"\n\nclass Course:\n    def __init__(self, course_code, course_name, textbook, instructor):\n        self.course_code = course_code\n        self.course_name = course_name\n        self.textbook = textbook\n        self.instructor = instructor\n\n    def __str__(self):\n        return f\"Course Code: {self.course_code}\\nCourse Name: {self.course_name}\\nTextbook: {self.textbook}\\nInstructor: {self.instructor}\"\n\n# Example usage:\n\n# Creating instances of Textbook and Instructor\ntextbook1 = Textbook(\"Python Programming\", \"John Smith\", \"978-0134852045\")\ninstructor1 = Instructor(\"Jane Doe\", \"Computer Science\")\n\n# Creating a Course instance using the Textbook and Instructor instances\ncourse1 = Course(\"COMP1001\", \"Introduction to Python\", textbook1, instructor1)\n# Printing out information about the course\nprint(course1)\n</snippet-file></snippet><paragraph>The code will output the following:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"false\"><snippet-file id=\"code\">Course Code: COMP1001\nCourse Name: Introduction to Python\nTextbook: Python Programming by John Smith\nInstructor: Jane Doe from Computer Science department</snippet-file></snippet></document>"
        },
        {
          "id": 362007,
          "original_id": 343309,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Class inheritance",
          "index": 162,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Sometimes you might want to define a class as a <bold>subclass</bold> of another class.</paragraph><paragraph>Suppose you've defined a <code>Person</code> class as before:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n        \n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name</snippet-file></snippet><paragraph>Suppose you are especially interested in a certain type of person - your employees. You have special data about them that you'd like to keep, and special methods that you'd like to use to manipulate that data.</paragraph><paragraph>Suppose you decide to create an <code>Employee</code> class for them. The <code>full_name()</code> and <code>reverse_name()</code> methods of the <code>Person</code> class are quite handy, and they apply equally well to employees. So you would probably want to add them to the definition of the <code>Employee</code> class. But then you would just be duplicating code, which is a bad idea. Fortunately, you do not have to. You can specify, as part of your definition of <code>Employee</code>, that it is a <bold>subclass</bold> of <code>Person</code> meaning that instances of <code>Employee</code> class are also instances of <code>Person</code> class (an employee is just a special kind of person). When you do that, every instance of <code>Employee</code> automatically <bold>inherits</bold> all of the attributes defined in <code>Person</code>.  </paragraph><paragraph>To make <code>Employee</code> a subclass (or <bold>child class</bold>) of <code>Person</code> (which is then called the <bold>parent class</bold>, or <bold>superclass</bold>), you just add <code>Person</code> in brackets after the class name. Then you can start creating instances of <code>Employee</code>, which have all the attributes (including the methods), of instances of <code>Person</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n        \n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nclass Employee(Person): # Add Person in brackets, to make it a subclass of Person\n    pass\n\nx = Employee('John', 'Smith')\nprint(x.full_name())</snippet-file></snippet><paragraph>Now you can start adding your special attributes to the <code>Employee</code> class. Instances of <code>Employee</code> will get these attributes, in addition to the attributes they get from <code>Person</code>.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nclass Employee(Person):\n\n    role = None\n    \n    def full_name(self):\n        return self.first_name + ' ' + self.last_name + ', ' + self.role\n\nx = Employee('John', 'Smith')\nx.role = 'Director'\nprint(x.full_name())\nprint(x.reverse_name())</snippet-file></snippet><paragraph>Notice that we can <bold>override</bold> methods of the parent class in the child class. We've overridden <code>full_name()</code> method, by defining a different version of it in the child class, in which it includes the employees role. But we've not overridden <code>reverse_name()</code>.</paragraph><paragraph>We usually define data attributes using the constructor method, as we did for the class <code>Person</code> previously,  as shown in the improved example below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n    def __str__(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nclass Employee(Person):\n    def __init__(self, first_name, last_name, role):\n        super().__init__(first_name,last_name)\n        self.role = role\n    \n    def full_name(self):\n        return self.first_name + ' ' + self.last_name + ', ' + self.role\n    def __str__(self):\n        return self.first_name + ' ' + self.last_name + ', ' + self.role\n\nx = Employee('John', 'Smith', 'Director')\nprint(x)#.full_name())\nprint(x.reverse_name())\ny = Person('Jane', 'Doe')\nprint(y)#.full_name())</snippet-file></snippet><paragraph>Note the use of the <code>super()</code> function to access methods of the <bold>parent</bold> class.</paragraph></document>"
        },
        {
          "id": 374437,
          "original_id": null,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Class Polymorphism",
          "index": 165,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-25T17:42:27.800009+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Polymorphism means <bold>many forms</bold>, and in programming it refers to <bold>functions/methods</bold>/<bold>operators</bold> with the <bold>same name</bold> that can be executed on <bold>many objects or classes</bold>.</paragraph><paragraph>Polymorphism is often used in class methods, where we can have multiple classes with the same method name.</paragraph><paragraph>For example, say we have three classes: <code>Car</code>, <code>Boat</code>, and <code>Plane</code>, and they all have a method called <code>move()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Car:\r\n  def __init__(self, brand, model):\r\n    self.brand = brand\r\n    self.model = model\r\n\r\n  def move(self):\r\n    print(\"Drive!\")\r\n\r\nclass Boat:\r\n  def __init__(self, brand, model):\r\n    self.brand = brand\r\n    self.model = model\r\n\r\n  def move(self):\r\n    print(\"Sail!\")\r\n\r\nclass Plane:\r\n  def __init__(self, brand, model):\r\n    self.brand = brand\r\n    self.model = model\r\n\r\n  def move(self):\r\n    print(\"Fly!\")\r\n\r\ncar1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\r\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\r\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\r\n\r\nfor x in (car1, boat1, plane1):\r\n  x.move()</snippet-file></snippet><paragraph>Note the <code>for</code> loop at the end. Because of polymorphism, we can execute the same method for all three classes.</paragraph></document>"
        },
        {
          "id": 374438,
          "original_id": null,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Inheritance Class Polymorphism",
          "index": 166,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-25T17:52:45.358596+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>What about <bold>classes</bold> with <bold>child classes</bold> with the <bold>same name</bold>? Can we use <bold>polymorphism</bold> there?</paragraph><paragraph>Yes. If we use the example from the previous slide (Class Polymorphism) and make a parent class called <code>Vehicle</code>, and make <code>Car</code>, <code>Boat</code>, and <code>Plane</code> child classes of <code>Vehicle</code>, the child classes inherits the <code>Vehicle</code> methods, but can override them:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Vehicle:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n\n  def move(self):\n    print(\"Move!\")\n\nclass Car(Vehicle):\n  pass\n\nclass Boat(Vehicle):\n  def move(self):\n    print(\"Sail!\")\n\nclass Plane(Vehicle):\n  def move(self):\n    print(\"Fly!\")\n\ncar1 = Car(\"Ford\", \"Mustang\") #Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = Plane(\"Boeing\", \"747\") #Create a Plane object\n\nfor x in (car1, boat1, plane1):\n  print(x.brand)\n  print(x.model)\n  x.move()\n  print()</snippet-file></snippet><paragraph>Child classes inherits the <bold>attributes</bold> and <bold>methods</bold> from the parent class.</paragraph><paragraph>In the example above you can see that the <code>Car</code> class is empty, but it inherits <code>brand</code>, <code>model</code>, and <code>move()</code> from <code>Vehicle</code>.</paragraph><paragraph>The <code>Boat</code> and <code>Plane</code> classes also inherit <code>brand</code>, <code>model</code>, and <code>move()</code> from <code>Vehicle</code>, but they both <bold>override</bold> the <code>move()</code> method.</paragraph><paragraph>Because of polymorphism, we can execute the same method for all classes.</paragraph></document>"
        },
        {
          "id": 362008,
          "original_id": 343311,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Documenting your functions, classes, and modules",
          "index": 167,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>When you define a function, or define a class, or create a module, there is a special kind of comment that you can add, called a <bold>docstring</bold>.</paragraph><paragraph/><heading level=\"2\">Functions</heading><paragraph>Here is an example of a docstring being used in a function definition:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def full_name(first_name, last_name):\n    \"\"\"Returns 'first_name last_name'\"\"\"\n    return (first_name + ' ' + last_name).strip()</snippet-file></snippet><paragraph>A function docstring is just a string literal, but:</paragraph><list style=\"bullet\"><list-item><paragraph>It must be <bold>triple quoted</bold> (triple-single or triple-double) (PEP8 style guide recommends triple-double)</paragraph></list-item><list-item><paragraph>It must be the <bold>first line</bold> of the function body</paragraph></list-item></list><paragraph>Why use a docstring? Why not just comments, as usual? Because Python recognises docstrings and uses them to help document your code. Notice what happens when you ask Python for help about the function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def full_name(first_name, last_name):\n    \"\"\"Returns 'first_name last_name'\"\"\"\n    return (first_name + ' ' + last_name).strip()\n\nhelp(full_name)</snippet-file></snippet><paragraph/><heading level=\"2\">Classes</heading><paragraph>Here is an example of docstrings being used inside a class definition:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    \"\"\"Represents a person\"\"\"\n    def __init__(self, first_name, last_name):\n        \"\"\"This is a constructor\"\"\"\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        \"\"\"Returns 'first_name last_name'\"\"\"\n        return self.first_name + ' ' + self.last_name\n    def reverse_name(self):\n        \"\"\"Returns 'last_name, first_name'\"\"\"\n        return self.last_name + ', ' + self.first_name</snippet-file></snippet><paragraph>Each function definition inside the class definition can have a docstring, as per functions in general. In addition, the class definition itself can have a docstring. The rules are the same:</paragraph><list style=\"bullet\"><list-item><paragraph>It must be triple quoted (triple-single or triple-double)</paragraph></list-item><list-item><paragraph>It must be the first line of the class body</paragraph></list-item></list><paragraph>And the purpose is the same:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    \"\"\"Represents a person\"\"\"\n    def __init__(self, first_name, last_name):\n        \"\"\"This is a constructor\"\"\"\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        \"\"\"Returns 'first_name last_name'\"\"\"\n        return self.first_name + ' ' + self.last_name\n    def reverse_name(self):\n        \"\"\"Returns 'last_name, first_name'\"\"\"\n        return self.last_name + ', ' + self.first_name\n\nhelp(Person)</snippet-file></snippet><paragraph/><heading level=\"2\">Modules</heading><paragraph>You can add a docstring to any module that you create, too. The rules are the same, and the purpose is the same.</paragraph><paragraph>Suppose you have a module called \"<bold>people.py</bold>\" in which you have a bunch of function and class definitions to help work with people. Here's how the start of your module might look:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">\"\"\"A collection of functions and classes to help work with people\"\"\"\n\nclass Person:\n    \"\"\"Represents a person\"\"\"\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        \"\"\"Returns 'first_name last_name'\"\"\"\n        return self.first_name + ' ' + self.last_name\n    def reverse_name(self):\n        \"\"\"Returns 'last_name, first_name'\"\"\"\n        return self.last_name + ', ' + self.first_name\n\n\ndef add_two_numbers(num1, num2):\n    \"\"\"Returns the sum of two given numbers\"\"\"\n    return num1 + num2</snippet-file></snippet><paragraph>Anyone who imports your module and runs <code>help(people)</code> (assuming they haven't given it an alias) will see the information in your docstring.</paragraph><paragraph>You can try it with one of the modules we have been importing. Rather than running <code>help(math)</code>, which will give us a lot of information, we can run <code>print(math.__doc__)</code> - this will show us just the docstring of the module:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\n\nprint(math.__doc__)\ninput(\"Press &lt;Enter&gt; to see the help about the module\")\nhelp(math)</snippet-file></snippet></document>"
        },
        {
          "id": 362009,
          "original_id": 343319,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Documenting your modules - Example",
          "index": 169,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "challenge_id": 119337,
          "content": ""
        },
        {
          "id": 362010,
          "original_id": 343312,
          "lesson_id": 53316,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Further reading",
          "index": 170,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.241589+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com</paragraph></list-item></list><paragraph></paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 5 - Classes",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:44.68356+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-07-16T15:46:51.107512+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53333,
      "index": 22,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 362090,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47911,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 13,
      "slide_marks_summary": [
        {
          "id": 362081,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362089,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362084,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362085,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362082,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362086,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362092,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362088,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362093,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362090,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362091,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362087,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362083,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362081,
          "original_id": 326219,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful links about Searching and Sorting ",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Binary and Linear Search Visualization<break/><link href=\"https://www.cs.usfca.edu/~galles/visualization/Search.html\">https://www.cs.usfca.edu/~galles/visualization/Search.html</link><break/><break/></paragraph></list-item><list-item><paragraph>Linear Search<break/><link href=\"https://www.geeksforgeeks.org/linear-search/\">https://www.geeksforgeeks.org/linear-search/</link><break/><break/></paragraph></list-item><list-item><paragraph>Binary Search<break/><link href=\"https://www.geeksforgeeks.org/binary-search/\">https://www.geeksforgeeks.org/binary-search/</link><break/><break/></paragraph></list-item><list-item><paragraph>Selection Sort<break/><link href=\"https://www.geeksforgeeks.org/selection-sort/\">https://www.geeksforgeeks.org/selection-sort/</link><break/><break/></paragraph></list-item><list-item><paragraph>Bubble Sort<break/><link href=\"https://www.geeksforgeeks.org/bubble-sort/\">https://www.geeksforgeeks.org/bubble-sort/</link><break/><break/></paragraph></list-item><list-item><paragraph>Insertion Sort<break/><link href=\"https://www.geeksforgeeks.org/insertion-sort/\">https://www.geeksforgeeks.org/insertion-sort/</link><break/><break/></paragraph></list-item><list-item><paragraph>Quick Sort<break/><link href=\"https://www.geeksforgeeks.org/quick-sort/\">https://www.geeksforgeeks.org/quick-sort/</link><break/><break/></paragraph></list-item><list-item><paragraph>A tour of the top 5 sorting algorithms with Python code<break/><link href=\"https://medium.com/@george.seif94/a-tour-of-the-top-5-sorting-algorithms-with-python-code-43ea9aa02889\">https://medium.com/@george.seif94/a-tour-of-the-top-5-sorting-algorithms-with-python-code-43ea9aa02889</link><break/><break/></paragraph></list-item><list-item><paragraph>15 Sorting Algorithms in 6 Minutes<break/><link href=\"https://www.youtube.com/watch?v=kPRA0W1kECg\">https://www.youtube.com/watch?v=kPRA0W1kECg</link><break/><break/></paragraph></list-item><list-item><paragraph>A Bubble Sorting Algorithm animated example<break/><link href=\"https://www.youtube.com/watch?v=9I2oOAr2okY\">https://www.youtube.com/watch?v=9I2oOAr2okY</link><break/><break/></paragraph></list-item><list-item><paragraph>The Quick Sort<break/><link href=\"https://runestone.academy/runestone/books/published/pythonds/SortSearch/TheQuickSort.html\">https://runestone.academy/runestone/books/published/pythonds/SortSearch/TheQuickSort.html</link><break/><break/></paragraph></list-item><list-item><paragraph>Sorting, searching and algorithm analysis<break/><link href=\"https://python-textbok.readthedocs.io/en/1.0/Sorting_and_Searching_Algorithms.html\">https://python-textbok.readthedocs.io/en/1.0/Sorting_and_Searching_Algorithms.html</link><break/><break/></paragraph></list-item><list-item><paragraph>Python Programming Examples on Searching and Sorting<break/><link href=\"https://www.sanfoundry.com/python-programming-examples-searching-sorting/\">https://www.sanfoundry.com/python-programming-examples-searching-sorting/</link><break/><break/></paragraph></list-item><list-item><paragraph>A tour of the top 5 sorting algorithms with Python code<break/><link href=\"https://medium.com/@george.seif94/a-tour-of-the-top-5-sorting-algorithms-with-python-code-43ea9aa02889\">https://medium.com/@george.seif94/a-tour-of-the-top-5-sorting-algorithms-with-python-code-43ea9aa02889</link><break/><break/></paragraph></list-item><list-item><paragraph>Sorting and Searching in Python<break/><link href=\"https://code.tutsplus.com/tutorials/sorting-and-searching-in-python--cms-25668\">https://code.tutsplus.com/tutorials/sorting-and-searching-in-python--cms-25668</link><break/><break/></paragraph></list-item><list-item><paragraph>Batcher odd–even mergesort<break/><link href=\"https://en.wikipedia.org/wiki/Batcher_odd%E2%80%93even_mergesort\">https://en.wikipedia.org/wiki/Batcher_odd%E2%80%93even_mergesort</link></paragraph></list-item></list></document>"
        },
        {
          "id": 362089,
          "original_id": 326227,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "linear_search.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119377,
          "content": ""
        },
        {
          "id": 362084,
          "original_id": 326222,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "binary_search.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119372,
          "content": ""
        },
        {
          "id": 362085,
          "original_id": 326223,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "binary_search_recursive.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119373,
          "content": ""
        },
        {
          "id": 362082,
          "original_id": 326220,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "sorting.py",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119370,
          "content": ""
        },
        {
          "id": 362086,
          "original_id": 326224,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "bubble_sort.py",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119374,
          "content": ""
        },
        {
          "id": 362092,
          "original_id": 326230,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "selection_sort.py",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119380,
          "content": ""
        },
        {
          "id": 362088,
          "original_id": 326226,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "insertion_sort.py",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119376,
          "content": ""
        },
        {
          "id": 362093,
          "original_id": 326231,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "shell_sort.py",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119381,
          "content": ""
        },
        {
          "id": 362090,
          "original_id": 326228,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "merge_sort.py",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119378,
          "content": ""
        },
        {
          "id": 362091,
          "original_id": 326229,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "quick_sort.py",
          "index": 12,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119379,
          "content": ""
        },
        {
          "id": 362087,
          "original_id": 326225,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "heap_sort.py",
          "index": 13,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119375,
          "content": ""
        },
        {
          "id": 362083,
          "original_id": 326221,
          "lesson_id": 53333,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "batcher_sort.py",
          "index": 14,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.68356+10:00",
          "updated_at": null,
          "challenge_id": 119371,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 10 - Searching and Sorting",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:56.072082+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53356,
      "index": 4,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47933,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 4,
      "slide_marks_summary": [
        {
          "id": 362180,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362181,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362182,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362183,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362180,
          "original_id": 326296,
          "lesson_id": 53356,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The Babylonian method for computing square roots",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.072082+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/U2gqPjgN7NyXbgdXLEqp3sWf"
        },
        {
          "id": 362181,
          "original_id": 326297,
          "lesson_id": 53356,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "The Babylonian method for computing square roots",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.072082+10:00",
          "updated_at": null,
          "challenge_id": 119461,
          "content": ""
        },
        {
          "id": 362182,
          "original_id": 326298,
          "lesson_id": 53356,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "sqrt_approximation.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.072082+10:00",
          "updated_at": null,
          "challenge_id": 119462,
          "content": ""
        },
        {
          "id": 362183,
          "original_id": 326299,
          "lesson_id": 53356,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The Babylonian method for computing square roots",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.072082+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/sRDJ4jA-P2s"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "The Babylonian method for computing square roots",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:56.317547+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53357,
      "index": 11,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47934,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384765,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362184,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384765,
          "original_id": null,
          "lesson_id": 53357,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The Vigenere cipher",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:16:28.702347+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/WK1BDFApAhrAMopDXGMxog7x"
        },
        {
          "id": 362184,
          "original_id": 326300,
          "lesson_id": 53357,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "The Vigenere cipher",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.317547+10:00",
          "updated_at": null,
          "challenge_id": 119463,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "The Vigenere cipher",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:56.567805+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53358,
      "index": 13,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47935,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384764,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362185,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384764,
          "original_id": null,
          "lesson_id": 53358,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Nash equilibrium",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:15:12.028685+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/JghazBVj7GgbXdYPgePwSHYr"
        },
        {
          "id": 362185,
          "original_id": 326301,
          "lesson_id": 53358,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Nash equilibrium",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.567805+10:00",
          "updated_at": null,
          "challenge_id": 119464,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Nash equilibrium",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:57.339493+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53362,
      "index": 22,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47939,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384760,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362189,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384760,
          "original_id": null,
          "lesson_id": 53362,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Continued fractions",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:06:24.483198+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/99eoGB7uF8cVGkuN6kcXVKSe"
        },
        {
          "id": 362189,
          "original_id": 326305,
          "lesson_id": 53362,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Continued fractions",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:57.339493+10:00",
          "updated_at": null,
          "challenge_id": 119468,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Continued fractions",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:57.512953+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53363,
      "index": 24,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47940,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384759,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362190,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384759,
          "original_id": null,
          "lesson_id": 53363,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Fractals",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:05:08.435507+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/QEVJYzCKreVMF67Ok7pNeWlM"
        },
        {
          "id": 362190,
          "original_id": 326306,
          "lesson_id": 53363,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Fractals",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:57.512953+10:00",
          "updated_at": null,
          "challenge_id": 119469,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Fractals",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.918745+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53302,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47892,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 6,
      "slide_marks_summary": [
        {
          "id": 361932,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361933,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361934,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361935,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361936,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361937,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361932,
          "original_id": 326089,
          "lesson_id": 53302,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Turing machines",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.918745+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/kmUIrv0wSsFTgXMLws3J3uIo"
        },
        {
          "id": 361933,
          "original_id": 326090,
          "lesson_id": 53302,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful link about Turing machines",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.918745+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>https://en.wikipedia.org/wiki/Turing_machine</paragraph><paragraph></paragraph></document>"
        },
        {
          "id": 361934,
          "original_id": 326091,
          "lesson_id": 53302,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Turing machines",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.918745+10:00",
          "updated_at": null,
          "challenge_id": 119324,
          "content": "<document version=\"2.0\"><paragraph/></document>"
        },
        {
          "id": 361935,
          "original_id": 326092,
          "lesson_id": 53302,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Turing Machine Simulator",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.918745+10:00",
          "updated_at": null,
          "challenge_id": 119325,
          "content": ""
        },
        {
          "id": 361936,
          "original_id": 326093,
          "lesson_id": 53302,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Turing machines I",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.918745+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/iToLe5gZXiQ"
        },
        {
          "id": 361937,
          "original_id": 326094,
          "lesson_id": 53302,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Turing machines II",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.918745+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/dQkLZmr9Ui4"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 1 - Notes 1 Turing Machines (optional)",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.284146+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-18T14:08:06.188986+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53303,
      "index": 3,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361938,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 49714,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 361938,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361939,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361938,
          "original_id": 336220,
          "lesson_id": 53303,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 2 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.284146+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Week 2 Tuesday To Do List</paragraph><paragraph>Admin/Tips</paragraph><list style=\"number\"><list-item><paragraph><bold>Quiz 1</bold> worth <bold>4 marks</bold> will be released <bold>Week 2 Thursday</bold> and due <bold>Week 3 Thursday 9pm</bold> (you will have <bold>one week</bold> to do it)</paragraph></list-item><list-item><paragraph><bold>Week 3 Monday</bold> is a <bold>public holiday</bold>. Students missing Week 3 Monday tutorial are strongly advised to <bold>attend one of the four online tutorials in Week 3</bold> to catch up on the missed Week 3 Monday tutorial.</paragraph></list-item></list><paragraph>Content</paragraph><list style=\"number\"><list-item><paragraph>Continue showing how to run <bold>Turing machine simulator</bold></paragraph></list-item><list-item><paragraph><bold>Importing modules</bold> slide revisited (added extra examples)</paragraph></list-item><list-item><paragraph>Continue \"<bold>Week 1 - Python Programming Fundamentals</bold>\" with \"<bold>Controlling program flow</bold>\" slide</paragraph></list-item><list-item><paragraph><code>if</code> statements, body/block, indentation, <code>elif</code>, and <code>match</code></paragraph></list-item><list-item><paragraph><code>while</code> statements, <code>continue</code>, and <code>break</code></paragraph></list-item><list-item><paragraph>Exceptions, <code>try</code>, <code>except</code>, and <code>else</code></paragraph></list-item><list-item><paragraph>Working with files, <code>open()</code>, <code>close()</code>, <code>with()</code>, </paragraph></list-item><list-item><paragraph>Show the <bold>flowchart - problem solving from requirement</bold>s, <bold>example.py</bold> rewritten using <code>match</code> statement</paragraph></list-item><list-item><paragraph>Go through \"<bold>Week 2 - Lists, Tuples, Sets, and Dictionaries</bold>\"</paragraph></list-item></list><paragraph/></document>"
        },
        {
          "id": 361939,
          "original_id": 339120,
          "lesson_id": 53303,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 2 Thursday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.284146+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 2 Thursday To Do List</heading><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 1</bold> worth <bold>4 marks</bold> will be released <bold>today @ 7.15pm</bold></paragraph></list-item><list-item><paragraph>Online Tutorials <bold>recordings</bold> in BB Collaborate</paragraph></list-item><list-item><paragraph><bold>Plagiarism</bold> and <bold>Academic Integrity</bold> Reminder (see today's announcement on Ed)</paragraph></list-item><list-item><paragraph><bold>Assignment 1</bold> worth <bold>13 marks</bold> will be released <bold>Week 3 Tuesday</bold></paragraph></list-item></list><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Start \"<bold>Week 2 - Lists, Tuples, Sets, and Dictionaries</bold>\" lesson</paragraph></list-item><list-item><paragraph>Collections</paragraph></list-item><list-item><paragraph>Creating a collection</paragraph></list-item><list-item><paragraph>Inspecting a collection</paragraph></list-item><list-item><paragraph>Selecting elements</paragraph></list-item><list-item><paragraph>Looping through a collection</paragraph><list style=\"bullet\"><list-item><paragraph><code>for</code> loops</paragraph></list-item><list-item><paragraph><code>break</code> and <code>continue</code></paragraph></list-item></list></list-item><list-item><paragraph>The <code>range()</code> function</paragraph></list-item><list-item><paragraph>Adding elements</paragraph><list style=\"bullet\"><list-item><paragraph>Adding to a <bold>list</bold>: <code>append()</code>, <code>insert()</code>, <code>extend()</code>, and using <code>+</code> operator</paragraph></list-item><list-item><paragraph>No adding to <bold>tuples</bold> since they are <bold>immutable</bold></paragraph></list-item><list-item><paragraph>Adding to a <bold>set</bold>: <code>add()</code> and <code>update()</code></paragraph></list-item><list-item><paragraph>Adding to a <bold>dictionary</bold> by specifying a value for a new key or updating it</paragraph></list-item></list></list-item><list-item><paragraph>Removing elements</paragraph><list style=\"bullet\"><list-item><paragraph>Removing from a list: <code>del</code>, set slice to empty list, <code>pop()</code>, <code>remove()</code>, and <code>clear()</code></paragraph></list-item><list-item><paragraph>No removing from <bold>tuples</bold> since they are <bold>immutable</bold></paragraph></list-item><list-item><paragraph>Removing from a set: <code>remove()</code> ,  <code>discard()</code>, and <code>clear()</code></paragraph></list-item><list-item><paragraph>Removing from a dictionary: <code>del</code>, <code>pop()</code>, and <code>clear()</code></paragraph></list-item></list></list-item><list-item><paragraph>Modifying elements</paragraph><list style=\"bullet\"><list-item><paragraph>Modifying list elements: assignment and slice</paragraph></list-item><list-item><paragraph>No <bold>tuples</bold> modification since they are <bold>immutable</bold></paragraph></list-item><list-item><paragraph>Modifying set elements: can not be changed, but remove then add</paragraph></list-item><list-item><paragraph>Modifying dictionary elements: using assignment similarly to list elements</paragraph></list-item></list></list-item><list-item><paragraph>Sorting elements</paragraph><list style=\"bullet\"><list-item><paragraph><code>sort()</code> method (<bold>lists</bold> only and <bold>in-place</bold>)</paragraph></list-item><list-item><paragraph><code>sorted()</code> method (applies to all and returns a list)</paragraph></list-item></list></list-item><list-item><paragraph>Joining elements using <code>join()</code></paragraph></list-item><list-item><paragraph>Special string operations</paragraph><list style=\"bullet\"><list-item><paragraph>Strings as tuples</paragraph></list-item><list-item><paragraph>Splitting strings</paragraph></list-item></list></list-item><list-item><paragraph>Special set operations: union, intersection, difference, symmetric difference, comparing sets</paragraph></list-item><list-item><paragraph>Comprehensions</paragraph></list-item><list-item><paragraph>Files as lists: <code>readlines()</code>, <code>writelines()</code>, reading CSV files</paragraph></list-item><list-item><paragraph>Dates and times</paragraph></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph><bold>ASCII Table</bold><break/><link href=\"https://www.ascii-code.com/\">https://www.ascii-code.com/</link><break/></paragraph></list-item><list-item><paragraph>Python List <code>sort()</code> Method <break/><link href=\"https://www.programiz.com/python-programming/methods/list/sort\">https://www.programiz.com/python-programming/methods/list/sort</link><break/></paragraph></list-item><list-item><paragraph>Python <code>sorted()</code> Method<break/><link href=\"https://www.programiz.com/python-programming/methods/built-in/sorted\">https://www.programiz.com/python-programming/methods/built-in/sorted</link></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 2 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53304,
      "index": 4,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47893,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 17,
      "slide_marks_summary": [
        {
          "id": 361940,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361941,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361942,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361943,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361951,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361953,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361944,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361945,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361946,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361947,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361948,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361949,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361950,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361952,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361954,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361955,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361956,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361940,
          "original_id": 336223,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Collections",
          "index": 112,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>So far we have worked mostly with individual objects - individual numbers, individual strings, and so on. But it is very common, when programming, to work with whole <bold>collections</bold> of objects - collections of numbers, collections of strings, even mixed collections of objects of different types.</paragraph><paragraph>As programming languages have developed, collections have proven to be a cornerstone of working with data, and Python has some of the most powerful techniques for manipulating collections among modern programming languages.</paragraph><paragraph>Python provides four built-in types of collection, each useful in their own way:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Lists</bold></paragraph></list-item><list-item><paragraph><bold>Tuples</bold></paragraph></list-item><list-item><paragraph><bold>Sets</bold></paragraph></list-item><list-item><paragraph><bold>Dictionaries</bold></paragraph></list-item></list><heading level=\"2\">Lists</heading><paragraph>A list is an <bold>ordered</bold> collection of objects (possibly empty). The objects can be of any type, and they <bold>can be repeated</bold>.</paragraph><list style=\"bullet\"/><heading level=\"2\">Tuples</heading><paragraph>A tuple is like a list except that it is <italic><bold>immutable</bold></italic>, which means that objects cannot be added to a tuple, they cannot be removed from a tuple, and they cannot be reordered within a tuple.</paragraph><list style=\"bullet\"/><paragraph>If it is important that the collection does not change then you should use a tuple, even if the careful use of a list would achieve the same thing. By using a tuple you guarantee that it won't change, and you also signal your intentions more clearly to anyone who reads your code.</paragraph><heading level=\"2\">Sets</heading><paragraph>A set is an <italic><bold>unordered</bold></italic> collection of objects (possibly empty), each of which is <italic><bold>unique</bold></italic> (cannot be repeated).</paragraph><list style=\"bullet\"/><paragraph>If it is important that the collection does not contain the same object twice then you should use a set, even if the careful use of a list would achieve the same thing. By using a set you guarantee that there won't be duplicates, and you also signal your intentions more clearly to anyone who reads your code.</paragraph><heading level=\"2\">Dictionaries</heading><paragraph>A dictionary is an <italic><bold>ordered</bold></italic> collection of <italic><bold>key-value pairs</bold></italic>. In addition, the <bold>keys must be unique</bold>. You can think of a dictionary as a <italic><bold>mapping</bold></italic> from a set of <bold>keys</bold> to some <bold>values</bold>.  You will learn more about what this means as you work your way through this week's slides.</paragraph><callout type=\"info\">In earlier versions of Python dictionaries were not ordered. They have been ordered since version 3.7.</callout></document>"
        },
        {
          "id": 361941,
          "original_id": 336224,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Creating a collection",
          "index": 113,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You can create a collection in a variety of ways.</paragraph><heading level=\"2\">List literals</heading><paragraph>A list literal is a sequence of literals, each of which refers to an object, separated by commas, and surrounded by square brackets. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [2, 4, 6, 8]\nx = [&#39;cat&#39;, &#39;mouse&#39;, &#39;cat&#39;, &#39;mouse&#39;]\nx = [1, 3.14, &#39;a&#39;, True]\nx = []</snippet-file></snippet><list style=\"bullet\"></list><paragraph>Note the last literal above - it is the literal for the <bold>empty list</bold>. Also note that the same object can be included more than once in a list.</paragraph><paragraph>The expressions that you use within square brackets need not be literals - they could be variables or other complex expressions. For example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">y = 45\nx = [2*23, 4-1, abs(-6), y]\nprint(x)</snippet-file></snippet><paragraph>But, strictly speaking, if they are not literals then the whole thing does not count as a list literal - it&#39;s only a list literal if all of the expressions in the square brackets are themselves literals. </paragraph><heading level=\"2\">Tuple literals</heading><paragraph>A tuple literal is like a list literal, except you use round brackets rather than square brackets:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (2, 4, 6, 8)\nx = (&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;)\nx = (1, 3.14, &#39;a&#39;, True)\nx = ()</snippet-file></snippet><list style=\"bullet\"></list><paragraph>Note the last literal again - it is the literal for the <bold>empty tuple</bold>.</paragraph><paragraph>In some contexts you can drop the round brackets around a tuple. We have already seen an example of this - variable unpacking. For example, line 1 below is just shorthand for line 2: </paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x, y = 1, 2\n(x, y) = (1, 2)</snippet-file></snippet><paragraph>You should be careful when doing this, because it sometimes causes errors, and it can make your code less readable.</paragraph><heading level=\"2\">Set literals</heading><paragraph>A set literal is also like a list literal, except you use curly brackets rather than square brackets:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {2, 4, 6, 8}\nx = {&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;}\nx = {1, 3.14, &#39;a&#39;, True}</snippet-file></snippet><paragraph>What about the empty set? You might expect that you could use <code>{}</code>,  but unfortunately that refers to the empty <italic>dictionary</italic> (see below). If you want an empty set you have to use <code>set()</code> (more on this below).</paragraph><paragraph>The items in a set are <italic>unique</italic>, so what happens if you try to include an object more than once? Try it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;}\nprint(x)</snippet-file></snippet><paragraph>As you can see, Python silently ignores all but one occurrence of the object.</paragraph><heading level=\"2\">Dictionary literals</heading><paragraph>A dictionary literal uses curly brackets, like set literals, but with key-value pairs separated by commas, and each key and value separated by a colon.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1: &#39;cat&#39;, 2: &#39;dog&#39;, 3: &#39;mouse&#39;}\nx = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;E&#39;: 2, &#39;M&#39;: 3}\nx = {}</snippet-file></snippet><paragraph>Note the last literal again - it is the literal for the <bold>empty dictionary</bold>.</paragraph><paragraph>Although you&#39;ll mostly use integers, floats, and strings for the keys of a dictionary, they can also be booleans or tuples:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {True: 1, False: 0}\nprint(x)\nx = {(0, 0): &#39;bottom left&#39;, (1, 1): &#39;top right&#39;}\nprint(x)</snippet-file></snippet><paragraph>They cannot be lists or sets or dictionaries. Try it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">try: x = {[1, 2]: &#39;First list&#39;, [3, 4]: &#39;Second list&#39;}\nexcept Exception as e: print(e)\ntry: x = {{1, 2}: &#39;First set&#39;, {3, 4}: &#39;Second set&#39;}\nexcept Exception as e: print(e)  \ntry: x = {{1: 2}: &#39;First dictionary&#39;, {3: 4}: &#39;Second dictionary&#39;}\nexcept Exception as e: print(e)  </snippet-file></snippet><paragraph>The problem with lists, sets and dictionaries is that they are mutable, which means that Python cannot <bold>hash</bold> them (which means, roughly, giving them a unique unchanging value).</paragraph><paragraph>The keys do not all have to be the same type, and neither do the values:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1: &#39;one&#39;, &#39;two&#39;: 2, 3.176: False}\nprint(x)</snippet-file></snippet><paragraph>However, mixing types can lead to confusion, and it is good programming practice to keep the types the same.</paragraph><paragraph>In a dictionary, the values can be duplicated but the keys must be unique. So what happens if you use the same key twice? Try it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;A&#39;: 2, &#39;B&#39;: 3}\nprint(x)</snippet-file></snippet><paragraph>As you can see, if there are multiple items with the same key then Python silently ignores all but the last one.</paragraph><heading level=\"2\">Collections of collections</heading><paragraph>The items in a collection can be objects of any type. In particular, they can be collections. So it&#39;s possible to create collections of collections. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># A list of lists\nx = [[1, 2, 3], [3, 4, 5], [6, 7, 8]]\nprint(x)\n\n# A set of tuples\nx = {(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;), (4, &#39;d&#39;)}\nprint(x)</snippet-file></snippet><heading level=\"2\">Using other collections</heading><paragraph>You can also use the <code>list()</code>, <code>tuple()</code>, <code>set()</code>, and <code>dict()</code> functions to create a collection of one type from a collection of another type.</paragraph><heading level=\"2\">Using <code>list()</code></heading><paragraph>You can create a list from a tuple, set, or dictionary: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = list((1, 2, 3)) # From a tuple\nprint(x)\nx = list({1, 2, 3}) # From a set\nprint(x)\nx = list({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # From a dictionary\nprint(x)</snippet-file></snippet><paragraph>Notice that when you create a list from a dictionary you get a list of the <italic>keys</italic>.</paragraph><heading level=\"2\">Using <code>tuple()</code></heading><paragraph>You can create a tuple from a list, set, or dictionary:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = tuple([1, 2, 3]) # From a list\nprint(x)\nx = tuple({1, 2, 3}) # From a set\nprint(x)\nx = tuple({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # From a dictionary\nprint(x)</snippet-file></snippet><heading level=\"2\">Using <code>set()</code></heading><paragraph>You can create a set from a list, tuple, or dictionary:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = set([1, 2, 3]) # From a list\nprint(x)\nx = set((1, 2, 3)) # From a tuple\nprint(x)\nx = set({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # From a dictionary\nprint(x)</snippet-file></snippet><paragraph>Creating a set from a list can be a good way to remove duplicate items from the list:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [1, 2, 2, 1, 3, 3, 2, 3, 1]\nprint(x)\nx = set(x)\nprint(x)</snippet-file></snippet><paragraph>If you want the result as a list then you can simply apply the <code>list</code> function after applying the <code>set</code> function:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [1, 2, 2, 1, 3, 3, 2, 3, 1]\nx = list(set(x))\nprint(x)</snippet-file></snippet><heading level=\"2\">Using <code>dict()</code></heading><paragraph>Since a dictionary is a collection of key-value <italic>pairs</italic>, you can&#39;t create a dictionary from a list, tuple, or set unless the items are pairs. But when they are you have quite a bit of flexibility. Any of the following will work:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = dict([[1, &#39;a&#39;], [2, &#39;b&#39;]]) # From a list of lists\nprint(x)\nx = dict([(1, &#39;a&#39;), (2, &#39;b&#39;)]) # From a list of tuples\nprint(x)\nx = dict(([1, &#39;a&#39;], [2, &#39;b&#39;])) # From a tuple of lists\nprint(x)\nx = dict(((1, &#39;a&#39;), (2, &#39;b&#39;))) # From a tuple of tuples\nprint(x)\nx = dict({(1, &#39;a&#39;), (2, &#39;b&#39;)}) # From a set of tuples\nprint(x)</snippet-file></snippet><paragraph>Be careful when retrieving the items of a set, because you can&#39;t always tell in what order Python will give them to you. For example, the following is risky, because you can&#39;t tell in advance what the keys will be and what the values will be:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = dict([{1, &#39;a&#39;}, {2, &#39;b&#39;}])\nprint(x)</snippet-file></snippet><paragraph>You should avoid using sets in this way.</paragraph></document>"
        },
        {
          "id": 361942,
          "original_id": 336225,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Inspecting a collection",
          "index": 114,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>There are a variety of ways in which you can inspect a collection.</paragraph><heading level=\"2\">Number of items</heading><paragraph>You can get the number of items in a collection using Python&#39;s <code>len()</code> function:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(len([1, 2, 3])) # List\nprint(len((1, 2, 3))) # Tuple\nprint(len({1, 2, 3})) # Set\nprint(len({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})) # Dictionary\nprint(len([])) # Empty list</snippet-file></snippet><paragraph>Notice that if you have a collection of collections, <code>len()</code> only counts the number of items at the top level:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">numbers = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\nprint(len(numbers))</snippet-file></snippet><heading level=\"2\">Existence of an item</heading><paragraph>You can check whether a collection contains an item using the <code>in</code> keyword. Note that in the case of dictionaries it is the keys that are checked.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(1 in [1, 2, 3]) # True\nprint(&#39;a&#39; in [1, 2, 3]) # False\n\nprint(1 in (1, 2, 3)) # True\nprint(&#39;a&#39; in (1, 2, 3)) # False\n\nprint(1 in {1, 2, 3}) # True\nprint(&#39;a&#39; in {1, 2, 3}) # False\n\nprint(1 in {1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # True - keys are checked\nprint(&#39;a&#39; in {1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # False - keys are checked</snippet-file></snippet><paragraph>You can check whether an item is <italic>not</italic> in a collection either by using <code>in</code> and checking whether <code>False</code> is returned, or by using <code>not in</code> and checking whether <code>True</code> is returned:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(&#39;a&#39; in [1, 2, 3]) # False\nprint(&#39;a&#39; not in [1, 2, 3]) # True</snippet-file></snippet><paragraph>You can use the <code>index()</code> method to find the index of the first occurrence of a value in a list or tuple. If the value is not found then Python raises an error.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 3, 7, 8, 7, 5, 4, 6, 8, 5, 7]\nprint(x.index(7)) # Only the first occurrence is found</snippet-file></snippet><heading level=\"2\">Frequency of an item</heading><paragraph>If you want to know how many times an item occurs in a list or tuple you can use the <code>count()</code> method (sets and dictionaries do not have this method):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 1, 2, 2, 2]\nprint(x.count(1))\nx = (1, 1, 2, 2, 2)\nprint(x.count(1))\nprint(x.count(&#39;a&#39;))</snippet-file></snippet><paragraph>You could also use this to check whether a list or tuple contains a certain item (if not, the count will be zero).</paragraph><heading level=\"2\">Minimum item</heading><paragraph>You can find the minimum item in a collection by using the <code>min()</code> function. In the case of dictionaries it compares their <italic>keys</italic>, rather than their values.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(min([1, 2, 3])) # List\nprint(min((1, 2, 3))) # Tuple\nprint(min({1, 2, 3})) # Set\nprint(min({&#39;a&#39;: 10, &#39;b&#39;: 5, &#39;c&#39;: 1})) # Dictionary - compares the keys</snippet-file></snippet><heading level=\"2\">Maximum item</heading><paragraph>You can find the maximum item in a collection by using the <code>max()</code> function. Again, in the case of dictionaries it compares their keys.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(max([1, 2, 3])) # List\nprint(max((1, 2, 3))) # Tuple\nprint(max({1, 2, 3})) # Set\nprint(max({&#39;a&#39;: 10, &#39;b&#39;: 5, &#39;c&#39;: 1})) # Dictionary - compares the keys</snippet-file></snippet><heading level=\"2\">Sum of the items</heading><paragraph>You can find the sum of the items in a collection by using the <code>sum()</code> function. In the case of dictionaries it sums their keys (so there will be an error if the keys cannot be summed, such as when they are letters).</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(sum([1, 2, 3])) # List\nprint(sum((1, 2, 3))) # Tuple\nprint(sum({1, 2, 3})) # Set\nprint(sum({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;})) # Dictionary - sums the keys</snippet-file></snippet><heading level=\"2\">Checking if all items are true</heading><paragraph>You can check whether <italic>all</italic> the items in a collection evaluate to <code>True</code> using the <code>all</code> function. As you probably expect by now, in the case of dictionaries it checks the keys, not the values.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(all([True, True]))\nprint(all([True, False]))\nprint(all((&#39;a&#39;, &#39;b&#39;)))\nprint(all((&#39;&#39;, &#39;b&#39;)))\nprint(all({1, 2}))\nprint(all({0, 1}))\nprint(all({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}))\nprint(all({0: &#39;a&#39;, 1: &#39;b&#39;, 1: &#39;c&#39;}))</snippet-file></snippet><heading level=\"2\">Checking if any items are true</heading><paragraph>You can check whether <italic>any</italic> of the items in a collection evaluate to <code>True</code> using the <code>any</code> function. Again, in the case of dictionaries it checks the keys, not the values.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(any([True, False]))\nprint(any([False, False]))\nprint(any((&#39;&#39;, &#39;b&#39;)))\nprint(any((&#39;&#39;, 0)))\nprint(any({1, 0}))\nprint(any({0, 0}))\nprint(any({0: &#39;a&#39;, 1: &#39;b&#39;, 2: &#39;c&#39;}))\nprint(any({0: &#39;a&#39;, &#39;&#39;: &#39;b&#39;, False: &#39;c&#39;}))</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361943,
          "original_id": 336226,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Selecting elements",
          "index": 115,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Lists and tuples</heading><paragraph>The items of a list or tuple are ordered, so each one has a position in the list. An item&#39;s position is also called its <bold>index</bold>. The indexes are integers, <bold>starting from 0</bold>. So, the first item has index 0, the second item has index 1, and so on.</paragraph><paragraph>You can select items in a list or tuples by using the <bold>indexing operator</bold> <code>[]</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[0])\nprint(x[3])</snippet-file></snippet><paragraph>Indexes can also be negative. The last item has index -1, the second last item has index -2, and so on.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[-1])\nprint(x[-2])</snippet-file></snippet><paragraph>You can also use the indexing operator to get a <bold>slice</bold> of a list or tuple. The syntax for slicing is <code>[start:end]</code>, where <code>start</code> is the start index and <code>end</code> is the end index. The cuts are made just <italic>before</italic> the items at the start and end indexes, so the slice includes the start item but not the end item.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[0:3]) # Prints items with indexes 0, 1, 2</snippet-file></snippet><paragraph>Notice that <code>x[0:3]</code> returns items with index 0 to 2, rather than 0 to 3 as you might expect - this can be very confusing!</paragraph><paragraph>You can also use negative indices when slicing:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[1:-1])</snippet-file></snippet><paragraph>If you don&#39;t specify a start index then it is assumed to be zero. If you don&#39;t specify an end index then it is assumed to be the length of the list (an invalid index, but as it is excluded - this is fine and is the way to include the last element of the list). If you don&#39;t specify either then the whole list is returned.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[:3])\nprint(x[1:])\nprint(x[:])</snippet-file></snippet><paragraph>Python allows you to add a third parameter to the slice to control the <bold>step</bold>. This parameter allows you to easily extract every nth element from the list. The syntax for slicing with a step is <code>[start:end:step]</code>, where <code>step</code> is an integer.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[::2]) # Every second element\nprint(x[::3]) # Every third element\nprint(x[::-1]) # Every element in reverse\nprint(x[::-2]) # Every second element in reverse</snippet-file></snippet><heading level=\"2\">Getting a random item</heading><paragraph>It can be useful to get a random item of a collection. For lists and tuples you can use the <code>choice()</code> function of the <code>random</code> module:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">import random\nprint(random.choice([1, 2, 3, 4, 5]))\nprint(random.choice((1, 2, 3, 4, 5)))</snippet-file></snippet><heading level=\"2\">Sets</heading><paragraph>The items in a set are <italic>unordered</italic>, which means that they have no index. If you try to refer to an item in a set by using the indexing operator (square brackets notation) you will get an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;}\nprint(x[0]) # Error</snippet-file></snippet><heading level=\"2\">Dictionaries</heading><paragraph>You can access the elements of a dictionary also using the indexing operator, but in this case the indices are the <italic>keys</italic> of the dictionary, which are not necessarily integers.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nprint(scores[&#39;Alice&#39;])</snippet-file></snippet><paragraph>If there is no element with the given index then an error will occur:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nprint(scores[&#39;Steve&#39;])</snippet-file></snippet><paragraph>To allow for this you can use the <code>get()</code> method instead, which allows you to specify a default value in case there is no matching index:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nprint(scores.get(&#39;Steve&#39;, &#39;There is no such index&#39;))</snippet-file></snippet><paragraph>Note that lists and tuples do not have a <code>get()</code> method.</paragraph></document>"
        },
        {
          "id": 361951,
          "original_id": 336234,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Looping through a collection",
          "index": 116,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">For loops</heading><paragraph>It is very common to loop through the items in a collection one-by-one. A good way to do so is to use a <code>for</code> loop, which is custom-made for this kind of thing:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = ['a', 'e', 'i', 'o', 'u']\nfor v in vowels:\n    print(v)</snippet-file></snippet><paragraph>You can use this technique not just with lists but with tuples, sets and dictionaries too:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for x in (1, 2, 3): # Tuple\n    print(x) \nfor x in {1, 2, 3}: # Set\n    print(x)\nfor x in {1:'a', 2:'b', 3:'c'}: # Dictionary\n    print(x)</snippet-file></snippet><paragraph>Keep in mind that because sets are not ordered there is no guarantee in what order their items will be looped through. Try running the following piece of code a few times:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for x in {'a', 'e', 'i', 'o', 'u'}:\n    print(x)</snippet-file></snippet><paragraph>Also notice that when you loop through a dictionary it is the <italic>keys</italic> that get looped through:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for x in {1: 'a', 2: 'e', 3: 'i', 4: 'o', 5: 'u'}:\n    print(x)</snippet-file></snippet><heading level=\"2\">Variations</heading><paragraph>Sometimes when you loop through a list you will want to use the index of an item as well as its value. You can do this by using the <code>enumerate()</code> function, which returns a collection of key-value pairs for you to loop through:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = ['a', 'e', 'i', 'o', 'u']\nfor index, vowel in enumerate(vowels):\n\tprint('The vowel at index', index, 'is', vowel)</snippet-file></snippet><paragraph>You can do a similar thing with dictionaries by using the <code>items()</code> method of a dictionary:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {'Alice': 0, 'Bob': 1, 'Eve': 2, 'Mallory': 3}\nfor key, value in scores.items():\n\tprint(f'{key} scored {value}')</snippet-file></snippet><paragraph>If you want to loop through just the values of a dictionary you can use the <code>values()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {'Alice': 0, 'Bob': 1, 'Eve': 2, 'Mallory': 3}\nfor x in scores.values():\n\tprint(x)</snippet-file></snippet><heading level=\"2\">Break and continue</heading><paragraph>In Week 1 you learned about using <code>break</code> and <code>continue</code> in a while loop. They can also be used in <code>for</code> loops.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = ['a', 'e', 'i', 'o', 'u']\n\nprint('Everything before o:')\nfor v in vowels:\n    if v == 'o':\n        break\n    print(v)\nprint()\nprint('Everything except o:')\nfor v in vowels:\n    if v == 'o':\n        continue\n    print(v)</snippet-file></snippet><heading level=\"2\">Nested loops</heading><paragraph>If you are looping through a collection whose items are themselves collections then you might want to use <bold>nested</bold> loops.</paragraph><paragraph>Suppose that you have a list of lists of numbers, and you want to add up all the numbers. You could do this using nested loops:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">lists = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\ntotal = 0\nfor lst in lists:\n    for num in lst:\n        total += num\nprint(total)</snippet-file></snippet><paragraph/></document>"
        },
        {
          "id": 361953,
          "original_id": 336236,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "The range function",
          "index": 117,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>A very common thing to do when programming is to loop through a sequence of numbers. Python&#39;s <code>range()</code> function is a very useful way of creating the numbers to loop through.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for i in range(10):\n&#x9;print(i)</snippet-file></snippet><paragraph>Note that <code>range(n)</code> returns <code>n</code> integers, from <code>0</code> to  <code>n-1</code>. The number n is not included.</paragraph><paragraph>Here&#39;s how you might use it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;]\nfor i in range(len(vowels)):\n    print(&#39;The vowel at index&#39;, i, &#39;is&#39;, vowels[i])</snippet-file></snippet><paragraph>Although, you might find it more convenient in this case to use the <code>enumerate()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;]\nfor i, value in enumerate(vowels):\n&#x9;print(&#39;The vowel at index&#39;, i, &#39;is&#39;, value)</snippet-file></snippet><heading level=\"2\">What range returns</heading><paragraph>It might seem like the range function returns these numbers as a list, the list <code>[0, 1, .... , 10]</code>. But actually it doesn&#39;t. It returns a special type of object called a <bold>range</bold>. You see this by checking its type:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = range(10)\nprint(type(x))</snippet-file></snippet><paragraph>A range object is a method for generating each number as required, but not until it is required.</paragraph><paragraph>If you&#39;d like to use <code>range()</code> to get a list of numbers, you can just apply the <code>list()</code> function to it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = list(range(10))\nprint(type(x))\nprint(x)</snippet-file></snippet><paragraph>In a similar way, you could get a tuple or set of numbers.</paragraph><heading level=\"2\">Customising range</heading><paragraph>You can specify a starting value:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">for i in range(3, 10):\n&#x9;print(i)</snippet-file></snippet><paragraph>You can specify a step:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">for i in range(0, 10, 2):\n&#x9;print(i)</snippet-file></snippet><paragraph>You can work backwards by making the step negative:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for i in range(10, 0, -2):\n&#x9;print(i)</snippet-file></snippet><heading level=\"2\">Nesting ranges</heading><paragraph>You might find yourself using <code>range</code> in nested for loops:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">for i in range(1, 11):\n    for j in range(1, 11):\n        print(f&#39;{i} times {j} is {i*j}&#39;)</snippet-file></snippet><paragraph>It has become conventional to use <code>i</code>, <code>j</code>, and <code>k</code> as loop counters.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for i in range(2):\n&#x9;for j in range(2):\n&#x9;&#x9;for k in range(2):\n&#x9;&#x9;&#x9;print(i, j, k)</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361944,
          "original_id": 336227,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Adding elements",
          "index": 118,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Adding to a list</heading><paragraph>You can add an item to the end of a list by using the <code>append()</code> method:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx.append(&#39;f&#39;)\nprint(x)</snippet-file></snippet><paragraph>Notice that the <code>append()</code> method modifies the list <bold>in-place</bold> - you do not have to assign the result back to the variable. This is different from the string methods we saw last week, which do not modify strings in place, but return new values:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = &#34;Hello&#34;\nx.upper() # x not changed\nprint(x)\nx = x.upper() # x changed\nprint(x)</snippet-file></snippet><paragraph>You can insert an item at a specified index by using the <code>insert()</code> method:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx.insert(2, &#39;x&#39;) # Insert at index 2\nprint(x)</snippet-file></snippet><paragraph>You can achieve the same thing by replacing the empty slice from 2 to 2:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[2:2] = &#39;x&#39; # Insert at index 2\nprint(x)</snippet-file></snippet><paragraph>You can extend a list with the items from another list by using the <code>extend()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ny = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nx.extend(y)\nprint(x)</snippet-file></snippet><paragraph>Notice that the <code>extend()</code> method also modifies the list in-place - you do not have to assign the result back to the variable.</paragraph><paragraph>Also notice that <underline>extending by</underline> a list is different from <underline>appending</underline> a list. Compare the result of extending (above) with the result of appending (below):</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ny = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nx.append(y)\nprint(x)</snippet-file></snippet><paragraph>You can also extend a list with the items from another list using the <code>+</code> operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ny = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nx = x + y\nprint(x)</snippet-file></snippet><paragraph>Notice that the + operator does <underline>not</underline> modify the list in-place - you have to assign the result back to the variable.</paragraph><heading level=\"2\">Adding to a tuple</heading><paragraph>Because tuples are immutable you cannot add items to them.</paragraph><heading level=\"2\">Adding to a set</heading><paragraph>You can add a single item to a set by using the set&#39;s <code>add()</code> method. If the item is already in the set, Python quietly ignores the request.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">letters = {&#39;a&#39;, &#39;b&#39;}\nletters.add(&#39;c&#39;)\nprint(letters)\nletters.add(&#39;c&#39;) # No error, just not added\nprint(letters)</snippet-file></snippet><paragraph>You can add multiple items to a set by using the set&#39;s <code>update()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = set()\nvowels.update(&#39;a&#39;, &#39;e&#39;)\nprint(vowels)</snippet-file></snippet><heading level=\"2\">Adding to a dictionary</heading><paragraph>You can add an item to a dictionary by specifying a value for a new key. If the key already exists, the value for that key will be updated.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1: &#39;a&#39;, 2: &#39;b&#39;}\nx[3] = &#39;c&#39; # Item added\nprint(x)\nx[3] = &#39;d&#39; # Item updated\nprint(x)</snippet-file></snippet></document>"
        },
        {
          "id": 361945,
          "original_id": 336228,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Removing elements",
          "index": 119,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Removing from a list</heading><paragraph>You can remove an item at a specific index using a <code>del</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ndel x[1]\nprint(x)</snippet-file></snippet><paragraph>You can do the same with a slice of the list:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ndel x[1:3]\nprint(x)</snippet-file></snippet><paragraph>You can also remove a slice by setting it to the empty list:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[1:3] = [] # Items removed\nprint(x)</snippet-file></snippet><paragraph>This doesn&#39;t work for individual items:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[0] = [] # Item not removed - replaced by the empty list\nprint(x)</snippet-file></snippet><paragraph>You can also remove an item at a specific index using the <code>pop()</code> method. If <code>pop()</code> isn&#39;t given an index then the last item will be removed. The removed element is returned.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x.pop(2)) # Removes and returns item at index 2\nprint(x)\nprint(x.pop()) # Removes and returns the last item\nprint(x)</snippet-file></snippet><paragraph>You can remove the first item with a given value by using the <code>remove()</code> method:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;c&#39;]\nx.remove(&#39;c&#39;) # Only first occurrence is removed\nprint(x)</snippet-file></snippet><paragraph>You can remove all items from a list by using the <code>clear()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx.clear() # All items removed\nprint(x)</snippet-file></snippet><heading level=\"2\">Removing from a tuple</heading><paragraph>Because tuples are immutable you cannot remove items from them.</paragraph><heading level=\"2\">Removing from a set</heading><paragraph>Because a set is not ordered you cannot remove elements by index, but you can remove them by value, using the set&#39;s <code>remove()</code> or <code>discard()</code> methods. If the item is not in the set then using <code>remove()</code> will cause an error, but using <code>discard()</code> will not:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = {&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;}\nvowels.remove(&#39;a&#39;) # Removes &#39;a&#39;\nprint(vowels)\nvowels.discard(&#39;f&#39;) # No error\nprint(vowels)\nvowels.remove(&#39;f&#39;) # Error</snippet-file></snippet><paragraph>You can remove all items from a set by using the set&#39;s <code>clear()</code> method:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">vowels = {&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;}\nvowels.clear() # Remove all items\nprint(vowels)</snippet-file></snippet><heading level=\"2\">Removing from a dictionary</heading><paragraph>You can remove an element of a dictionary by key using <code>del</code> or <code>pop()</code>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">scores = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;E&#39;: 2, &#39;M&#39;: 3}\ndel scores[&#39;B&#39;] # Remove item whose key is &#39;B&#39;\nprint(scores)\nscores.pop(&#39;M&#39;) # Remove item whose key is &#39;M&#39;, and return its value\nprint(scores)</snippet-file></snippet><paragraph>You can remove all elements using <code>clear()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;E&#39;: 2, &#39;M&#39;: 3}\nscores.clear() # Remove all items\nprint(scores)</snippet-file></snippet></document>"
        },
        {
          "id": 361946,
          "original_id": 336229,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Modifying elements",
          "index": 120,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Modifying list elements</heading><paragraph>You can change the value of an item in a list by referring to it and then assigning it a new value:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[0] = &#39;z&#39; # Assign a new value\nprint(x)</snippet-file></snippet><paragraph>You can also assign to a slice with a sequence:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[0:1] = [&#39;x&#39;, &#39;y&#39;] # Assign new values\nprint(x)</snippet-file></snippet><heading level=\"2\">Modifying tuple elements</heading><paragraph>Since tuples are immutable, you cannot change which objects are in the tuple:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (0, 2, 3)\nx[0] = 1 # Error - cannot change which objects are in the tuple</snippet-file></snippet><paragraph>But if one of those objects is itself mutable, then you can change the nature of that object. Suppose the first element of a tuple is a list, for example. You can change the elements of this list, even though the list is part of a tuple. That&#39;s because you&#39;re not changing <italic>which</italic> objects are in the tuple - you&#39;re just changing the nature of one of those objects. It&#39;s not a good idea to do this, though - it goes against the spirit of using tuples to signal that your data should not change.</paragraph><heading level=\"2\">Modifying set elements</heading><paragraph>You can&#39;t change an element of a set, but you remove it and then add a different element:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1, 2, 3}\nx.remove(3)\nx.add(4)\nprint(x)</snippet-file></snippet><heading level=\"2\">Modifying dictionary elements</heading><paragraph>Updating an item in a dictionary is similar to updating an item in a list.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nscores[&#39;Bob&#39;] = 900\nscores[&#39;Alice&#39;] += 1\nprint(scores)</snippet-file></snippet><heading level=\"2\"></heading></document>"
        },
        {
          "id": 361947,
          "original_id": 336230,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Sorting elements",
          "index": 121,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Sorting a list</heading><paragraph>You can sort the elements of a list by using the <code>sort()</code> method, which orders the items by comparing their values using the <code>&lt;</code> operator. Note that this method sorts the list <bold>in-place</bold> - it does not return a new list.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort()\nprint(x)\n\nx = [&#39;c&#39;, &#39;a&#39;, &#39;e&#39;, &#39;b&#39;, &#39;d&#39;]\nx.sort()\nprint(x)</snippet-file></snippet><paragraph>You can sort the elements in descending order by passing the keyword argument <code>reverse = True</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort(reverse = True)\nprint(x)</snippet-file></snippet><paragraph>You could also achieve this by sorting them in ascending order and then reversing the list, using the <code>reverse()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort()\nx.reverse()\nprint(x)</snippet-file></snippet><paragraph>Note that reversing a list is not the same thing as sorting it in descending order:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort(reverse = True)\nprint(x)\nx = [1, 5, 4, 2, 3]\nx.reverse()\nprint(x)</snippet-file></snippet><paragraph>Also note that if you have a list of lists the <code>reverse()</code> method only reverses the topmost level of lists:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">numbers = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\nnumbers.reverse()\nprint(numbers)</snippet-file></snippet><heading level=\"2\">Sorting uppercase and lowercase</heading><paragraph>Somewhat surprisingly, Python sorts all uppercase characters before all lowercase characters. So &#39;B&#39; comes before &#39;a&#39;. Try it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;A&#39;, &#39;b&#39;, &#39;B&#39;, &#39;c&#39;, &#39;C&#39;]\nx.sort()\nprint(x)</snippet-file></snippet><paragraph>The reason for this is that Python sorts characters according to their ASCII numeric value, and the ASCII values of uppercase characters are lower than the ASCII values of lowercase characters. You can see this, by using the <code>ord()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(ord(&#39;a&#39;))\nprint(ord(&#39;A&#39;))\nprint(ord(&#39;b&#39;))\nprint(ord(&#39;B&#39;))\nprint(ord(&#39;c&#39;))\nprint(ord(&#39;C&#39;))</snippet-file></snippet><heading level=\"2\">Sorting with a function</heading><paragraph>Suppose you have a list of words and you want to sort them by length. If you use the bare <code>sort()</code> method then you will get the wrong result - it will sort them alphabetically:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;dog&#39;, &#39;chicken&#39;, &#39;mouse&#39;, &#39;horse&#39;, &#39;goat&#39;, &#39;donkey&#39;]\nx.sort()\nprint(x)</snippet-file></snippet><paragraph>In this case you need to specify a <code>key</code>, which is a function that returns, for each item in the list, the value that you&#39;d like to sort the item by. In this case we&#39;d like to sort items by length, so we can use the <code>len()</code> function:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;dog&#39;, &#39;chicken&#39;, &#39;mouse&#39;, &#39;horse&#39;, &#39;goat&#39;, &#39;donkey&#39;]\nx.sort(key = len)\nprint(x)</snippet-file></snippet><paragraph>Later you will learn how to define your own functions. This will allow you to do even more sophisticated sorting.</paragraph><heading level=\"2\">What about tuples, sets and dictionaries?</heading><paragraph>Since tuples are immutable they cannot be sorted, so tuples do not have a <code>sort()</code> method.</paragraph><paragraph>Since the elements in a set are not ordered it doesn&#39;t make sense to sort them (you cannot be guaranteed of getting them back in any particular order), so sets do not have a <code>sort()</code> method.</paragraph><paragraph>Although the elements of a dictionary are ordered, they are always in <bold>insertion order</bold> - the order in which they were inserted into the dictionary. So it doesn&#39;t make sense to sort a dictionary, and dictionaries do not have a <code>sort()</code> method. </paragraph><paragraph>You can, however, create a sorted <italic>list</italic> from these things, using Python&#39;s <code>sorted()</code> function.</paragraph><heading level=\"2\">The sorted function</heading><paragraph>The <code>sorted()</code> function takes a collection and returns a list of its items sorted in ascending order. It leaves the original collection unchanged (so it can be used on tuples). Note that in the case of a dictionary it returns the keys of the dictionary, sorted.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (1, 5, 4, 2, 3) # Tuple\nprint(sorted(x)) # Returns a new list, sorted\n\nx = {1, 5, 4, 2, 3} # Set\nprint(sorted(x)) # Returns a new list, sorted\n\nx = {1:&#39;f&#39;, 5:&#39;a&#39;, 4:&#39;b&#39;, 2:&#39;d&#39;, 3:&#39;c&#39;} # Dictionary\nprint(sorted(x)) # Returns a new list, from the keys, sorted\n</snippet-file></snippet><paragraph>If you want the resulting list in descending order, pass the argument <code>reverse = True</code>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = (1, 5, 4, 2, 3)\nprint(sorted(x, reverse = True))\n\nx = {1, 5, 4, 2, 3} # Set\nprint(sorted(x, reverse = True))\n\nx = {1:&#39;f&#39;, 5:&#39;a&#39;, 4:&#39;b&#39;, 2:&#39;d&#39;, 3:&#39;c&#39;}\nprint(sorted(x, reverse = True))\n</snippet-file></snippet></document>"
        },
        {
          "id": 361948,
          "original_id": 336231,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Joining elements",
          "index": 122,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You can join the elements of a collection into a string, as long as they are themselves strings. The method by which you do this is somewhat counterintuitive: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ns = &#39;,&#39;.join(x)\nprint(s)</snippet-file></snippet><paragraph>To join the elements of the list into a string using commas to separate the items, you call the <code>join()</code> method on the comma string, and supply the list as an argument.</paragraph><paragraph>You can use whatever separator you want:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(&#39;, &#39;.join(x))\nprint(&#39; &#39;.join(x))\nprint(&#39;--&#39;.join(x))\nprint(&#39; then &#39;.join(x))</snippet-file></snippet><paragraph>This technique works for tuples, sets and dictionaries too (in the case of dictionaries it is the keys that get joined, and they must be strings):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) # Tuple\nprint(&#39;-&#39;.join(x))\n\nx = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;} # Set\nprint(&#39;-&#39;.join(x))\n\nx = {&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3, &#39;d&#39;:4, &#39;e&#39;:5} # Dictionary\nprint(&#39;-&#39;.join(x))</snippet-file></snippet></document>"
        },
        {
          "id": 361949,
          "original_id": 336232,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Special string operations",
          "index": 123,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Strings as tuples</heading><paragraph>In Python we can think of a string as <bold>a tuple of characters</bold>.</paragraph><paragraph>This means that you can access the characters in a string in the same ways that you can access the items in a tuple, using the <code>[]</code> indexing operator. You can select individual characters this way, and you can select slices of characters, which are substrings:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = &#39;Hello&#39;\nprint(x[1]) # Individual character\nprint(x[1:3]) # Slice\nprint(x[2:-1]) # Slice</snippet-file></snippet><paragraph>But you cannot reassign individual characters:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = &#39;Hello&#39;\nx[1] = &#39;J&#39;\nprint(x) # Error</snippet-file></snippet><heading level=\"2\">Splitting strings</heading><paragraph>One of the most useful methods available for string objects is the <code>split()</code> method. This breaks a string into a <bold>list of substrings</bold> that are separated by a delimiter.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">y = &#39;The cat sat on the mat&#39;\nprint(y.split(&#39; &#39;)) # Split using &#39; &#39; as the delimiter \n\nz = &#39;12:30:45&#39;\nprint(z.split(&#39;:&#39;)) # Split using &#39;:&#39; as the delimiter</snippet-file></snippet><paragraph>Note that the delimiter is not included in the substrings.</paragraph></document>"
        },
        {
          "id": 361950,
          "original_id": 336233,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Special set operations",
          "index": 124,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>There are special operations that you can perform on sets.</paragraph><heading level=\"2\">Union</heading><paragraph>The <bold>union</bold> of two sets is the set of items that belong to <italic>either or both</italic> sets:</paragraph><figure><image height=\"194\" src=\"https://static.edusercontent.com/files/y6pqKcqjeZZlRV0pHIdRafBh\" width=\"300\"></image></figure><paragraph>You can get the union of two sets using either the <code>|</code> operator or the <code>union()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens | primes)\nprint(evens.union(primes))\nprint(primes.union(evens))</snippet-file></snippet><heading level=\"2\">Intersection</heading><paragraph>The <bold>intersection</bold> of two sets is the set of items that belong to <italic>both</italic> sets:</paragraph><figure><image src=\"https://static.edusercontent.com/files/nCFjgUjjfBrZrp8qNiu5dvSR\" width=\"320\" height=\"207\"></image></figure><paragraph>You can get the intersection of two sets using either the <code>&amp;</code> operator or the <code>intersection()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens &amp; primes)\nprint(evens.intersection(primes))\nprint(primes.intersection(evens))</snippet-file></snippet><heading level=\"2\">Difference</heading><paragraph>The <bold>difference</bold> between set A and set B is the set of items that belong to A but not B:</paragraph><figure><image src=\"https://static.edusercontent.com/files/hb7n06ncCOn6e0BZTWevn589\" width=\"330\" height=\"214\"></image></figure><paragraph>You can get the difference between two sets using either the <code>-</code> operator or the <code>difference()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens - primes)\nprint(evens.difference(primes))\nprint(primes - evens)\nprint(primes.difference(evens))</snippet-file></snippet><heading level=\"2\">Symmetric difference</heading><paragraph>The <bold>symmetric difference</bold> between set A and set B is the set of items that belong to A but not B, or to B but not A.</paragraph><paragraph>You can get the symmetric difference between two sets using the <code>symmetric_difference()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens.symmetric_difference(primes))\nprint(primes.symmetric_difference(evens))</snippet-file></snippet><heading level=\"2\">Comparing sets</heading><paragraph>Two sets are <bold>disjoint</bold> when they have no elements in common.</paragraph><paragraph>You can check whether two sets are disjoint using the <code>isdisjoint()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens.isdisjoint(primes))\nprint(primes.isdisjoint(evens))</snippet-file></snippet><paragraph>A set A is a <bold>subset</bold> of a set B when every element of A is also an element of B. We also say, in this case, that B is a <bold>superset</bold> of A.</paragraph><paragraph>You can check whether one set is a subset of another using either the <code>&lt;=</code> operator or the <code>issubset()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">A = {2, 3}\nB = {2, 3, 6, 7}\nC = {4, 5, 6, 7}\nprint(A.issubset(B))\nprint(A &lt;= B)\nprint(A.issubset(C))\nprint(A &lt;= C)</snippet-file></snippet><paragraph>Similarly, you can check whether one set is a superset of another using either the <code>&gt;=</code> operator or the <code>issuperset()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">A = {2, 3}\nB = {2, 3, 6, 7}\nC = {4, 5, 6, 7}\nprint(B.issuperset(A))\nprint(B &gt;= A)\nprint(C.issuperset(A))\nprint(C &gt;= A)</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361952,
          "original_id": 336235,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Comprehensions",
          "index": 125,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">List comprehensions</heading><paragraph>Suppose you have a list of words and you&#39;d like a list of their lengths. You could get it by using a <code>for</code> loop:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = []\nfor word in words:\n    lengths.append(len(word))\nprint(lengths)</snippet-file></snippet><paragraph>Python provides a more elegant way to do this - a <bold>list comprehension</bold>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = [len(word) for word in words]\nprint(lengths)</snippet-file></snippet><paragraph>The expression <code>[len(word) for word in words]</code> is the <bold>list</bold> comprehension. Note that it is an expression, rather than a block of statements.</paragraph><paragraph>You can add a condition to the comprehension. Suppose you only want to include words that are more than three letters long. Then you could use the following:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = [len(word) for word in words if len(word) &gt; 3]\nprint(lengths)</snippet-file></snippet><paragraph>This is a very useful way of filtering out elements from a list. Here is another example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">nums = [2, 12, 4, 2, 9, 10, 11, 1, 15, 23]\nnums = [x for x in nums if x &gt;= 10]\nprint(nums)</snippet-file></snippet><paragraph>In a previous example we used nested <code>for</code> loops to sum the numbers in a list of lists of numbers. We can do it using list comprehensions:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">lists = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\ntotal = sum([sum(x) for x in lists])\nprint(total)</snippet-file></snippet><heading level=\"2\">Set comprehensions</heading><paragraph>If you would like a <italic>set</italic> of lengths rather than a list of lengths then you could use a <bold>set comprehension</bold>, which is just the same but with curly brackets:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nunique_lengths = {len(word) for word in words}\nprint(unique_lengths)</snippet-file></snippet><paragraph>Note that duplicate values are automatically removed from the set.</paragraph><heading level=\"2\">Dictionary comprehensions</heading><paragraph>You can also create a dictionary using a <bold>dictionary comprehension</bold>. Here is a slightly different example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nwords_with_lengths = {word: len(word) for word in words}\nprint(words_with_lengths)</snippet-file></snippet><heading level=\"2\">What about a tuple comprehension?</heading><paragraph>Alas, there is no tuple comprehension. You can use the same sort of construction, but it will give you a <bold>generator</bold>, not a tuple (more about generators next week).</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = (len(word) for word in words)\nprint(lengths)</snippet-file></snippet></document>"
        },
        {
          "id": 361954,
          "original_id": 336237,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Files as lists",
          "index": 126,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Just as we can think of a string as a tuple of characters, we can think of a file as <bold>a list of lines</bold>. Python provides two useful methods that take advantage of this.</paragraph><heading level=\"2\">Readlines</heading><paragraph>We saw in Week 1 that you can read the content of a text file into a string, using the <code>read()</code> method.  The <code>readlines()</code> method allows you to read the contents into a list of lines instead. This allows you to use a <code>for</code> statement to loop through the lines of a file one-by-one.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Add some lines to a file\nwith open(&#39;myfile&#39;, &#39;w&#39;) as file:\n    file.write(&#39;This is the first line\\n&#39;)\n    file.write(&#39;This is the second line\\n&#39;)\n    file.write(&#39;This is the third line&#39;)\n\n# Inspect the results\nwith open(&#39;myfile&#39;, &#39;r&#39;) as file:\n    lines = file.readlines()\n    print(f&#39;The file contains {len(lines)} lines.&#39;)\n    for line in lines:\n        print(f&#39;Line: {line}&#39;)</snippet-file></snippet><paragraph>Notice the newline character is included in each line. You will typically want to remove that using the <code>strip()</code> method of a string. </paragraph><heading level=\"2\">Writelines</heading><paragraph>The <code>writelines()</code> method lets you write multiple lines to a file, given as a list of strings. Note that each line in the list should be terminated with a newline character (&#39;\\n&#39;) otherwise <code>writelines()</code> will concatenate the content onto a single line.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">LINES = [\n    &#39;This is the first line\\n&#39;,\n    &#39;This is the second line\\n&#39;,\n    &#39;This is the third line&#39;\n]\n\n# Write these lines to a file\nwith open(&#39;myfile&#39;, &#39;w&#39;) as file:\n    file.writelines(LINES)\n\n# Inspect the results\nwith open(&#39;myfile&#39;, &#39;r&#39;) as file:\n    print(file.read())</snippet-file></snippet><heading level=\"2\">Reading CSV files</heading><paragraph>You might sometimes want to read a CSV file. Python provides a convenient way of reading a CSV file and parsing it into a list of lists. You need to import the <code>csv</code> module to use this feature of Python.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import csv\n\n# Create a CSV file to experiment with\nwith open(&#39;myfile&#39;, &#39;w&#39;) as file:\n    file.write(&#39;a,b,c\\n&#39;)\n    file.write(&#39;d,e,f\\n&#39;)\n    file.write(&#39;g,h,i\\n&#39;)\n\n# Read the CSV file\nwith open(&#39;myfile&#39;, &#39;r&#39;) as file:\n    lst = list(csv.reader(file))\n    print(lst)</snippet-file></snippet></document>"
        },
        {
          "id": 361955,
          "original_id": 336238,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Dates and times",
          "index": 127,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>This is not related to collections, but now is a good time to talk about Python&#39;s facilities for working with dates and times.</paragraph><paragraph>When working with real-world data you often have to deal with dates and times. Date and times can be tricky to work with, because people format and present them in different ways. Consider, for example, a date written as &#34;02-03-1998&#34;. Does this represent 2nd March 1998, or 3rd February 1998? In Australia it would be the former, but in the US it would be the latter.</paragraph><paragraph>Python has a <code>datetime</code> library that defines <code>datetime</code> , <code>date</code>, and <code>time</code> types. These provide a uniform and comprehensive way to handle dates and times. The <code>datetime</code> type is the most flexible and thus the most commonly used. There is also a <code>timedelta</code> type, which is used to work with durations (i.e., time intervals).</paragraph><paragraph>To use these you need to import them:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">from datetime import datetime, date, time, timedelta</snippet-file></snippet><paragraph>You don&#39;t need to import them all - just the ones you will be using.</paragraph><paragraph>Usually your goal will be to convert a string or integer representation of a date or time into a <code>datetime</code> object, apply whatever processing you need to the object, and then use a formatting function to convert it back to a traditional format.</paragraph><heading level=\"2\">Creating a datetime object</heading><paragraph>There are several ways to create a datetime object.</paragraph><paragraph>You can directly construct it by providing the year, month, and day, and, optionally, the time and timezone.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt)</snippet-file></snippet><paragraph>You can also construct it from a string. In this case you need to tell Python what format the string uses:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime.strptime(&#39;24-06-1968, 05:30:00&#39;, &#39;%d-%m-%Y, %H:%M:%S&#39;)\nprint(dt)</snippet-file></snippet><paragraph>The trickiest part about this is remembering what the formatting codes are. You&#39;ll probably find yourself looking them up quite often. Here are the main ones:</paragraph><pre>%Y Four-digit year (1968)\n%y Two-digit year (68)\n\n%B Full month name (June)\n%b Abbreviated month name (Jun)\n%m Two-digit month number (01-12)\n\n%A Full day name (Monday)\n%a Abbreviated day name (Mon)\n%d Two-digit day number (01-31)\n\n%H Two-digit hour (00-23)\n%I Two-digit hour (00-12)\n\n%M Two-digit minute (00-59)\n%S Two-digit second (00-59)\n\n%p AM/PM</pre><paragraph>If you want a datetime object that represents the current date and time you can use the <code>now</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime.now()\nprint(dt)</snippet-file></snippet><heading level=\"2\">Unix timestamp</heading><paragraph>You can also construct a datetime object from a Unix timestamp. This is one of the most common representations of time.  It represents the time as a numerical value - the number of seconds since the Unix epoch, which was at 00:00:00 on Thursday, 1 January 1970 UTC. You can get the current Unix timestamp using the <code>time.time</code> function.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from time import time\nprint(time())</snippet-file></snippet><paragraph>To create a datetime object from a Unix timestamp you can use use <code>datetime.fromtimestamp()</code>.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">from datetime import datetime\nx = datetime.fromtimestamp(1565315907)\nprint(x)</snippet-file></snippet><heading level=\"2\">Extracting the components of a datetime object</heading><paragraph>Once you have a datetime object you can extract its individual components:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt.year)\nprint(dt.month)\nprint(dt.day)\nprint(dt.hour)\nprint(dt.minute)\nprint(dt.second)</snippet-file></snippet><paragraph>You can also extract a date object or a time object from a datetime object:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt.date())\nprint(dt.time())</snippet-file></snippet><heading level=\"2\">Formatting a datetime object as a string</heading><paragraph>A very common thing to do is to present a datetime object in a certain format. You can use the <code>strftime</code> method, to do this. You need to specify the format you would like, using the same formatting codes as listed above.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt.strftime(&#39;%d %B %Y, at %I:%M %p&#39;))</snippet-file></snippet><heading level=\"2\">Operating on datetime objects</heading><paragraph>One of the most useful features of datetime objects is that you can very easily calculate new dates and times. The datetime module is so nicely designed that the following examples should be self-explanatory:</paragraph><paragraph>First example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime, timedelta\n\nnow = datetime.now()\nprint(now + timedelta(hours=1))\nprint(now + timedelta(days=1))\nprint(now - timedelta(weeks=2))\nprint(now + timedelta(weeks=4, days=3, hours=2, seconds=45))</snippet-file></snippet><paragraph>Second example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime, timedelta\n\nnew_years_eve = datetime(year=2024, month=12, day=31)\nnow = datetime.now()\ntime_remaining = new_years_eve - now\nprint(time_remaining)</snippet-file></snippet><paragraph>Third example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime, timedelta\n\nmy_birthday = datetime(year=1988, month=6, day=24)\nnow = datetime.now()\nmy_age = now - my_birthday\nprint(my_age)</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361956,
          "original_id": 336239,
          "lesson_id": 53304,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Further reading",
          "index": 128,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.330126+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com</paragraph></list-item></list><paragraph></paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 2 - Lists, Tuples, Sets, and Dictionaries",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:39.813331+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53319,
      "index": 12,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47899,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362018,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362019,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362020,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362021,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362022,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362018,
          "original_id": 326150,
          "lesson_id": 53319,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Euler's sieve",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.813331+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/fbw8Yy59BTV20YAaL3YShFLd"
        },
        {
          "id": 362019,
          "original_id": 326152,
          "lesson_id": 53319,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Euler's sieve",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.813331+10:00",
          "updated_at": null,
          "challenge_id": 119341,
          "content": ""
        },
        {
          "id": 362020,
          "original_id": 326153,
          "lesson_id": 53319,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "euler_sieve_v1.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.813331+10:00",
          "updated_at": null,
          "challenge_id": 119342,
          "content": ""
        },
        {
          "id": 362021,
          "original_id": 326154,
          "lesson_id": 53319,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "euler_sieve_v2.py",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.813331+10:00",
          "updated_at": null,
          "challenge_id": 119343,
          "content": ""
        },
        {
          "id": 362022,
          "original_id": 326155,
          "lesson_id": 53319,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Euler's sieve",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:39.813331+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/1tyK8Mw8_ro"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week  5 - Notes 7 Euler's Sieve",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:40.175001+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53320,
      "index": 12,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 51164,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 362023,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362024,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362023,
          "original_id": 346553,
          "lesson_id": 53320,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 7 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.175001+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 7 Tuesday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> will be released today <bold>@ 7.15pm</bold></paragraph></list-item><list-item><paragraph><bold>Quiz 4</bold> worth <bold>4 marks</bold> is due <bold>Week 7 Thursday 11/7/24 @ 9pm</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Notes 6  <bold>Eratosthenes' Sieve</bold> (cont'd) - 2nd optimised approach<break/></paragraph></list-item><list-item><paragraph> Notes 7 <bold>Euler's Sieve</bold><break/></paragraph></list-item><list-item><paragraph>Plotting with Matplotlib<break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Quiz 4</bold><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Assignment 2</bold><break/></paragraph></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>Sieve of Euler<break/><link href=\"https://programmingpraxis.com/2011/02/25/sieve-of-euler/\">https://programmingpraxis.com/2011/02/25/sieve-of-euler/</link><break/></paragraph></list-item><list-item><paragraph><code>zip()</code> Function<break/><link href=\"https://www.w3schools.com/python/ref_func_zip.asp\">https://www.w3schools.com/python/ref_func_zip.asp</link><break/></paragraph></list-item><list-item><paragraph><code>zip_longest()</code> from <code>itertools</code> module<break/><link href=\"https://www.geeksforgeeks.org/python-itertools-zip_longest/\">https://www.geeksforgeeks.org/python-itertools-zip_longest/</link> </paragraph></list-item></list></document>"
        },
        {
          "id": 362024,
          "original_id": 346554,
          "lesson_id": 53320,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 7 Thursday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.175001+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 7 Thursday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Sample Final Exam Questions</bold> released</paragraph></list-item><list-item><paragraph><bold>Quiz 5</bold> worth <bold>4 marks</bold> will be released <bold>today @ 7.15pm</bold></paragraph></list-item><list-item><paragraph><bold>Quiz 4</bold> worth <bold>4 marks</bold> is due <bold>today @ 9pm</bold></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday 5/8/24 @ 10am</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content </heading><list style=\"number\"><list-item><paragraph>Week 7 Notes 8 Card shuffling</paragraph><list style=\"bullet\"><list-item><paragraph>Unicode character set</paragraph></list-item><list-item><paragraph>List comprehension</paragraph></list-item><list-item><paragraph>String <code>join()</code> method</paragraph></list-item><list-item><paragraph>List <code>extend()</code> method</paragraph></list-item><list-item><paragraph>slices</paragraph></list-item><list-item><paragraph><code>getsizeof()</code> from the <code>sys</code> module</paragraph></list-item><list-item><paragraph>Command line arguments<break/></paragraph></list-item></list></list-item><list-item><paragraph>Week 7 Notes 9 US Social Security Data on Given Names</paragraph><list style=\"bullet\"><list-item><paragraph>Files and folders manipulation</paragraph></list-item><list-item><paragraph><code>csv</code> built-in module</paragraph></list-item><list-item><paragraph><code>os</code> built-in module<break/></paragraph></list-item></list></list-item><list-item><paragraph>Discuss <bold>Quiz 4</bold><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Assignment 2</bold><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Quiz 5</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>Playing cards in Unicode<break/><link href=\"https://en.wikipedia.org/wiki/Playing_cards_in_Unicode\">https://en.wikipedia.org/wiki/Playing_cards_in_Unicode</link><break/></paragraph></list-item><list-item><paragraph><bold>defaultdict</bold> (same as <bold>dict</bold> but never raises a <bold>KeyError</bold>)<break/><link href=\"https://www.geeksforgeeks.org/defaultdict-in-python/\">https://www.geeksforgeeks.org/defaultdict-in-python/</link><break/></paragraph></list-item><list-item><paragraph>Python <code>os</code> Module<break/><link href=\"https://www.w3schools.com/python/module_os.asp\">https://www.w3schools.com/python/module_os.asp</link></paragraph></list-item></list><paragraph/></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 7 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:40.213174+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-25T11:15:52.816024+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53321,
      "index": 13,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 362026,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47900,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362026,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362027,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362028,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362029,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362030,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362026,
          "original_id": 326157,
          "lesson_id": 53321,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Card shuffling",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.213174+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/PcI2Sr1OOTEUG944d0ZmIjtH"
        },
        {
          "id": 362027,
          "original_id": 326158,
          "lesson_id": 53321,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful link about playing cards in Unicode",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.213174+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Playing cards in Unicode<break></break><link href=\"https://en.wikipedia.org/wiki/Playing_cards_in_Unicode\">https://en.wikipedia.org/wiki/Playing_cards_in_Unicode</link></paragraph></list-item></list><paragraph></paragraph></document>"
        },
        {
          "id": 362028,
          "original_id": 326159,
          "lesson_id": 53321,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Card shuffling",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.213174+10:00",
          "updated_at": null,
          "challenge_id": 119344,
          "content": ""
        },
        {
          "id": 362029,
          "original_id": 326160,
          "lesson_id": 53321,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "card_shuffling.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.213174+10:00",
          "updated_at": null,
          "challenge_id": 119345,
          "content": ""
        },
        {
          "id": 362030,
          "original_id": 326161,
          "lesson_id": 53321,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Card shuffling",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:40.213174+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/4LVGWGZwzPs"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 7 - Notes 8 Card Shuffling",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:43.93153+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53330,
      "index": 19,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 51654,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 3,
      "slide_marks_summary": [
        {
          "id": 398949,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362068,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362069,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 398949,
          "original_id": null,
          "lesson_id": 53330,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Constructive Feedback",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-30T16:14:50.847414+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/1BQIEjqfyUtaNaae99lwfBaz"
        },
        {
          "id": 362068,
          "original_id": 351471,
          "lesson_id": 53330,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 10 Tuesday To Do List",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.93153+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 10 Tuesday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><link href=\"https://myexperience.unsw.edu.au/unsw/\"><bold>myExperience</bold></link> Survey<break/><break/></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday 5/8/24 @ 10am</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Final Exam</bold> worth <bold>50 marks</bold> to be held on <bold>Wednesday 21 August 2024</bold></paragraph><list style=\"bullet\"><list-item><paragraph><bold>Morning (11:15-13:30)</bold></paragraph></list-item><list-item><paragraph><bold>Afternoon (13:20-16:10)</bold><break/><break/></paragraph></list-item></list></list-item><list-item><paragraph><bold>Session preference</bold> <bold>form</bold> <link href=\"https://cgi.cse.unsw.edu.au/~exam/24T2/seating/register.cgi\">https://cgi.cse.unsw.edu.au/~exam/24T2/seating/register.cgi</link><break/>Closes <bold>Midday Week 10 Friday 2nd August 2024</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Seating allocations</bold> together with <bold>exact time and location</bold> released <bold>Mid Week 11 (Study Break)</bold><break/><break/></paragraph></list-item><list-item><paragraph>More on <bold>Final Exam</bold> in our last <bold>review</bold> class on <bold>Thursday Week 10</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Week 10 Notes 15 <bold>Context Free Grammars</bold></paragraph><list style=\"bullet\"><list-item><paragraph>The Unicode of the alphabet character <bold>ε</bold> is <bold>03B5</bold> (hexadecimal) or <bold>949</bold> (decimal)<break/><code>chr(949)</code> or <code>chr(0x03B5)</code><break/><break/></paragraph></list-item></list></list-item><list-item><paragraph>Week 10 Notes 16 <bold>Three Special Perfect Squares</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Searching and Sorting</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>Context-free grammar<break/><link href=\"https://en.wikipedia.org/wiki/Context-free_grammar\">https://en.wikipedia.org/wiki/Context-free_grammar</link><break/><break/></paragraph></list-item><list-item><paragraph>Context-sensitive grammar<break/><link href=\"https://en.wikipedia.org/wiki/Context-sensitive_grammar\">https://en.wikipedia.org/wiki/Context-sensitive_grammar</link><break/></paragraph></list-item></list></document>"
        },
        {
          "id": 362069,
          "original_id": 351472,
          "lesson_id": 53330,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 10 Thursday To Do List",
          "index": 12,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.93153+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 10 Thursday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><link href=\"https://myexperience.unsw.edu.au/unsw/\"><bold>myExperience</bold></link> Survey<break/><break/></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday 5/8/24 @ 10am</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Final Exam</bold> worth <bold>50 marks</bold> to be held on <bold>Wednesday 21 August 2024</bold></paragraph><list style=\"bullet\"><list-item><paragraph><bold>Morning (11:15-13:30)</bold></paragraph></list-item><list-item><paragraph><bold>Afternoon (13:20-16:10)</bold><break/><break/></paragraph></list-item></list></list-item><list-item><paragraph><bold>Session preference</bold> <bold>form</bold> <link href=\"https://cgi.cse.unsw.edu.au/~exam/24T2/seating/register.cgi\">https://cgi.cse.unsw.edu.au/~exam/24T2/seating/register.cgi</link><break/>Closes <bold>Midday Week 10 Friday 2nd August 2024</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Seating allocations</bold> together with <bold>exact time and location</bold> released <bold>Mid Week 11 (Study Break)</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Final Exam Environment</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph><bold>Searching and Sorting</bold> (cont'd)<break/><break/></paragraph></list-item><list-item><paragraph><bold>Review</bold><break/><break/></paragraph></list-item><list-item><paragraph>Solve <bold>Sample Exam Question 8</bold><break/><break/></paragraph></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>itertools.permutations<break/><link href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\">https://docs.python.org/3/library/itertools.html#itertools.permutations</link></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 10 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.901929+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53310,
      "index": 6,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 50613,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 361975,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361976,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361975,
          "original_id": 342262,
          "lesson_id": 53310,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 4 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.901929+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 4 Tuesday To Do List</heading><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><link href=\"https://edstem.org/au/courses/16645/lessons/53292/slides/361906\">How to Use Jupyter Notebook: A Beginner’s Tutorial</link> (added to <bold>Ed Lessons General</bold>)</paragraph></list-item><list-item><paragraph>For an example of exam questions using <bold>doctest</bold>, see <link href=\"https://edstem.org/au/courses/16645/lessons/55026/slides/372902\">Exam Questions with Doctest</link></paragraph></list-item><list-item><paragraph><bold>Quiz 1</bold> marks and sample solution released</paragraph></list-item><list-item><paragraph><bold>Quiz 2</bold> worth <bold>4 marks</bold> is due <bold>Week 4 Thursday @ 9pm</bold></paragraph></list-item><list-item><paragraph><bold>Assignment 1</bold> worth <bold>13 marks</bold> is due <bold>Week 7 Monday @ 10am</bold></paragraph></list-item></list><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Briefly continue discussing Week 3 - Notes 2 The Monty Hall Problem</paragraph></list-item><list-item><paragraph>Modules and Recursion</paragraph></list-item><list-item><paragraph>Week 4 - Notes 3 The Towers of Hanoi</paragraph></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>doctest — Test interactive Python examples (will be used for final exam questions)<break/><link href=\"https://docs.python.org/3/library/doctest.html\">https://docs.python.org/3/library/doctest.html</link></paragraph></list-item><list-item><paragraph>timeit — Measure execution time of small code snippets<break/><link href=\"https://docs.python.org/3/library/timeit.html\">https://docs.python.org/3/library/timeit.html</link></paragraph></list-item></list><paragraph/><paragraph/></document>"
        },
        {
          "id": 361976,
          "original_id": 342263,
          "lesson_id": 53310,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 4 Thursday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.901929+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 4 Thursday To Do List</heading><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 3</bold> worth <bold>4 marks</bold> will be released <bold>today @ 7.15pm</bold></paragraph></list-item><list-item><paragraph><bold>Quiz 2</bold> worth <bold>4 marks</bold> is due <bold>today @ 9pm</bold></paragraph></list-item><list-item><paragraph><bold>Assignment 1</bold> worth <bold>13 marks</bold> is due <bold>Week 7 Monday @ 10am</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Continue Week 4 - Notes 3 The Towers of Hanoi<break/></paragraph></list-item><list-item><paragraph>Week 4 - Notes 4 The Fibonacci Sequence</paragraph></list-item></list><list style=\"number\"><list-item><list style=\"bullet\"><list-item><paragraph><code>yield</code> statement</paragraph></list-item><list-item><paragraph><code>functools</code> module</paragraph></list-item><list-item><paragraph><code>itertools</code> module</paragraph></list-item><list-item><paragraph><code>islice()</code> function from <code>itertools</code> module</paragraph></list-item><list-item><paragraph><code>lru_cache()</code> function from <code>functools</code> module<break/></paragraph></list-item></list></list-item><list-item><paragraph>Week 4 - Notes 5 From Decimal Expansions to Reduced Fractions</paragraph><list style=\"bullet\"><list-item><paragraph>Using <code>_</code> as thousands separator, for instance, <code>10_000</code></paragraph></list-item><list-item><paragraph><code>gcd()</code> (greatest common divisor) function</paragraph></list-item><list-item><paragraph><code>/</code>, <code>//</code>, and <code>%</code> operators</paragraph></list-item><list-item><paragraph><code>divmod()</code> function</paragraph></list-item><list-item><paragraph><code>bool()</code> function when condition is not a boolean expression</paragraph></list-item><list-item><paragraph><bold>Unpacking</bold> tuple elements into function arguments</paragraph></list-item></list></list-item></list><paragraph/><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>When to use <code>yield</code> instead of <code>return</code> in Python?<break/><link href=\"https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/\">https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/</link><break/></paragraph></list-item><list-item><paragraph>Python <code>next()</code> Function<break/><link href=\"https://www.w3schools.com/python/ref_func_next.asp\">https://www.w3schools.com/python/ref_func_next.asp</link><break/></paragraph></list-item><list-item><paragraph><code>functools</code> module — Higher-order functions and operations on callable objects<break/><link href=\"https://docs.python.org/3/library/functools.html\">https://docs.python.org/3/library/functools.html</link><break/></paragraph></list-item><list-item><paragraph><code>itertools</code> module — Functions creating iterators for efficient looping<break/><link href=\"https://docs.python.org/3/library/itertools.html\">https://docs.python.org/3/library/itertools.html</link></paragraph></list-item></list><paragraph/></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 4 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.937984+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53311,
      "index": 7,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47897,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 6,
      "slide_marks_summary": [
        {
          "id": 361977,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361978,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361979,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361980,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361981,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361982,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361977,
          "original_id": 342266,
          "lesson_id": 53311,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Creating modules",
          "index": 160,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.937984+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find yourself creating your <bold>own</bold> <bold>functions</bold> or <bold>classes</bold> (to be discussed later) that you would like to use in various programs. Rather than copying and pasting their definitions into each program it is far better to put them into a <bold>module</bold>, and then import that module whenever you need to. Just as you can put <bold>code</bold> into <bold>functions</bold>, you can put <bold>functions</bold> (and <bold>classes</bold>) into <bold>modules</bold>.</paragraph><paragraph>You can create your own modules by writing Python code and saving it in a file with a \".py\" extension. Then you can import these modules into your code whenever you need them.</paragraph><paragraph>For example, suppose you have a module called \"<bold>hello.py</bold>\" which contains the following code:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello():\n    print('Hello world!')</snippet-file></snippet><paragraph>You can import and use this module just like any other module (<bold>do not include</bold> the \"<bold>.py</bold>\" part of the file name):</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">from hello import say_hello\nsay_hello()</snippet-file></snippet><heading level=\"2\">Importing quietly</heading><paragraph>Sometimes you might have code in your module that is <bold>outside</bold> of a function or class. For example, suppose the contents of \"hello.py\" are this:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello():\n    print('Hello world!')\nprint(\"Python is fun!\")</snippet-file></snippet><paragraph>When you import this module into your program, the Python interpreter executes the code in the module, including line 3. This will generate output in your program that you probably don't want:</paragraph><pre>Python is fun!\nHello world!\n</pre><paragraph><code>Python is fun!</code> is a consequence of line 3 of your module, which was executed when it was imported.</paragraph><paragraph>It is better if your module is <bold>imported</bold> <bold>quietly</bold>. You make sure this happens by modifying your module as follows:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello():\n    print('Hello world!')\n\nif __name__ == '__main__':\n    print(\"Python is fun!\")</snippet-file></snippet><paragraph>When a file executes it contains is a special variable <code>__name__</code> that indicates whether the file has been <bold>executed</bold> as a <bold>standalone file</bold> or as an <bold>imported module</bold>. In the former case, the value of this variable is <code>'__main__'</code>, otherwise it is the name of the module, <code>'hello'</code>. This gives you a way of checking whether your module was executed as a standalone file or as an imported module, and modifying its behaviour accordingly. In the code above, line 4 does the check, and <code>print(\"Python is fun!\")</code> is considered only if the module is being executed as a standalone file. When you import the module, it will not be executed.</paragraph></document>"
        },
        {
          "id": 361978,
          "original_id": 342268,
          "lesson_id": 53311,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Modules Example",
          "index": 161,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.937984+10:00",
          "updated_at": null,
          "challenge_id": 119328,
          "content": ""
        },
        {
          "id": 361979,
          "original_id": 342264,
          "lesson_id": 53311,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Recursion",
          "index": 162,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.937984+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You can get a function to <bold>call itself</bold>. This is a very powerful technique known as <bold>recursion</bold>. A function that calls itself is said to be a <bold>recursive function</bold>.</paragraph><paragraph>Suppose you want to create a function that calculates, for a given number n, the <bold>factorial</bold> of n, which is 1 × 2 × 3 × ... × n.</paragraph><paragraph>For example, the factorial of 6 is 1 × 2 × 3 × 4 × 5 × 6 = 720.</paragraph><paragraph>You can do this <bold>without</bold> recursion, using a loop: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def factorial(n):\n\tresult = 1\n\tfor x in range(1, n+1):\n\t\tresult = result * x\n\treturn result\n\nnumber = input('Enter a number: ')\nnumber = int(number)\nprint(f'The factorial of {number} is {factorial(number)}.')</snippet-file></snippet><paragraph>Alternatively, you can do it with <bold>recursion</bold>.</paragraph><paragraph>The trick is to notice that the <bold>factorial of n</bold> can be obtained by multiplying <bold>n</bold> by the <bold>factorial of (n-1)</bold>.</paragraph><paragraph>Hence, we can do this:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def factorial(n):\n    if n== 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1) # Recursion - the function calls itself\n\nnumber = input('Enter a number: ')\nnumber = int(number)\nprint(f'The factorial of {number} is {factorial(number)}.')</snippet-file></snippet><paragraph>You need to be careful, when defining a recursive function, that it does not keep calling itself forever. That is why the recursive function above checks the value of n and decides what to do accordingly. There are two cases:</paragraph><list style=\"bullet\"><list-item><paragraph><underline><bold>n = 1</bold></underline>. If n is 1 then the function doesn't call itself - it just returns 1. This is sometimes called the <bold>base case</bold>.</paragraph></list-item><list-item><paragraph><underline><bold>Otherwise</bold></underline>. If n is not 1 then the function calls itself. This is sometimes called the <bold>recursive case</bold>.</paragraph></list-item></list><paragraph>The <bold>base case</bold> is important - it stops the function from calling itself forever. Notice what happens without it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def factorial(n):\n    return n * factorial(n-1)\n\nnumber = input('Enter a number: ')\nnumber = int(number)\nprint(f'The factorial of {number} is {factorial(number)}.')</snippet-file></snippet><paragraph>It is very common for a recursive function to distinguish these two cases - the base case and the recursive case. When you define a recursive function, check that you have your cases covered. </paragraph></document>"
        },
        {
          "id": 361980,
          "original_id": 342265,
          "lesson_id": 53311,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "More Recursive Examples",
          "index": 163,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.937984+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Adding Two Numbers</heading><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">def add(a,b):\n&#x9;if b == 0:\n&#x9;&#x9;return a\n&#x9;return add(a,b-1) + 1\n&#x9;\nprint(add(4,9))</snippet-file></snippet><paragraph></paragraph><heading level=\"2\">Multiply by 4</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def mult4(n):\n&#x9;if n == 1:\n&#x9;&#x9;return 4\n&#x9;return mult4(n-1) + 4\n&#x9;\nprint(mult4(1))\nprint(mult4(5))</snippet-file></snippet><paragraph></paragraph><heading level=\"2\">Factorial - Better Version</heading><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">def fact(n):\n    if n &lt;= 1:\n        return 1\n    return n*fact(n-1)\nprint(fact(0))\nprint(fact(1))\nprint(fact(4))\n\ndef facti(n):\n    res = 1\n    for i in range(2,n+1):\n        res*=i\n    return res\nprint(facti(0))\nprint(facti(1))\nprint(facti(4))</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361981,
          "original_id": 342267,
          "lesson_id": 53311,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Fibonacci Iterative, Recursive, and Memoise Versions",
          "index": 164,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.937984+10:00",
          "updated_at": null,
          "challenge_id": 119329,
          "content": ""
        },
        {
          "id": 361982,
          "original_id": 326140,
          "lesson_id": 53311,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Further reading",
          "index": 165,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.937984+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com</paragraph></list-item></list><paragraph></paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 4 - Modules and Recursion",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:38.214967+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53312,
      "index": 8,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47905,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 4,
      "slide_marks_summary": [
        {
          "id": 361983,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361984,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361985,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361986,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361983,
          "original_id": 326185,
          "lesson_id": 53312,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The Fibonacci sequence",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.214967+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/bNzX54jvz6UnVGfqv6xJMIjU"
        },
        {
          "id": 361984,
          "original_id": 326186,
          "lesson_id": 53312,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "The Fibonacci sequence",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.214967+10:00",
          "updated_at": null,
          "challenge_id": 119330,
          "content": ""
        },
        {
          "id": 361985,
          "original_id": 326187,
          "lesson_id": 53312,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "fibonacci.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.214967+10:00",
          "updated_at": null,
          "challenge_id": 119331,
          "content": ""
        },
        {
          "id": 361986,
          "original_id": 326188,
          "lesson_id": 53312,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "The Fibonacci sequence",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:38.214967+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/9ebkrsSNCTY"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 4 - Notes 4 The Fibonacci Sequence",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:56.984162+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53360,
      "index": 19,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47937,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384762,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362187,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384762,
          "original_id": null,
          "lesson_id": 53360,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Cryptography",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:11:25.08876+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/dBCUtQIshIXSqkGcsKeff6PL"
        },
        {
          "id": 362187,
          "original_id": 326303,
          "lesson_id": 53360,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Cryptography",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:56.984162+10:00",
          "updated_at": null,
          "challenge_id": 119466,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Cryptography",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:43.024866+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53328,
      "index": 18,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47907,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 7,
      "slide_marks_summary": [
        {
          "id": 362057,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362058,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362059,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362060,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362061,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362062,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362063,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362057,
          "original_id": 326198,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Week 9 - Quadratic equations",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/mBhHQhmKwOwl4nvi3yx01Htj"
        },
        {
          "id": 362058,
          "original_id": 326199,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Week 9 - Quadratic equations",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "challenge_id": 119356,
          "content": ""
        },
        {
          "id": 362059,
          "original_id": 326200,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "quadratic_equation_v1.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "challenge_id": 119357,
          "content": ""
        },
        {
          "id": 362060,
          "original_id": 326201,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "quadratic_equation_v2.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "challenge_id": 119358,
          "content": ""
        },
        {
          "id": 362061,
          "original_id": 326202,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "quadratic_equation_v3.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "challenge_id": 119359,
          "content": ""
        },
        {
          "id": 362062,
          "original_id": 326203,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "quadratic_equation_v4.py",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "challenge_id": 119360,
          "content": ""
        },
        {
          "id": 362063,
          "original_id": 326204,
          "lesson_id": 53328,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "quadratic_equation_v5.py",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.024866+10:00",
          "updated_at": null,
          "challenge_id": 119361,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 9 - Notes 13 Quadratic Equations",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:43.971614+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53331,
      "index": 20,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47909,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362070,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362071,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362072,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362073,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362074,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362070,
          "original_id": 326209,
          "lesson_id": 53331,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Week 10 - Context free grammars",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.971614+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/4VzCZ1vENcNiDjEMipiwiwdz"
        },
        {
          "id": 362071,
          "original_id": 326210,
          "lesson_id": 53331,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful links about context-free grammars",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.971614+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Context-free grammar<break/><link href=\"https://en.wikipedia.org/wiki/Context-free_grammar\">https://en.wikipedia.org/wiki/Context-free_grammar</link><break/><break/></paragraph></list-item><list-item><paragraph>Context-sensitive grammar<break/><link href=\"https://en.wikipedia.org/wiki/Context-sensitive_grammar\">https://en.wikipedia.org/wiki/Context-sensitive_grammar</link></paragraph></list-item></list><paragraph/></document>"
        },
        {
          "id": 362072,
          "original_id": 326211,
          "lesson_id": 53331,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Week 10 - Context free grammar",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.971614+10:00",
          "updated_at": null,
          "challenge_id": 119364,
          "content": ""
        },
        {
          "id": 362073,
          "original_id": 352596,
          "lesson_id": 53331,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "CFG Example",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.971614+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>S → aSa | bSb | a | b | ε</paragraph><paragraph>is same as</paragraph><paragraph>S → aSa<break/>S → bSb<break/>S → a<break/>S → b<break/>S → ε</paragraph><paragraph>S is the starting symbol and ε is the empty word</paragraph><paragraph>Does this word '<bold>abbabba</bold>' belong to the language of the grammar above?</paragraph><paragraph>S → aSa → abSba → abbSbba → abbabba <bold>YES</bold></paragraph><paragraph><bold>abab</bold>? <bold>NO</bold></paragraph><paragraph><bold>elle</bold>, <bold>radar</bold>, <bold>level</bold>, and <bold>refer</bold> are examples of <bold>palindrome</bold></paragraph><paragraph/></document>"
        },
        {
          "id": 362074,
          "original_id": 326212,
          "lesson_id": 53331,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "context_free_grammar.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.971614+10:00",
          "updated_at": null,
          "challenge_id": 119365,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 10 - Notes 15 Context Free Grammars",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:50.005439+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53340,
      "index": 7,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47918,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362134,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 3,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362135,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362136,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378432,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 381773,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362134,
          "original_id": 326259,
          "lesson_id": 53340,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Canonical coin systems",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:50.005439+10:00",
          "updated_at": null,
          "challenge_id": 119422,
          "content": "<document version=\"2.0\"><paragraph>Write a program that prompts the user for an amount, and outputs the minimal number of coins needed to yield that amount, as well as the detail of how many coins of each value are used. The available coins have a face value which is one of \\$1, \\$2, \\$5, \\$10, \\$20, \\$50, and \\$100.</paragraph><paragraph>Insert your code into <code>canonical_coin_systems.py</code>.</paragraph><paragraph>Here are examples of interactions: </paragraph><pre>$ python3 canonical_coin_systems.py\r\nInput the desired amount: 10\r\n\n1 banknote is needed.\r\nThe detail is:\r\n$10: 1\r\n\n$ python3 canonical_coin_systems.py\r\nInput the desired amount: 739\r\n\n12 banknotes are needed\r\nThe detail is:\r\n$100: 7\r\n $20: 1\r\n $10: 1\r\n  $5: 1\r\n  $2: 2\r\n\n$ python3 canonical_coin_systems.py\r\nInput the desired amount: 35642\r\n\n359 banknotes are needed\r\nThe detail is:\r\n$100: 356\r\n $20: 2\r\n  $2: 1\r\n</pre></document>"
        },
        {
          "id": 362135,
          "original_id": 326256,
          "lesson_id": 53340,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: Unit fractions",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:50.005439+10:00",
          "updated_at": null,
          "challenge_id": 119423,
          "content": "<document version=\"2.0\"><paragraph>Let $N$ and $D$ be two strictly positive integers with $N&lt;D$. The fraction $N/D$ can be written as a sum of unit fractions, that is, there exists integers $k,d_1,\\ldots,d_k\\geq 1$ with $d_1&lt;d_2&lt;\\ldots&lt;d_k$ such that</paragraph><paragraph>$\\frac{N}{D} = \\frac{1}{d_1}+\\frac{1}{d_2}+\\dots+\\frac{1}{d_k}$.</paragraph><paragraph>There are actually infinitely many such representations. Indeed, since</paragraph><paragraph>$1=\\frac{1}{2}+\\frac{1}{3}+\\frac{1}{6}$</paragraph><paragraph>if $\\frac{N}{D} = \\frac{1}{d_1}+\\frac{1}{d_2}+\\dots+\\frac{1}{d_k}$ then also</paragraph><paragraph>$\\frac{N}{D} = \\frac{1}{d_1}+\\frac{1}{d_2}+\\dots+\\frac{1}{d_{k-1}}+\\frac{1}{2d_k}+\\frac{1}{3d_k}+\\frac{1}{6d_k}$.</paragraph><paragraph><break/>One particular representation is obtained by a method proposed by Fibonacci, in the form of a greedy algorithm. Suppose that $N/D$ cannot be simplified, that is, $N$ and $D$ have no other common factor but 1. If $N=1$ then we are done, so suppose otherwise. Let $d_1$ be the smallest integer such that $\\frac{N}{D}$ can be written as $\\frac{1}{d_1}+f_1$, with $f_1$ necessarily strictly positive by assumption. Looking for the smallest $d_1$ is what makes the algorithm greedy. Of course, $d_1$ is equal to $D\\div N + 1$. By the choice of $d_1$, $\\frac{1}{d_1-1}&gt;\\frac{N}{D}$, hence $D&gt;N(d_1-1)$, hence $N&gt;Nd_1-D$. Since $f_1$ is equal to $\\frac{N}{D}-\\frac{1}{d_1}=\\frac{Nd_1-D}{Dd_1}$, it follows that $\\frac{N}{D}$ can be written as $\\frac{1}{d_1}+\\frac{N_1}{D_1}$ with $N_1&lt;N$. If $N_1&gt;1$ then the same argument allows one to greedily find $d_2&gt;d_1$ such that for some strictly positive integers $N_2$ and $D_2$, $\\frac{N}{D}$ can be written as $\\frac{1}{d_1}+\\frac{1}{d_2}+\\frac{N_2}{D_2}$ with $N_2&lt;N_1$, and if $N_2&gt;1$ then the same argument allows one to greedily find $d_3&gt;d_2$ such that for some strictly positive integers $N_3$ and $D_3$, $\\frac{N}{D}$ can be written as $\\frac{1}{d_1}+\\frac{1}{d_2}+\\frac{1}{d_3}+\\frac{N_3}{D_3}$ with $N_3&lt;N_2$... After a finite number of steps, we are done.</paragraph><paragraph>The number of summands in the sum of unit fractions given by Fibonacci's method is not always minimal: it is sometimes possible to decompose $\\frac{N}{D}$ as sum of unit fractions with fewer summands. For instance, Fibonacci's method yields</paragraph><paragraph>$\\frac{4}{17} = \\frac{1}{5} + \\frac{1}{29} + \\frac{1}{1233} + \\frac{1}{3039345}$</paragraph><paragraph>whereas $\\frac{4}{17}$ can be written as a sum of 3 unit fractions, actually in 4 possible ways:</paragraph><list style=\"bullet\"><list-item><paragraph>$\\frac{4}{17} = \\frac{1}{5} + \\frac{1}{30} + \\frac{1}{510}$</paragraph></list-item><list-item><paragraph>$\\frac{4}{17} = \\frac{1}{5} + \\frac{1}{34} + \\frac{1}{170}$</paragraph></list-item><list-item><paragraph>$\\frac{4}{17} = \\frac{1}{6} + \\frac{1}{15} + \\frac{1}{510}$</paragraph></list-item><list-item><paragraph>$\\frac{4}{17} = \\frac{1}{6} + \\frac{1}{17} + \\frac{1}{102}$</paragraph></list-item></list><paragraph/><paragraph>Complete the program <code>unit_fractions.py</code> so as to have the functionality of the two functions:</paragraph><list style=\"bullet\"><list-item><paragraph><code>fibonacci_decomposition(N, D)</code>, that takes two strictly positive integers $N$ and $D$ as arguments, and writes $N/D$ as a sum of unit fractions following Fibonacci method, plus an integer in case $N ≥ D$ (in a unique way)</paragraph></list-item><list-item><paragraph><code>shortest_length_decompositions(N, D)</code>, that also takes two strictly positive integers $N$ and $D$ as arguments, and writes $N/D$ as a sum of unit fractions with a minimal number of summands, plus an integer in case N ≥ D (in possibly many ways)</paragraph></list-item></list><paragraph/><paragraph>Here are possible interactions:</paragraph><pre> &gt;&gt;&gt; from unit_fractions import *\n &gt;&gt;&gt; fibonacci_decomposition(1, 521)\n 1/521 = 1/521\n &gt;&gt;&gt; fibonacci_decomposition(521, 521)\n 521/521 = 1\n &gt;&gt;&gt; fibonacci_decomposition(521, 1050)\n 521/1050 = 1/3 + 1/7 + 1/50\n &gt;&gt;&gt; fibonacci_decomposition(1050, 521)\n 1050/521 = 2 + 1/66 + 1/4913 + 1/33787684 + 1/2854018941421956\n &gt;&gt;&gt; fibonacci_decomposition(6, 7)\n 6/7 = 1/2 + 1/3 + 1/42\n &gt;&gt;&gt; shortest_length_decompositions(6, 7)\n 6/7 = 1/2 + 1/3 + 1/42\n &gt;&gt;&gt; fibonacci_decomposition(8, 11)\n 8/11 = 1/2 + 1/5 + 1/37 + 1/4070\n &gt;&gt;&gt; shortest_length_decompositions(8, 11)\n 8/11 = 1/2 + 1/5 + 1/37 + 1/4070\n 8/11 = 1/2 + 1/5 + 1/38 + 1/1045\n 8/11 = 1/2 + 1/5 + 1/40 + 1/440\n 8/11 = 1/2 + 1/5 + 1/44 + 1/220\n 8/11 = 1/2 + 1/5 + 1/45 + 1/198\n 8/11 = 1/2 + 1/5 + 1/55 + 1/110\n 8/11 = 1/2 + 1/5 + 1/70 + 1/77\n 8/11 = 1/2 + 1/6 + 1/17 + 1/561\n 8/11 = 1/2 + 1/6 + 1/18 + 1/198\n 8/11 = 1/2 + 1/6 + 1/21 + 1/77\n 8/11 = 1/2 + 1/6 + 1/22 + 1/66\n 8/11 = 1/2 + 1/7 + 1/12 + 1/924\n 8/11 = 1/2 + 1/7 + 1/14 + 1/77\n 8/11 = 1/2 + 1/8 + 1/10 + 1/440\n 8/11 = 1/2 + 1/8 + 1/11 + 1/88\n 8/11 = 1/3 + 1/4 + 1/7 + 1/924\n &gt;&gt;&gt; fibonacci_decomposition(4, 17)\n 4/17 = 1/5 + 1/29 + 1/1233 + 1/3039345\n &gt;&gt;&gt; shortest_length_decompositions(4, 17)\n 4/17 = 1/5 + 1/30 + 1/510\n 4/17 = 1/5 + 1/34 + 1/170\n 4/17 = 1/6 + 1/15 + 1/510\n 4/17 = 1/6 + 1/17 + 1/102 \n</pre></document>"
        },
        {
          "id": 362136,
          "original_id": 326257,
          "lesson_id": 53340,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: Diophantine equations",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:50.005439+10:00",
          "updated_at": null,
          "challenge_id": 119424,
          "content": "<document version=\"2.0\"><paragraph>We consider Diophantine equations of the form $ax+by=c$ with $a$ and $b$ both not equal to 0. We will represent such an equation as a string of the form ax+by=c or ax-by=c where a and c are nonzero integer literals (not preceded by + in case they are positive) and where b is a strictly positive integer literal (not preceded by +), possibly with spaces anywhere at the beginning, at the end, and around the +, - and = characters. The equation $ax+by=c$ has a solution iff $c$ is a multiple of $\\gcd(a,b)$. In case $c$ is indeed a multiple of $\\gcd(a,b)$, then $ax+by=c$ has has infinitely many solutions, namely, all pairs $(x,y)$ of the form</paragraph><paragraph><break/>$\\left(x_0 + \\frac{\\mathrm{lcm}(a,b)}{a}n,y_0 - \\frac{\\mathrm{lcm}(a,b)}{b}n\\right)$</paragraph><paragraph><break/>for arbitrary integers $n$, where $\\mathrm{lcm}(a,b)$ denotes the least common multiplier of $a$ and $b$, and where $(x_0,y_0)$ is a solution to the equation. That particular solution can be derived from the extended Euclidian algorithm, that yields not only $\\gcd(a,b)$ but also a pair of Bézout coefficients, namely, two integers $x$ and $y$ with $ax+by=\\gcd(a,b)$. To normalise the representation of the solutions, we rewrite the equation above as<break/><break/>$\\left(x_0 + \\frac{\\mathrm{lcm}(a,b)}{|a|}n,y_0 - \\mathrm{sign}(a)\\frac{\\mathrm{lcm}(a,b)}{b}n\\right)$<break/><break/>where $\\mathrm{sign}(a)$ is 1 if $a$ is positive and -1 if $a$ is negative, and we impose that the pair $(x_0,y_0)$ is such that $x_0$ is nonnegative and minimal.</paragraph><paragraph>Write a Python program <code>diophantine_equation.py</code> that defines a function <code>diophantine()</code> that prints out whether the equation provided as argument has a solution, and in case it does, prints out the normalised representation of its solutions. The output reproduces the equation nicely formatted, that is, with a single space around the <code><bold>+</bold></code>, <code><bold>-</bold></code> and <code><bold>=</bold></code> characters. As for the representation of the solutions, it is also nicely formatted, omitting $x_0$ or $y_0$ when they are equal to 0, and omitting 1 as a factor of $n$. Press the <bold>Run</bold> or <bold>Mark</bold> buttons for possible interactions:</paragraph><pre>&gt;&gt;&gt; diophantine('1x + 1y = 0')\n1x + 1y = 0 has as solutions all pairs of the form\n    (n, -n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('-1x + 1y = 0')\n-1x + 1y = 0 has as solutions all pairs of the form\n    (n, n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('1x - 1y = 0')\n1x - 1y = 0 has as solutions all pairs of the form\n    (n, n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('-1x - 1y = 0')\n-1x - 1y = 0 has as solutions all pairs of the form\n    (n, -n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('1x + 1y = -1')\n1x + 1y = -1 has as solutions all pairs of the form\n    (n, -1 - n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('-1x + 1y = 1')\n-1x + 1y = 1 has as solutions all pairs of the form\n    (n, 1 + n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('4x + 6y = 9')\n4x + 6y = 9 has no solution.\n&gt;&gt;&gt; diophantine('4x + 6y = 10')\n4x + 6y = 10 has as solutions all pairs of the form\n    (1 + 3n, 1 - 2n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('71x+83y=2')\n71x + 83y = 2 has as solutions all pairs of the form\n    (69 + 83n, -59 - 71n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine(' 782 x + 253 y = 92')\n782x + 253y = 92 has as solutions all pairs of the form\n    (4 + 11n, -12 - 34n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('-123x -456y = 78')\n-123x - 456y = 78 has as solutions all pairs of the form\n    (118 + 152n, -32 - 41n) with n an arbitrary integer.\n&gt;&gt;&gt; diophantine('-321x +654y = -87')\n-321x + 654y = -87 has as solutions all pairs of the form\n    (149 + 218n, 73 + 107n) with n an arbitrary integer.\n</pre><paragraph/></document>"
        },
        {
          "id": 378432,
          "original_id": 362140,
          "lesson_id": 53340,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: Fibonacci codes",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-29T12:51:31.494009+10:00",
          "updated_at": null,
          "challenge_id": 124978,
          "content": "<document version=\"2.0\"><paragraph>Recall that the Fibonacci sequence $(F_n)_{n&gt;=0}$ is defined by the equations: $F_0=0$, $F_1=1$ and for all $n&gt;0$, $F_n=F_{n+1}+F_{n-2}$.</paragraph><paragraph>It can be shown that every strictly positive integer $N$ can be uniquely coded as a string $\\sigma$ of 0's and 1's ending with 1, so of the form $b_2b_3\\ldots b_k$ with $k\\geq 2$ and $b_k=1$, such that $N$ is the sum of all $F_i$'s, $2\\leq i\\leq k$, with $b_i=1$.</paragraph><paragraph>For instance, $11=3+8=F_4+F_6$, hence 11 is coded by 00101.</paragraph><paragraph>Moreover:</paragraph><list style=\"bullet\"><list-item><paragraph>there are no two successive occurrences of 1 in $\\sigma$;</paragraph></list-item><list-item><paragraph>$F_k$ is the largest Fibonacci number that fits in $N$, and if $j$ is the largest integer in $\\{2,\\ldots,k-1\\}$ such that $b_j=1$ then $F_j$ is the largest Fibonacci number that fits in $N-F_k$, and if $i$ is the largest integer in $\\{2,\\ldots,j-1\\}$ such that $b_i=1$ then $F_i$ is the largest Fibonacci number that fits in $N-F_k-F_j$...</paragraph></list-item></list><paragraph>Also, every string of 0's and 1's ending in 1 and having no two successive occurrences of 1's is a code of a strictly positive integer according to this coding scheme. For instance:</paragraph><list style=\"bullet\"><list-item><paragraph>There is only one string of 0's and 1's of length 1 ending in 1 and having no two successive occurrences of 1's; it is 1, and it codes 1.</paragraph></list-item><list-item><paragraph>There is only one string of 0's and 1's of length 2 ending in 1 and having no two successive occurrences of 1's; it is 01, and it codes 2.</paragraph></list-item><list-item><paragraph>The strings of 0's and 1's of length 3 ending in 1 and having no two successive occurrences of 1's are 001 and 101 and they code 3 and 4, respectively.</paragraph></list-item><list-item><paragraph>The strings of 0's and 1's of length 4 ending in 1 and having no two successive occurrences of 1's are 0001, 1001 and 0101 and they code 5, 6 and 7, respectively.</paragraph></list-item><list-item><paragraph>The strings of 0's and 1's of length 5 ending in 1 and having no two successive occurrences of 1's are 00001, 10001, 01001, 00101 and 10101 and they code 8, 9, 10, 11 and 12, respectively.</paragraph></list-item><list-item><paragraph>...</paragraph></list-item></list><paragraph>The Fibonacci code of $N$ adds 1 at the end of $\\sigma$; the resulting string then ends in two 1's, therefore marking the end of the code, and allowing one to let one string code a finite sequence of strictly positive integers. For instance, 00101100111011 codes $(11,3,4)$.</paragraph><paragraph>Implement the two functions in the stub, one that takes one argument $N$ mean to to be a strictly positive integer and returns its Fibonacci code, and one that takes one argument $\\sigma$ meant to be a strict consisting 0's and 1's, returns 0 if $\\sigma$ cannot be a Fibonacci code, and otherwise returns the integer $\\sigma$ is the Fibonacci code of.</paragraph><paragraph>Here are possible interactions:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from fibonacci_codes import *\n&gt;&gt;&gt; encode(1)\n’11’\n&gt;&gt;&gt; encode(2)\n’011’\n&gt;&gt;&gt; encode(3)\n’0011’\n&gt;&gt;&gt; encode(4)\n’1011’\n&gt;&gt;&gt; encode(8)\n’000011’\n&gt;&gt;&gt; encode(11)\n’001011’\n&gt;&gt;&gt; encode(12)\n’101011’\n&gt;&gt;&gt; encode(14)\n’1000011’\n&gt;&gt;&gt; decode(’1’)\n0\n&gt;&gt;&gt; decode(’01’)\n0\n&gt;&gt;&gt; decode(’100011011’)\n0\n&gt;&gt;&gt; decode(’11’)\n1\n&gt;&gt;&gt; decode(’011’)\n2\n&gt;&gt;&gt; decode(’0011’)\n3\n&gt;&gt;&gt; decode(’1011’)\n4\n&gt;&gt;&gt; decode(’000011’)\n8\n&gt;&gt;&gt; decode(’001011’)\n11\n&gt;&gt;&gt; decode(’1000011’)\n14\n</pre></document>"
        },
        {
          "id": 381773,
          "original_id": 362138,
          "lesson_id": 53340,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Change making",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-10T19:35:31.121127+10:00",
          "updated_at": null,
          "challenge_id": 126100,
          "content": "<document version=\"2.0\"><paragraph>Write a program <code>change_making.py</code> that <bold>prompts</bold> the user for the <bold>face values of coins</bold> and their associated <bold>quantities</bold> as well as for an <bold>amount</bold>, and if possible, <bold>outputs</bold> the <bold>minimal number of coins</bold> needed to <bold>match that amount</bold>, as well as the <bold>detail of how many coins of each type value are used</bold>.</paragraph><paragraph>The face values and associated quantities should be input as a <bold>dictionary</bold>. You might find the <code>literal_eval()</code> function from the <code>ast</code> module to be useful.</paragraph><paragraph>A solution is output from smallest face value to largest face value. If a solution is represented as a list of pairs of the form (coin face value, number of coins) ordered from smallest to largest face value, then the solutions themselves are output in lexicographical order (for sequences of pairs). All face values for a given solution are right aligned.</paragraph><paragraph>Insert your code into <code>change_making.py</code>.</paragraph><paragraph>Here are examples of interactions:</paragraph><pre>$ python3 change_making.py\nInput a dictionary whose keys represent coin face values\nwith as value for a given key the number of coins\nthat are available for the corresponding face value:\n    {2: 100, 50: 100}\nInput the desired amount: 99\n\nThere is no solution.\n\n$ python3 change_making.py\nInput a dictionary whose keys represent coin face values\nwith as value for a given key the number of coins \nthat are available for the corresponding face value:\n    {1: 30, 20: 30, 50: 30}\nInput the desired amount: 60\n\nThere is a unique solution:\n$20: 3\n\n$ python3 change_making.py\nInput a dictionary whose keys represent coin face values\nwith as value for a given key the number of coins\nthat are available for the corresponding face value:\n    {1: 100, 2: 5, 3: 4, 10: 5, 20: 4, 30: 1}\nInput the desired amount: 107\n\nThere are 2 solutions:\n$1: 1\n$3: 2\n$10: 1\n$20: 3\n$30: 1\n\n$2: 2\n$3: 1\n$10: 1\n$20: 3\n$30: 1\n\n$ python3 change_making.py\nInput a dictionary whose keys represent coins face values\nwith as value for a given key the number of coins\nthat are available for the corresponding face value:\n    {1: 7, 2: 5, 3: 4, 4: 3, 5: 2}\nInput the desired amount: 29\n\nThere are 4 solutions:\n$1: 1\n$3: 2\n$4: 3\n$5: 2\n\n$2: 1\n$3: 3\n$4: 2\n$5: 2\n\n$2: 2\n$3: 1\n$4: 3\n$5: 2\n\n$3: 4\n$4: 3\n$5: 1\n\n$ python3 change_making.py\nInput a dictionary whose keys represent coins face values\nwith as value for a given key the number of coins \nthat are available for the corresponding face value:\n    {11:34, 12:34, 13: 234, 17:44, 18:54, 19: 3}\nInput the desired amount: 3422\n\nThere are 8 solutions:\n$11: 1\n$12: 4\n$13: 122\n$17: 44\n$18: 54\n$19: 3\n\n$11: 1\n$13: 127\n$17: 43\n$18: 54\n$19: 3\n\n$11: 2\n$12: 2\n$13: 123\n$17: 44\n$18: 54\n$19: 3\n\n$11: 3\n$13: 124\n$17: 44\n$18: 54\n$19: 3\n\n$12: 1\n$13: 127\n$17: 44\n$18: 53\n$19: 3\n\n$12: 2\n$13: 126\n$17: 43\n$18: 54\n$19: 3\n\n$12: 6\n$13: 121\n$17: 44\n$18: 54\n$19: 3\n\n$13: 128\n$17: 44\n$18: 54\n$19: 2\n\n</pre><paragraph>The natural approach makes use of the <bold>linear programming</bold> technique exemplified in the computation of the <bold>Levenshtein distance</bold> between two words discussed in Week 9 lectures.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 9",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-18T14:16:04.500291+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53351,
      "index": null,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 362160,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11532,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47929,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 9,
      "slide_marks_summary": [
        {
          "id": 362154,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362155,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362156,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362157,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362158,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362159,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362160,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362161,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362162,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362154,
          "original_id": 326277,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Python 3 Cheat Sheet",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/wtAsN9UFVMYE451tBfLudQpD"
        },
        {
          "id": 362155,
          "original_id": 326278,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 1",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119441,
          "content": "<document version=\"2.0\"><paragraph>Complete the code in the function that, given a list <bold>L</bold> of random non negative whole numbers, decomposes <bold>L</bold> into a list <bold>R</bold> of increasing sequences and with consecutive duplicates removed.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(0, 0, 10)\n    Here is L: []\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        []\r\n\n    &gt;&gt;&gt; f(0, 1, 10)\r\n    Here is L: [6]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6]]\n        \r\n    &gt;&gt;&gt; f(0, 2, 10)\r\n    Here is L: [6, 6]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6]]\n        \r\n    &gt;&gt;&gt; f(0, 3, 10)\r\n    Here is L: [6, 6, 0]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0]]\n        \r\n    &gt;&gt;&gt; f(0, 4, 10)\r\n    Here is L: [6, 6, 0, 4]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4]]\n        \r\n    &gt;&gt;&gt; f(0, 5, 10)\r\n    Here is L: [6, 6, 0, 4, 8]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4, 8]]\n        \r\n    &gt;&gt;&gt; f(0, 6, 10)\r\n    Here is L: [6, 6, 0, 4, 8, 7]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4, 8], [7]]\n        \r\n    &gt;&gt;&gt; f(0, 7, 10)\r\n    Here is L: [6, 6, 0, 4, 8, 7, 6]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4, 8], [7], [6]]\n        \r\n    &gt;&gt;&gt; f(3, 10, 6)\r\n    Here is L: [1, 4, 4, 1, 2, 4, 3, 5, 4, 0]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[1, 4], [1, 2, 4], [3, 5], [4], [0]]\n        \r\n    &gt;&gt;&gt; f(3, 15, 8)\r\n    Here is L: [3, 8, 2, 5, 7, 1, 0, 7, 4, 8, 3, 3, 7, 8, 8]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[3, 8], [2, 5, 7], [1], [0, 7], [4, 8], [3, 7, 8]]\n</pre></document>"
        },
        {
          "id": 362156,
          "original_id": 326279,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 2",
          "index": 12,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119442,
          "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>strictly positive</bold> integer and displays its <bold>binary representation</bold> as well as the <bold>number of times the value 1 appears</bold> in its binary representation. You might find the function <code>bin()</code> useful.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(1)\n    1 in binary reads as: 1.\n    Only one bit is set to 1 in the binary representation of 1.\n    \n    &gt;&gt;&gt; f(2)\n    2 in binary reads as: 10.\n    Only one bit is set to 1 in the binary representation of 2.\n    \n    &gt;&gt;&gt; f(3)\n    3 in binary reads as: 11.\n    2 bits are set to 1 in the binary representation of 3.\n    \n    &gt;&gt;&gt; f(7)\n    7 in binary reads as: 111.\n    3 bits are set to 1 in the binary representation of 7.\n    \n    &gt;&gt;&gt; f(2314)\n    2314 in binary reads as: 100100001010.\n    4 bits are set to 1 in the binary representation of 2314.\n    \n    &gt;&gt;&gt; f(9871)\n    9871 in binary reads as: 10011010001111.\n    8 bits are set to 1 in the binary representation of 9871.\n</pre></document>"
        },
        {
          "id": 362157,
          "original_id": 326280,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 3",
          "index": 13,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119443,
          "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>strictly positive</bold> integer <bold>greater or equal to 2</bold> and \"not too large\" and displays its decomposition into prime factors.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(2)\n    The decomposition of 2 into prime factors reads:\n       2 = 2\n    &gt;&gt;&gt; f(3)\n    The decomposition of 3 into prime factors reads:\n       3 = 3\n    &gt;&gt;&gt; f(4)\n    The decomposition of 4 into prime factors reads:\n       4 = 2^2\n    &gt;&gt;&gt; f(5)\n    The decomposition of 5 into prime factors reads:\n       5 = 5\n    &gt;&gt;&gt; f(6)\n    The decomposition of 6 into prime factors reads:\n       6 = 2 x 3\n    &gt;&gt;&gt; f(8)\n    The decomposition of 8 into prime factors reads:\n       8 = 2^3\n    &gt;&gt;&gt; f(10)\n    The decomposition of 10 into prime factors reads:\n       10 = 2 x 5\n    &gt;&gt;&gt; f(15)\n    The decomposition of 15 into prime factors reads:\n       15 = 3 x 5\n    &gt;&gt;&gt; f(100)\n    The decomposition of 100 into prime factors reads:\n       100 = 2^2 x 5^2\n    &gt;&gt;&gt; f(5432)\n    The decomposition of 5432 into prime factors reads:\n       5432 = 2^3 x 7 x 97\n    &gt;&gt;&gt; f(45103)\n    The decomposition of 45103 into prime factors reads:\n       45103 = 23 x 37 x 53\n    &gt;&gt;&gt; f(45100)\n    The decomposition of 45100 into prime factors reads:\n       45100 = 2^2 x 5^2 x 11 x 41\n</pre></document>"
        },
        {
          "id": 362158,
          "original_id": 326281,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 4",
          "index": 14,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119444,
          "content": "<document version=\"2.0\"><paragraph>Will be tested with <bold>a</bold> at <bold>least</bold> equal to <bold>2</bold> and <bold>b</bold> at <bold>most</bold> equal to <bold>10_000_000</bold>.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(2, 2)\n    There is a unique prime number beween 2 and 2.\n    \n    &gt;&gt;&gt; f(2, 3)\n    There are 2 prime numbers between 2 and 3.\n    \n    &gt;&gt;&gt; f(2, 5)\n    There are 3 prime numbers between 2 and 5.\n    \n    &gt;&gt;&gt; f(4, 4)\n    There is no prime number beween 4 and 4.\n    \n    &gt;&gt;&gt; f(14, 16)\n    There is no prime number beween 14 and 16.\n    \n    &gt;&gt;&gt; f(3, 20)\n    There are 7 prime numbers between 3 and 20.\n    \n    &gt;&gt;&gt; f(100, 800)\n    There are 114 prime numbers between 100 and 800.\n    \n    &gt;&gt;&gt; f(123, 456789)\n    There are 38194 prime numbers between 123 and 456789.\n</pre><paragraph/></document>"
        },
        {
          "id": 362159,
          "original_id": 326282,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 5",
          "index": 15,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119445,
          "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>year</bold> between 1913 and 2013 inclusive and displays the maximum inflation during that year and the month(s) in which it was achieved.</paragraph><paragraph>You might find the <code>reader()</code> function of the <code>csv</code> module useful, but you can also use the <code>split()</code> method of the <code>str</code> class.</paragraph><paragraph>Make use of the attached <bold>cpiai.csv</bold> file.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(1914)\n    In 1914, maximum inflation was: 2.0\n    It was achieved in the following months: Aug\n    \n    &gt;&gt;&gt; f(1922)\n    In 1922, maximum inflation was: 0.6\n    It was achieved in the following months: Jul, Oct, Nov, Dec\n    \n    &gt;&gt;&gt; f(1995)\n    In 1995, maximum inflation was: 0.4\n    It was achieved in the following months: Jan, Feb\n    \n    &gt;&gt;&gt; f(2013)\n    In 2013, maximum inflation was: 0.82\n    It was achieved in the following months: Feb\n</pre><paragraph/></document>"
        },
        {
          "id": 362160,
          "original_id": 326283,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 6",
          "index": 16,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119446,
          "content": "<document version=\"2.0\"><paragraph/><paragraph>You might find the <code>zip()</code> function useful, though you can also do without it.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(0, 2, 2)\r\n    Here is the square: \r\n    1 1\r\n    0 1\r\n    It is not a good square because it contains duplicates, namely: 1\r\n    \n    &gt;&gt;&gt; f(0, 3, 5)\r\n    Here is the square: \r\n    3 3 0\r\n    2 4 3\r\n    3 2 3\r\n    It is not a good square because it contains duplicates, namely: 2 3\r\n    \n    &gt;&gt;&gt; f(0, 6, 50)\r\n    Here is the square: \r\n    24 48 26  2 16 32\r\n    31 25 19 30 22 37\r\n    13 32  8 18  8 48\r\n     6 39 16 34 45 38\r\n     9 19  6 46  4 43\r\n    21 30 35  6 22 27\r\n    It is not a good square because it contains duplicates, namely: 6 8 16 19 22 30 32 48\r\n    \n    &gt;&gt;&gt; f(0, 2, 50)\r\n    Here is the square: \r\n    24 48\r\n    26  2\r\n    It is a good square.\r\n    Ordering the elements from left to right column, from top to bottom, yields:\r\n     2 26\r\n    24 48\r\n    \n    &gt;&gt;&gt; f(0, 3, 100)\r\n    Here is the square: \r\n     49  97  53\r\n      5  33  65\r\n     62  51  38\r\n    It is a good square.\r\n    Ordering the elements from left to right column, from top to bottom, yields:\r\n      5  49  62\r\n     33  51  65\r\n     38  53  97\r\n    \n    &gt;&gt;&gt; f(0, 6, 5000)\r\n    Here is the square: \r\n    3155 3445  331 2121 4188 3980\r\n    3317 2484 3904 2933 4779 1789\r\n    4134 1140 2308 1144  776 2052\r\n    4362 4930 1203 2540  809  604\r\n    2704 3867 4585  824 2898 3556\r\n    2590 1675 4526 3907 3626 4270\r\n    It is a good square.\r\n    Ordering the elements from left to right column, from top to bottom, yields:\r\n     331 1144 2308 2933 3867 4270\r\n     604 1203 2484 3155 3904 4362\r\n     776 1675 2540 3317 3907 4526\r\n     809 1789 2590 3445 3980 4585\r\n     824 2052 2704 3556 4134 4779\r\n    1140 2121 2898 3626 4188 4930\n</pre><paragraph/></document>"
        },
        {
          "id": 362161,
          "original_id": 326284,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 7",
          "index": 17,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119447,
          "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>strictly positive</bold> integer called <bold>height</bold> and displays a triangle shape of numbers starting from <bold>0</bold> and of height <bold>height</bold>. Use only digits from <bold>0</bold> to <bold>9</bold> to construct the shape as per the examples below:</paragraph><paragraph/><pre>    &gt;&gt;&gt; f(1)\n    0\n    &gt;&gt;&gt; f(2)\n     0\n    123\n    &gt;&gt;&gt; f(3)\n      0\n     123\n    45678\n    &gt;&gt;&gt; f(4)\n       0\n      123\n     45678\n    9012345\n    &gt;&gt;&gt; f(5)\n        0\n       123\n      45678\n     9012345\n    678901234\n    &gt;&gt;&gt; f(6)\n         0\n        123\n       45678\n      9012345\n     678901234\n    56789012345\n    &gt;&gt;&gt; f(20)\n                       0\n                      123\n                     45678\n                    9012345\n                   678901234\n                  56789012345\n                 6789012345678\n                901234567890123\n               45678901234567890\n              1234567890123456789\n             012345678901234567890\n            12345678901234567890123\n           4567890123456789012345678\n          901234567890123456789012345\n         67890123456789012345678901234\n        5678901234567890123456789012345\n       678901234567890123456789012345678\n      90123456789012345678901234567890123\n     4567890123456789012345678901234567890\n    123456789012345678901234567890123456789\n</pre></document>"
        },
        {
          "id": 362162,
          "original_id": 326285,
          "lesson_id": 53351,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Question 8",
          "index": 18,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:53.761254+10:00",
          "updated_at": null,
          "challenge_id": 119448,
          "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>string</bold> of <bold>DISTINCT UPPERCASE letters</bold> only called <bold>letters</bold> and displays all pairs of words using all (distinct) letters in <bold>letters</bold>.</paragraph><paragraph>Please note that the words need to be valid. Use the provided <bold>dictionary.txt</bold> to check the validity of words.  </paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f('ABCDEFGH')\n    There is no solution\n    \n    &gt;&gt;&gt; f('GRIHWSNYP')\n    The pairs of words using all (distinct) letters in \"GRIHWSNYP\" are:\n    ('SPRING', 'WHY')\n    \n    &gt;&gt;&gt; f('ONESIX')\n    The pairs of words using all (distinct) letters in \"ONESIX\" are:\n    ('ION', 'SEX')\n    ('ONE', 'SIX')\n    \n    &gt;&gt;&gt; f('UTAROFSMN')\n    The pairs of words using all (distinct) letters in \"UTAROFSMN\" are:\n    ('AFT', 'MOURNS')\n    ('ANT', 'FORUMS')\n    ('ANTS', 'FORUM')\n    ('ARM', 'FOUNTS')\n    ('ARMS', 'FOUNT')\n    ('AUNT', 'FORMS')\n    ('AUNTS', 'FORM')\n    ('AUNTS', 'FROM')\n    ('FAN', 'TUMORS')\n    ('FANS', 'TUMOR')\n    ('FAR', 'MOUNTS')\n    ('FARM', 'SNOUT')\n    ('FARMS', 'UNTO')\n    ('FAST', 'MOURN')\n    ('FAT', 'MOURNS')\n    ('FATS', 'MOURN')\n    ('FAUN', 'STORM')\n    ('FAUN', 'STROM')\n    ('FAUST', 'MORN')\n    ('FAUST', 'NORM')\n    ('FOAM', 'TURNS')\n    ('FOAMS', 'RUNT')\n    ('FOAMS', 'TURN')\n    ('FORMAT', 'SUN')\n    ('FORUM', 'STAN')\n    ('FORUMS', 'NAT')\n    ('FORUMS', 'TAN')\n    ('FOUNT', 'MARS')\n    ('FOUNT', 'RAMS')\n    ('FOUNTS', 'RAM')\n    ('FUR', 'MATSON')\n    ('MASON', 'TURF')\n    ('MOANS', 'TURF')\n</pre><paragraph/></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Sample Exam Questions",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:55.567405+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53354,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47931,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 362173,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362174,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362173,
          "original_id": 326289,
          "lesson_id": 53354,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "ASCII art",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.567405+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/i7O2E0aNcFKMvkPx8E5XbsQN"
        },
        {
          "id": 362174,
          "original_id": 326290,
          "lesson_id": 53354,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "ASCII art",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.567405+10:00",
          "updated_at": null,
          "challenge_id": 119458,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "ASCII art",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:55.76284+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53355,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47932,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362175,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362176,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362177,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362178,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362179,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362175,
          "original_id": 326291,
          "lesson_id": 53355,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Elementary cellular automata",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.76284+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/zdNn0MChFQELUHW7njFAWCEr"
        },
        {
          "id": 362176,
          "original_id": 326292,
          "lesson_id": 53355,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Elementary cellular automata",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.76284+10:00",
          "updated_at": null,
          "challenge_id": 119459,
          "content": ""
        },
        {
          "id": 362177,
          "original_id": 326293,
          "lesson_id": 53355,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Elementary cellular automata",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.76284+10:00",
          "updated_at": null,
          "challenge_id": 119460,
          "content": ""
        },
        {
          "id": 362178,
          "original_id": 326294,
          "lesson_id": 53355,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Elementary cellular automata I",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.76284+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/VMFRD-WNQIw"
        },
        {
          "id": 362179,
          "original_id": 326295,
          "lesson_id": 53355,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Elementary cellular automata II",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.76284+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/0QFtTqS9SXQ"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Elementary cellular automata",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:57.15921+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53361,
      "index": 21,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47938,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384761,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362188,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384761,
          "original_id": null,
          "lesson_id": 53361,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Discrete probability distributions",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:09:51.274082+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/yltMGpB4srv0veEMzpcF4slH"
        },
        {
          "id": 362188,
          "original_id": 326304,
          "lesson_id": 53361,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Discrete probability distributions",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:57.15921+10:00",
          "updated_at": null,
          "challenge_id": 119467,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Discrete probability distributions",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:45.710299+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53334,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47912,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 362094,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 3,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362095,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 2,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362096,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 4,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362097,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367843,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367844,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367845,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367846,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362094,
          "original_id": 330829,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Greetings",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:45.710299+10:00",
          "updated_at": null,
          "challenge_id": 119382,
          "content": "<document version=\"2.0\"><paragraph>Write a program that asks the user for their <bold>name</bold>, and then prints \"<bold>Hello, &lt;name&gt;!</bold>\". Note that <bold>&lt;name&gt;</bold> represents the content of the variable <bold>name</bold>.</paragraph><paragraph><bold>Example</bold></paragraph><pre>Enter your name: Ed\nHello, Ed!</pre><paragraph><bold>Hint:</bold> You'll want to use the <code>input()</code> and <code>print()</code> functions for this challenge.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = input('Message: ')\nprint(message)</snippet-file></snippet></document>"
        },
        {
          "id": 362095,
          "original_id": 330830,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: BMI calculator",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:45.710299+10:00",
          "updated_at": null,
          "challenge_id": 119383,
          "content": "<document version=\"2.0\"><paragraph>Write a program that calculates the user's BMI (body mass index). The formula is:</paragraph><paragraph>$$\\text{BMI} = \\frac{\\text{weight in kilograms}}{(\\text{height in meters})^2} $$</paragraph><paragraph>Example</paragraph><pre>What is your weight in kg? 70\nWhat is your height in m? 1.82\nYour BMI is 21.1</pre></document>"
        },
        {
          "id": 362096,
          "original_id": 330831,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: Odd/even checker",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:45.710299+10:00",
          "updated_at": null,
          "challenge_id": 119384,
          "content": "<document version=\"2.0\"><paragraph>Write a program that asks the user for an <bold>integer</bold> number and then displays whether the number is odd or even.</paragraph><paragraph><bold>Example 1:</bold></paragraph><pre>Enter a number: 23<break/>The number 23 is odd.</pre><paragraph><bold>Example 2:</bold></paragraph><pre>Enter a number: 10<break/>The number 10 is even.</pre></document>"
        },
        {
          "id": 362097,
          "original_id": 326232,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: Temperature conversions",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:45.710299+10:00",
          "updated_at": null,
          "challenge_id": 119385,
          "content": "<document version=\"2.0\"><paragraph>Study the program <bold>fahrenheit_to_celsius.py</bold> and run it in the Terminal window, executing \"<bold>python fahrenheit_to_celsius.py</bold>\". Then complete the program <bold>celsius_to_fahrenheit.py</bold> that displays a conversion table from Celsius degrees to Fahrenheit degrees, with the former ranging from <bold>0 to 100</bold> in steps of <bold>10</bold>; run it and check your solution with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected output.</paragraph><paragraph/></document>"
        },
        {
          "id": 367843,
          "original_id": 328487,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Tax calculator",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T17:22:56.124418+10:00",
          "updated_at": null,
          "challenge_id": 121720,
          "content": "<document version=\"2.0\"><paragraph>Write a <bold>program</bold> that <bold>asks</bold> the user for her <bold>income</bold> and then <bold>displays</bold> the estimated <bold>amount of tax</bold> on her income. Use the Australian Tax Office's <bold>2022-23</bold> calculation method as shown below:</paragraph><pre>0 – $18,200: Nil\n\n$18,201 – $45,000: 19c for each $1 over $18,200\n\n$45,001 – $120,000: $5,092 plus 32.5c for each $1 over $45,000\n\n$120,001 – $180,000: $29,467 plus 37c for each $1 over $120,000\n\n$180,001 and over: $51,667 plus 45c for each $1 over $180,000\n</pre><paragraph>You may assume that the user enters a <bold>valid</bold> income, which is an <bold>integer greater than or equal to zero</bold> (that is, no decimal places), so you don't need to check for invalid input.</paragraph><paragraph>Your program only needs to ask for one income, so you don't need it to keep asking for further incomes.</paragraph><paragraph>You can round the tax to the nearest integer.</paragraph><paragraph>See ATO's <link href=\"https://www.ato.gov.au/single-page-applications/calculatorsandtools?anchor=STC#STC/questions\">Simple tax calculator</link>.</paragraph><paragraph/><paragraph><bold>Examples:</bold></paragraph><pre>What was your income in 2022-23? 76000\nThe estimated tax on your income is $15167</pre><pre>What was your income in 2022-23? 125000\nThe estimated tax on your income is $31317\n</pre><paragraph>To help you check your code, here are some sample incomes and the tax your program should calculate:</paragraph><pre>      $0 income -&gt;      $0 tax\n $10,000 income -&gt;      $0 tax\n $25,000 income -&gt;  $1,292 tax\n $45,000 income -&gt;  $5,092 tax\n$120,001 income -&gt; $29,467 tax\n$120,002 income -&gt; $29,468 tax   \n$140,000 income -&gt; $36,867 tax\n$250,000 income -&gt; $83,167 tax</pre><paragraph/></document>"
        },
        {
          "id": 367844,
          "original_id": 362101,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 6: Word count",
          "index": 87,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:01:42.931247+10:00",
          "updated_at": null,
          "challenge_id": 121721,
          "content": "<document version=\"2.0\"><paragraph>Write a program that asks the user for some text and then says how many words the text contains.</paragraph><paragraph>You may assume that words are separated by a space.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>What is your text? The quick brown fox jumped over the lazy dog\nYour text contains 9 words.\n</pre></document>"
        },
        {
          "id": 367845,
          "original_id": 362103,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 7: Acronym maker",
          "index": 91,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:01:43.041862+10:00",
          "updated_at": null,
          "challenge_id": 121722,
          "content": "<document version=\"2.0\"><paragraph>Write a program that asks the user for a multi-word name and then returns the corresponding acronym.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>What is the name? World Health Organisation\nIts acronym is WHO.</pre></document>"
        },
        {
          "id": 367846,
          "original_id": 362106,
          "lesson_id": 53334,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 8: 24 hour time converter",
          "index": 95,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:01:43.18648+10:00",
          "updated_at": null,
          "challenge_id": 121723,
          "content": "<document version=\"2.0\"><paragraph>Write a program that converts 24 hr times to 12 hr times.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>What is the time? 0637\n0637 is 6:37 am</pre><pre>What is the time? 1423\n1423 is 2:23 pm</pre><pre>What is the time? 1200\n1200 is 12:00 pm</pre><pre>What is the time? 2400\n2400 is 12:00 am\n</pre></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 2",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:46.425696+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53335,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47913,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 362102,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362104,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362105,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362107,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 8,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367847,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367848,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367849,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362110,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362102,
          "original_id": 336286,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Word frequency",
          "index": 87,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:46.425696+10:00",
          "updated_at": null,
          "challenge_id": 119390,
          "content": "<document version=\"2.0\"><paragraph>In the workspace on the right is a file called \"text.txt\" which contains a piece of text (it's the opening passage of Charles Darwin's <italic>On the Origin of Species</italic>).</paragraph><paragraph>Write a program that reads the text in the file and lists each unique word, along with its frequency (i.e., how many times it occurs).</paragraph><paragraph><bold>Example:</bold> (These numbers might not be correct - they're just a guide to the sort of output you should generate.)</paragraph><pre>when: 3\nwe: 3\nlook: 1\nto: 9\nthe: 11\n... etc.</pre><paragraph>Your program should work not only for this file but also for variations. You may assume the following about the text in a file:</paragraph><paragraph><bold>First</bold>. Words are separated by whitespace. In the sample text given all of the whitespace is just a single space. But sometimes it might be multiple spaces, or tabs, or line breaks, etc. Make sure your program can handle all of these different kinds of whitespace. You will find the string method <code>split</code> very helpful. </paragraph><paragraph><bold>Second</bold>. The text might contain punctuation marks (as the sample text does). Make sure that you don't include punctuation marks in words. You could remove them from the text altogether. It will be good enough if your program can handle the following punctuation marks:</paragraph><pre>. ? ! , ; : ( ) [ ] { } \"\n</pre><paragraph>Don't worry about <bold>dashes</bold> and <bold>single quote</bold> marks:</paragraph><pre>- '\n</pre><paragraph>These are tricky, because sometimes they are used as parts of words (e.g., hyphenated words, such as \"sub-variety\", or contractions, such as \"aren't\") and sometimes they are used not as part of words (e.g., as dashes or quote marks). If you feel like a challenge then you could get your program to deal with them correctly, but you're not expected to.</paragraph><paragraph><bold>Third</bold>. Words might occur both with a capital first letter and without a capital first letter (e.g., the sample text contains both \"<bold>When</bold>\" and \"<bold>when</bold>\"). You should consider these to be the same word. You could make all words lowercase, turning \"When\" into \"when\". Or you could make them all upper case, turning both \"When\" and \"when\" into \"WHEN\". It's up to you.</paragraph><heading level=\"2\">Checking your work</heading><paragraph>Note that you can add your own files to the workspace on the right. So you could create your own text file, called, for example, \"<bold>my_text.txt</bold>\", put whatever text you like in that file, and then check your program by getting it to read that file instead of the sample file. You could add something like the following text, which contains things your program should be able to handle:</paragraph><pre>Hello,  world,  hello!\nWorld: hello?\n\nGOODBYE.\n</pre><paragraph>A nice thing about this is that you know what answers you should get: \"hello\" occurs three times, \"world\" occurs twice, and \"goodbye\" occurs once. So, if you're converting words to lowercase then your output should be something like this:</paragraph><pre>hello: 3\nworld: 2\ngoodbye: 1</pre><heading level=\"2\">Optional extra</heading><paragraph>If you're feeling up to it, get the words to appear in <bold>alphabetical</bold> <bold>order</bold>. Even better, get them to appear in <bold>order of frequency</bold>, from the most frequent down to the least frequent. Again, you're not expected to.</paragraph></document>"
        },
        {
          "id": 362104,
          "original_id": 336288,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: Vowel stripper",
          "index": 91,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:46.425696+10:00",
          "updated_at": null,
          "challenge_id": 119392,
          "content": "<document version=\"2.0\"><paragraph>It is sometimes said that English text is still fairly easy to read even if you remove all of the vowels. To test this, write a program that asks the user for a sentence, and then prints the sentence with all of the vowels removed.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>What is your sentence? The quick brown fox jumped over the lazy dog\nHere it is without vowels: Th qck brwn fx jmpd vr th lzy dg\n</pre><paragraph>It might work best if you only <bold>remove</bold> vowels from <italic><bold>inside</bold></italic> words (i.e., not from the beginnings or ends of words). Write an improved version that deals with that.</paragraph></document>"
        },
        {
          "id": 362105,
          "original_id": 336289,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: Fibonacci lister",
          "index": 92,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:46.425696+10:00",
          "updated_at": null,
          "challenge_id": 119393,
          "content": "<document version=\"2.0\"><paragraph>The Fibonacci numbers are a famous sequence of numbers that goes as follows:</paragraph><paragraph>0, 1, 1, 2, 3, 5, 8, 13, ...</paragraph><paragraph>The rule for generating the sequence is this:</paragraph><list style=\"unordered\"><list-item><paragraph>The sequence starts with 0, 1</paragraph></list-item><list-item><paragraph>The next number is the sum of the previous two numbers</paragraph></list-item></list><paragraph>Write a program that prints as many Fibonacci numbers as the user would like. Get the numbers to appear on the same line, separated by commas.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>How many Fibonacci numbers would you like? 10\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34</pre></document>"
        },
        {
          "id": 362107,
          "original_id": 336290,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: ISBN validator",
          "index": 95,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:46.425696+10:00",
          "updated_at": null,
          "challenge_id": 119395,
          "content": "<document version=\"2.0\"><paragraph>An ISBN (International Standard Book Number) is a 10 character string assigned to every commercial book before 2007. Each character is a digit between 0 and 9, but the last character might also be 'X'.</paragraph><paragraph>Write a program that asks the user for an ISBN and determines whether it is valid or not.</paragraph><paragraph>The check for validity goes as follows:</paragraph><list style=\"bullet\"><list-item><paragraph>Multiply each of the first 9 digits by its position. The positions go from 1 to 9.</paragraph></list-item><list-item><paragraph>Add up the 9 resulting products.</paragraph></list-item><list-item><paragraph>Divide this sum by 11, and get the remainder, which is a number between 0 and 10.</paragraph></list-item><list-item><paragraph>If the remainder is 10, the last character should be the letter 'X'. Otherwise, the last character should be the remainder (a single digit).</paragraph></list-item></list><paragraph><bold>Examples:</bold></paragraph><pre>Enter ISBN: 1503290565\n1503290565 is valid</pre><pre>Enter ISBN: 938007834X\n938007834X is valid\n</pre><pre>Enter ISBN: 2222222224\n2222222224 is invalid</pre></document>"
        },
        {
          "id": 367847,
          "original_id": 362098,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Max element and span in a list",
          "index": 102,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:02:29.554685+10:00",
          "updated_at": null,
          "challenge_id": 121724,
          "content": "<document version=\"2.0\"><paragraph>Study the program <bold>max_in_list.py</bold> and run it in the <bold>Terminal</bold> window, executing \"<bold>python max_in_list.py</bold>\". Then complete the program <bold>span.py</bold> that prompts the user for a seed for the random number generator, and for a strictly positive number, <bold>nb_of_elements</bold>, generates a list of nb_of_elements random integers between 0 and 99, prints out the list, computes the difference between the largest and smallest values in the list <bold>without using the built-ins min() and max()</bold>, prints it out, and check that the result is correct using the built-ins; run it and check your solution with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected outputs and sample inputs.</paragraph></document>"
        },
        {
          "id": 367848,
          "original_id": 362099,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 6: Classifying elements in a list",
          "index": 103,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:02:29.663767+10:00",
          "updated_at": null,
          "challenge_id": 121725,
          "content": "<document version=\"2.0\"><paragraph>The operators <bold>/</bold>, <bold>//</bold> and <bold>%</bold> are used for <bold>floating point division</bold>, <bold>integer division</bold>, and <bold>remainder</bold>, respectively.</paragraph><paragraph>Study the program  <bold>modulo_4.py</bold> and run it in the <bold>Terminal</bold> window, executing \"<bold>python modulo_4.py</bold>\". Then complete program <bold>intervals.py</bold> that prompts the user for a strictly positive integer, <bold>nb_of_elements</bold>, generates a <bold>list</bold> of nb_of_elements <bold>random integers</bold> between <bold>0</bold> and <bold>19</bold>, prints out the list, computes the number of elements strictly less than <bold>5</bold>, <bold>10</bold>, <bold>15</bold> and <bold>20</bold>, and <bold>prints</bold> those out; run it and check your solution with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected outputs and sample inputs.</paragraph></document>"
        },
        {
          "id": 367849,
          "original_id": 362100,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 7: Mean, median, and standard deviation",
          "index": 104,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:02:29.79262+10:00",
          "updated_at": null,
          "challenge_id": 121726,
          "content": "<document version=\"2.0\"><paragraph>Complete the program <bold>mean_median_standard_deviation.py</bold> that prompts the user for a strictly positive integer, <bold>nb_of_elements</bold>, generates a list of nb_of_elements random integers between -50 and 50, prints out the list, computes the <bold>mean</bold>, the <bold>median</bold> and the <bold>standard deviation</bold> in two ways, that is, <bold>using</bold> or <bold>not</bold> the <bold>functions</bold> from the <bold>statistics</bold> module, and prints them out.</paragraph><paragraph>To compute the <bold>median</bold>, the easiest way is to first sort the list with the <bold>built-in</bold> <bold>sort()</bold> method.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected outputs and sample inputs.</paragraph></document>"
        },
        {
          "id": 362110,
          "original_id": 326238,
          "lesson_id": 53335,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 8: Perfect numbers",
          "index": 106,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:46.425696+10:00",
          "updated_at": null,
          "challenge_id": 119398,
          "content": "<document version=\"2.0\"><paragraph>A number is perfect if it is equal to the sum of its divisors, itself excluded. For instance, the divisors of 28 distinct from 28 are 1, 2, 4, 7 and 14, and 1+2+4+7+14=28, hence 28 is perfect.</paragraph><paragraph>Insert your code into <bold>perfect.py</bold>. The program prompts the user for an integer N. If the input is incorrect then the program outputs an error message and exits. Otherwise the program outputs all perfect numbers at most equal to N. Implement a naive solution, of quadratic complexity, so it can deal with small values of N only. Execute your program and check your outputs against the expected outputs with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <link href=\"https://en.wikipedia.org/wiki/Perfect_number\">Perfect number</link> and  <link href=\"https://en.wikipedia.org/wiki/List_of_perfect_numbers\">List of perfect numbers</link> (from Wikipedia) for more details.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 3",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:47.394393+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53336,
      "index": 3,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47914,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 362111,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362113,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362114,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362115,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 25,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362116,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362117,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362118,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 367850,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362111,
          "original_id": 340285,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Outlier remover",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119399,
          "content": "<document version=\"2.0\"><paragraph>When you calculate the mean of a collection of numbers the result can be adversely affected by <bold>outliers</bold> - values that are extreme, either extremely small or extremely large.</paragraph><paragraph>Write a program in which you define a function that takes a <bold>list of numbers</bold> as <bold>argument</bold> and <bold>returns</bold> their <bold>mean</bold>, but when it calculates the mean it ignores the smallest number and the largest number. Give your function an informative name.</paragraph><paragraph>Illustrate the use of the function by applying it to some example lists.</paragraph><paragraph>Some things to be careful of:</paragraph><list style=\"bullet\"><list-item><paragraph>Make sure your function <bold>doesn't change the list that it receives</bold>.</paragraph></list-item><list-item><paragraph>Make sure your function <bold>can handle lists that have fewer than 3 elements</bold>.</paragraph></list-item><list-item><paragraph>Make sure your function <bold>can handle lists that contain non-numeric values</bold>.</paragraph></list-item></list></document>"
        },
        {
          "id": 362113,
          "original_id": 340287,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: Memoizer",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119401,
          "content": "<document version=\"2.0\"><paragraph>Suppose you have a <bold>function</bold> that <bold>takes a value</bold> and <bold>returns a value</bold> but the <bold>calculation</bold> it uses <bold>consumes a lot of time and resources</bold>.</paragraph><paragraph>If the function always returns the same value when given the same value, then it can be a good idea to get the function to <bold>remember</bold> the results of its calculations. Then, if the function is passed a value that it has already had, it can simply <bold>recall</bold> the result of the calculation rather than <bold>doing the calculation</bold> again. This technique is called <bold>memoization</bold>.</paragraph><paragraph>Write a program in which you define a <bold>function</bold> that <bold>finds the cube of a number</bold>. Get it to <bold>use memoization</bold>. Memoization is not really needed in this case, because the calculation is not time or resource intensive, but it will <bold>illustrate the principles</bold>.</paragraph><paragraph>Here is one way to proceed:</paragraph><list style=\"bullet\"><list-item><paragraph>Define your function as normal</paragraph></list-item><list-item><paragraph>Add an <bold>attribute</bold> to the function, whose value is a <bold>dictionary</bold>.</paragraph></list-item><list-item><paragraph>When the function is called with a number it can check this dictionary to see if it has a result saved. If it does, it can return this saved result. Otherwise, it can calculate the result, add it to the dictionary, and return the result.</paragraph></list-item></list><list style=\"bullet\"/><paragraph/></document>"
        },
        {
          "id": 362114,
          "original_id": 340288,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: List mapper",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119402,
          "content": "<document version=\"2.0\"><paragraph>Write a program in which you define a function <code>map()</code>, which takes a <bold>function</bold> and a <bold>list</bold> and applies the function to each element of the list, <bold>returning the results as a list</bold>.</paragraph><paragraph>Examples:</paragraph><pre>x = map(abs, [-2, 4, -6, -8])\nprint(x)\n[2, 4, 6, 8]\n</pre></document>"
        },
        {
          "id": 362115,
          "original_id": 340284,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: Roman numerals",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119403,
          "content": "<document version=\"2.0\"><paragraph>Write a program that prints out the <bold>decimal</bold> value of a <bold>Roman numeral</bold>.</paragraph><paragraph>Your program should accept the Roman numeral from the <bold>command line arguments</bold>. Click on <bold>Terminal</bold> to activate the terminal. </paragraph><paragraph>You may assume the Roman numeral is in the \"<bold>standard</bold>\" form, i.e., any digits involving <bold>4</bold> and <bold>9</bold> will always appear in the <bold>subtractive form</bold>.</paragraph><heading level=\"2\">Sample interactions</heading><pre>python roman_numerals.py II\n2</pre><pre>python roman_numerals.py IV\n4</pre><pre>python roman_numerals.py IX\n9</pre><pre>python roman_numerals.py XIX\n19</pre><pre>python roman_numerals.py XX\n20</pre><pre>python roman_numerals.py MDCCLXXVI\n1776</pre><pre>python roman_numerals.py MMXIX\n2019</pre><paragraph>Hints:</paragraph><list style=\"bullet\"><list-item><paragraph>Use a loop to iterate through the Roman numeral to figure out their value.</paragraph></list-item><list-item><paragraph>Use a <bold>list of tuples</bold> to store the string characters and their respective values. Compare the characters from the input to this list.</paragraph></list-item><list-item><paragraph>Use a <code>while</code> loop so you can manually control the indices.</paragraph></list-item></list></document>"
        },
        {
          "id": 362116,
          "original_id": 326239,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Finding particular sequences of prime numbers",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119404,
          "content": "<document version=\"2.0\"><paragraph>Insert your code into <bold>consecutive_primes.py</bold> to find all <bold>sequences</bold> of <bold>6 consecutive prime 5-digit numbers</bold>, say $(a, b, c, d, e, f)$, with $b = a + 2$, $c = b + 4$, $d = c + 6$, $e = d + 8$, and $f = e + 10$.</paragraph><paragraph>$a$, $b$, $c$, $d$, $e$, and $f$ are therefore all <bold>5-digit prime numbers</bold> and <bold>no number</bold> between $a$ and $b$, between $b$ and $c$, between $c$ and $d$, between $d$ and $e$, and between $e$ and $f$ <bold>is prime</bold>.</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold>consecutive_primes_scaffold.py</bold>.</paragraph></document>"
        },
        {
          "id": 362117,
          "original_id": 326240,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 6: Special products",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119405,
          "content": "<document version=\"2.0\"><paragraph>Insert your code into <bold>special_products.py</bold> to find all <bold>triples</bold> of positive integers $(i, j, k)$ such that $i$, $j$, and $k$ are <bold>two digit numbers</bold>, no digit occurs more than once in $i$, $j$, and $k$, and the set of digits that occur in $i$, $j$, or $k$ is equal to the set of digits that occur in the product of $i$, $j$, and $k$.</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold>special_products_scaffold_1.py</bold>. If you are still stuck, but only when you are still stuck, then use <bold>special_products_scaffold_2.py</bold>.</paragraph></document>"
        },
        {
          "id": 362118,
          "original_id": 326241,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 7: Finding particular sequences of triples of the form (n, n+1, n+2)",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:47.394393+10:00",
          "updated_at": null,
          "challenge_id": 119406,
          "content": "<document version=\"2.0\"><paragraph>Write a program called <bold>special_triples.py</bold> that finds all <bold>triples</bold> of <bold>consecutive positive three-digit integers</bold> each of which is the <bold>sum of two squares</bold>, that is, all triples of the form $(n,n+1,n+2)$ such that:</paragraph><list style=\"bullet\"><list-item><paragraph>$n$, $n+1$ and $n+2$ are integers <bold>at least equal to 100</bold> and <bold>at most equal to 999</bold>;</paragraph></list-item><list-item><paragraph>each of $n$, $n+1$ and $n+2$ is of the form <bold>$a^2+b^2$</bold>.</paragraph></list-item></list><paragraph><bold>Hint:</bold> As we are not constrained by memory space for this problem, we might use a list that stores an integer for all indexes $n$ in $[100,999]$, equal to 1 in case $n$ is the sum of two squares, and to 0 otherwise. Then it is just a matter of finding three consecutive 1's in the list. This idea can be refined (by not storing 1s, but suitable nonzero values) to not only know that some number is of the form $a^2+b^2$, but also know such a pair $(a,b)$.</paragraph><paragraph>If an integer $n$ is of the form $a^2+b^2$, then the decomposition is not necessarily unique. We want each decomposition that is output to be the minimal one w.r.t. the natural ordering of pairs of integers (that is, $(a,b)&lt;(a',b')$ iff either $a&lt;a'$ or $a=a'$ and $b&lt;b'$).</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold>special_triples_scaffold.py</bold>.</paragraph></document>"
        },
        {
          "id": 367850,
          "original_id": 362108,
          "lesson_id": 53336,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 8: Number of trailing 0s in a factorial",
          "index": 99,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-31T18:05:20.571752+10:00",
          "updated_at": null,
          "challenge_id": 121727,
          "content": "<document version=\"2.0\"><paragraph>To illustrate, <bold>15!</bold>, the factorial of 15, is equal to 1307674368<bold>000</bold>, hence has 3 <bold>trailing 0s</bold>.</paragraph><paragraph>There are at least <bold>three methods</bold> to compute the number of trailing 0s in the factorial of a number N at least equal to 5:</paragraph><list style=\"number\"><list-item><paragraph>Divide N! by 10 for as long as it yields no remainder. Note that for a positive integer x, x // 10 \"removes\" the rightmost digit from x, that digit being equal to x % 10.<break/></paragraph></list-item><list-item><paragraph>Convert N! into a string and find the rightmost occurrence of a character different to 0. A Google search, or executing dir(str) at the python prompt, suggests which string method to use. Note that negative indexes (-1 being the index of the last character in a string, -2 the index of the penultimate character in a string, etc.) is particularly convenient here.<break/></paragraph></list-item><list-item><paragraph>Python computes such huge numbers as 1000!, either iteratively multiplying all numbers from 1 up to 1000 or using factorial() from the math module (executing import math and then dir(math) at the python prompt confirms that this function is available), and the first two methods work for such numbers, but there is a much better method that operates on N rather N!, hence that does not suffer the limitations of the first two, and is very efficient. The number of trailing 0s in N! is equal to the number of times N! is a multiple of 10, so to the number of times N! is a multiple of 2 x 5. It is easy to verify that N! has at least as many multiples of 2 as multiples of 5. Hence the number of trailing 0s in N!</paragraph><list style=\"bullet\"><list-item><paragraph>is equal to the number of times N! is a multiple of 5</paragraph></list-item><list-item><paragraph>which is equal to the number of times 5 occurs in the prime decompositions of 1, 2, ..., N-1 and N</paragraph></list-item><list-item><paragraph>which is equal to the number of times 5 occurs at least once in the prime decompositions of 1, 2, ..., N-1 and N, plus the number of times 5 occurs at least twice in the prime decompositions of 1, 2, ..., N-1 and N, plus the number of times 5 occurs at least thrice in the prime decompositions of 1, 2, ..., N-1 and N...</paragraph></list-item><list-item><paragraph>which is equal to the number of multiples of 5 at most equal to N, plus the number of multiples of 5^2 at most equal to N, plus the number of multiples of 5^3 at most equal to N ...</paragraph></list-item></list></list-item></list><paragraph>Insert your code into <bold>trailing_0s_in_factorials.py</bold> so that the program prompts the user for a non-negative integer N. If the input is incorrect then the program outputs an error message and exits. Otherwise the program computes 5! three times, using the three methods just described. See sample outputs for details on input and ouput. If you are stuck, but only when you are stuck, then use <bold>trailing_0s_in_factorial_scaffold_1.py</bold>. If you are still stuck, but only when you are still stuck, then use <bold>trailing_0s_in_factorial_scaffold_2.py</bold>.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 4",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-06-20T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:52.680081+10:00",
      "due_at": "2024-06-27T21:00:00+10:00",
      "effective_available_at": "2024-06-20T19:15:00+10:00",
      "effective_due_at": "2024-06-27T21:00:00+10:00",
      "effective_locked_at": "2024-06-30T21:00:00+10:00",
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53345,
      "index": 3,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": "2024-06-30T21:00:00+10:00",
      "module_id": 11530,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 47923,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": true,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": true,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 362147,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362147,
          "original_id": 326270,
          "lesson_id": 53345,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Quiz 3",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:52.680081+10:00",
          "updated_at": null,
          "challenge_id": 119434,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This quiz is worth <bold>4 marks</bold>.</paragraph><paragraph/><paragraph><bold>Marking</bold><break/><break/>  <bold>Representation of the integer in base 3  1.25 marks</bold><break/>  <bold>Corresponding sequence of arrows          1.25 marks</bold><break/>  <bold>Sequence of arrows nicely displayed       1.50 marks</bold><break/> <bold>--------------------------------------------------------------------------------</bold><break/>  <bold>Total                                                                   4.00 marks</bold></paragraph><paragraph/><paragraph><bold>Quiz 3</bold> is due <bold>Week 5 Thursday 27 June 2024 @ 9.00pm (Sydney time)</bold>.</paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 3 days</bold> from the due date, that is, any late submission after <bold>Week 5 Sunday 30 June 2024 @ 9.00pm</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>quiz_3.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>.  It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for Quiz 3.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/2DkKzfDEUcH7QBqi13qMwlLp\" filename=\"quiz_3.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-07-01T02:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Quiz 3",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:48.176957+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53337,
      "index": 4,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47915,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 372911,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362119,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 373641,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362120,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 3,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362121,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 3,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362122,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362123,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 370980,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 372911,
          "original_id": 362112,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Fibonacci maker",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-15T12:20:13.745042+10:00",
          "updated_at": null,
          "challenge_id": 123408,
          "content": "<document version=\"2.0\"><paragraph>Recall the Fibonacci numbers from practice exercise <bold>Week 3 Exercise 3: Fibonacci lister</bold>:</paragraph><paragraph>0, 1, 1, 2, 3, 5, 8, 13, ...</paragraph><paragraph>Write a program that returns a requested Fibonacci number, this time using a <bold>recursive function</bold>.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>Which Fibonacci number would you like? 1\nIt is 0.</pre><pre>Which Fibonacci number would you like? 8\nIt is 13.</pre><pre>Which Fibonacci number would you like? 12\nIt is 89.</pre></document>"
        },
        {
          "id": 362119,
          "original_id": 342269,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: Prime factoriser",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.176957+10:00",
          "updated_at": null,
          "challenge_id": 119407,
          "content": "<document version=\"2.0\"><paragraph>Write a program that asks the user for a number and then factorises the number into primes.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>Enter a number: 345\n345 = 3 x 5 x 23\n</pre><pre>Enter a number: 612\n612 = 2 x 2 x 3 x 3 x 17</pre><pre>Enter a number: 127\n127 = 127</pre></document>"
        },
        {
          "id": 373641,
          "original_id": 362126,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: Longest sequence of consecutive letters",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-21T11:32:29.374431+10:00",
          "updated_at": null,
          "challenge_id": 123653,
          "content": "<document version=\"2.0\"><paragraph>Write a program <bold><code>longest_sequence.py</code></bold> that prompts the user for a string <bold>w</bold> of lowercase letters and outputs the longest sequence of consecutive letters that occur in <bold>w</bold>, but with possibly other letters in between, starting as close as possible to the beginning of <bold>w</bold>.</paragraph><paragraph>Insert your code into <code><bold>longest_sequence.py</bold></code>.</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold><code>longest_sequence_scaffold.py</code></bold>.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>Please input a string of lowercase letters: a\nThe solution is: a\n</pre><pre>Please input a string of lowercase letters: abcefgh\nThe solution is: efgh\n</pre><pre>Please input a string of lowercase letters: abcefg\nThe solution is: abc\n</pre><pre>Please input a string of lowercase letters: ablccmdnneofffpg\nThe solution is: abcdefg\n</pre><pre>Please input a string of lowercase letters: abcdiivjwkaalbmmbz\nThe solution is: ijklm\n</pre><pre>Please input a string of lowercase letters: abcpqrstuvwxbcbcddddeffghijklrst\nThe solution is: abcdefghijkl\n</pre><paragraph/><paragraph/></document>"
        },
        {
          "id": 362120,
          "original_id": 326242,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: A triangle of characters",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.176957+10:00",
          "updated_at": null,
          "challenge_id": 119408,
          "content": "<document version=\"2.0\"><paragraph>Write a program <bold><code>characters_triangle.py</code></bold> that gets a strictly positive integer <bold>N</bold> as input and outputs a</paragraph><paragraph>triangle of height <bold>N</bold>. For instance, when <bold>N = 5</bold>, the triangle looks like this:</paragraph><figure><image src=\"https://static.edusercontent.com/files/8Qq6hZXLTMIgUbtFDotik30R\" width=\"109\" height=\"116\"/></figure><paragraph>Two built-in functions are useful for this exercise:</paragraph><list style=\"bullet\"><list-item><paragraph><bold><code>ord()</code></bold> returns the integer that encodes the character provided as argument;</paragraph></list-item><list-item><paragraph><bold><code>chr()</code></bold> returns the character encoded by the integer provided as argument.</paragraph></list-item></list><paragraph>For instance:</paragraph><pre>&gt;&gt;&gt; ord('A')\n65\n\n&gt;&gt;&gt; chr(65)\n'A'\n</pre><paragraph>Consecutive uppercase letters are encoded by consecutive integers. For instance:</paragraph><pre>&gt;&gt;&gt; ord('A'), ord('B'), ord('C')\n(65, 66, 67)\n</pre><paragraph>Insert your code into <bold><code>characters_triangle.py</code></bold>. If you are stuck, but only when you are stuck, then use <bold><code>characters_triangle_scaffold_1.py</code></bold>.</paragraph></document>"
        },
        {
          "id": 362121,
          "original_id": 326243,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Pascal triangle",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.176957+10:00",
          "updated_at": null,
          "challenge_id": 119409,
          "content": "<document version=\"2.0\"><paragraph>Write a program <code><bold>pascal_triangle.py</bold></code> that prompts the user for a number <bold>N</bold> and prints out the first <bold>N + 1</bold> lines of Pascal triangle, making sure the numbers are nicely aligned, as illustrated below for N = <bold>3</bold>, <bold>7</bold> and <bold>11</bold> respectively:</paragraph><figure><image src=\"https://static.edusercontent.com/files/EUdbRG48kueRTKrIdx46dggR\" width=\"82\" height=\"85\"/></figure><figure><image src=\"https://static.edusercontent.com/files/7Q5kkEH7exZ4x2ce7ZQk70Sh\" width=\"239\" height=\"146\"/></figure><figure><image src=\"https://static.edusercontent.com/files/b8yO6RAcBJ8NbpeA6t0UebCF\" width=\"455\" height=\"189\"/></figure><paragraph>Insert your code into <bold><code>pascal_triangle.py</code></bold></paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold><code>pascal_triangle_scaffold_1.py</code></bold>.</paragraph></document>"
        },
        {
          "id": 362122,
          "original_id": 326244,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 6: Hasse diagrams",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.176957+10:00",
          "updated_at": null,
          "challenge_id": 119410,
          "content": "<document version=\"2.0\"><paragraph>Let a strictly positive integer <bold>n</bold> be given. Let <bold>D</bold> be the set of divisors of <bold>n</bold>. Let <bold>k</bold> be the number of prime divisors of <bold>n</bold> (that is, the number of prime numbers in <bold>D</bold>). The members of <bold>D</bold> can be arranged as the vertices of a solid in a <bold>k</bold>-dimensional space as illustrated below for <bold>n = 12</bold> (in which case <bold>D = {1,2,3,4,6,12}</bold> and <bold>k = 2</bold>) and for <bold>n = 30</bold> (in which case <bold>D = {1,2,3,5,6,10,15,30}</bold> and <bold>k = 3</bold>).<break/></paragraph><list style=\"bullet\"><list-item><paragraph>Each of the solids' vertices is associated with two collections of nodes: those \"directly below'' it, and those \"directly above'' it. In particular, the prime divisors of <bold>n</bold> are \"directly above'' <bold>1</bold>, and no vertex is below <bold>1</bold>; <bold>n</bold> has exactly <bold>k</bold> vertices \"directly below'' it, and no vertex is above <bold>n</bold>. This suggests considering a dictionary whose keys are the members of <bold>D</bold> (inserted from smallest to largest), and as value for a given key <bold>d</bold>, the pair of ordered lists of members of <bold>D</bold> \"directly below'' <bold>d</bold> and \"directly above'' <bold>d</bold>, respectively.<break/></paragraph></list-item><list-item><paragraph>The solids exhibit <bold>k</bold> distinct \"edge directions'', one for each prime divisor of <bold>n</bold>, defining a partition of the solids' edges. One can represent this partition as a dictionary whose keys are the prime divisors of <bold>n</bold> (inserted from smallest to largest), and as value for a given key <bold>p</bold>, the ordered list of ordered pairs of members of <bold>D</bold> that make up the endpoints of the edges whose \"direction'' is associated with <bold>p</bold>.</paragraph></list-item></list><figure><image src=\"https://static.edusercontent.com/files/fUYHVADq6615ENRYgQ5GK9rU\" width=\"313\" height=\"536\"/></figure><paragraph>The program <bold><code>hasse_diagram.py</code></bold> defines a function <code><bold>make_hasse_diagram()</bold></code> that returns a named tuple <code><bold>HasseDiagram</bold></code> with three attributes:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>factors</bold>, for a dictionary whose keys are the members of <bold>D</bold>, and as value for a given key <bold>d</bold> (<bold>1</bold> excepted), a string that represents the prime decomposition of <bold>d</bold>, using <bold>x</bold> for multiplication and <bold>^</bold> for exponentiation, displaying only exponents greater than <bold>1</bold>;<break/></paragraph></list-item><list-item><paragraph><bold>vertices</bold>, for the first dictionary previously defined;<break/></paragraph></list-item><list-item><paragraph><bold>edges</bold>, for the second dictionary previously defined.</paragraph></list-item></list><paragraph>Replace <code><bold>pass</bold></code> in <bold><code>hasse_diagram.py</code></bold> with your code.</paragraph><paragraph>Except for <bold><code>namedtuple</code></bold>, <code><bold>hasse_diagram.py</bold></code> imports a number of classes and functions from various modules that are used in the solution, but that other good solutions will make no use of.</paragraph></document>"
        },
        {
          "id": 362123,
          "original_id": 326245,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 7: Encoding pairs of integers as natural numbers",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.176957+10:00",
          "updated_at": null,
          "challenge_id": 119411,
          "content": "<document version=\"2.0\"><paragraph>Complete the program <bold><code>plane_encoding.py</code></bold> that implements a function <bold><code>encode(a, b)</code></bold> and a function <bold><code>decode(n)</code></bold> for the one-to-one mapping from the set of pairs of integers onto the set of natural numbers, that can be graphically described as follows:</paragraph><figure><image src=\"https://static.edusercontent.com/files/CTWCWzFQVwBxVwG7oTFHmJxo\" width=\"207\" height=\"200\"/></figure><paragraph>That is, starting from the point <code>(0, 0)</code> of the plane, we move to <code>(1, 0)</code> and then spiral counterclockwise:</paragraph><list style=\"bullet\"><list-item><paragraph><code>encode(0,0)</code> returns <code>0</code> and <code>decode(0)</code> returns <code>(0,0)</code></paragraph></list-item><list-item><paragraph><code>encode(1,0)</code> returns <code>1</code> and <code>decode(1)</code> returns <code>(1,0)</code></paragraph></list-item><list-item><paragraph><code>encode(1,1)</code> returns <code>2</code> and <code>decode(2)</code> returns <code>(1,1)</code></paragraph></list-item><list-item><paragraph><code>encode(0,1)</code> returns <code>3</code> and <code>decode(3)</code> returns <code>(0,1)</code></paragraph></list-item><list-item><paragraph><code>encode(-1,1)</code> returns <code>4</code> and <code>decode(4)</code> returns <code>(-1,1)</code></paragraph></list-item><list-item><paragraph><code>encode(-1,0)</code> returns <code>5</code> and <code>decode(5)</code> returns <code>(-1,0)</code></paragraph></list-item><list-item><paragraph><code>encode(-1,-1)</code> returns <code>6</code> and <code>decode(6)</code> returns <code>(-1,-1)</code></paragraph></list-item><list-item><paragraph><code>encode(0,-1)</code> returns <code>7</code> and <code>decode(7)</code> returns <code>(0,-1)</code></paragraph></list-item><list-item><paragraph><code>encode(1,-1)</code> returns <code>8</code> and <code>decode(8)</code> returns <code>(1,-1)</code></paragraph></list-item><list-item><paragraph><code>encode(2,-1)</code> returns <code>9</code> and <code>decode(9)</code> returns <code>(2,-1)</code><break/> . . . </paragraph></list-item></list></document>"
        },
        {
          "id": 370980,
          "original_id": 362109,
          "lesson_id": 53337,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 8: Decoding a multiplication",
          "index": 103,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-10T11:48:10.371961+10:00",
          "updated_at": null,
          "challenge_id": 122966,
          "content": "<document version=\"2.0\"><paragraph>We want to decode all multiplications of the form</paragraph><figure><image src=\"https://static.edusercontent.com/files/VZ2185U4AJPBVhgfQt88nAqg\" width=\"144\" height=\"144\"/></figure><paragraph>such that the sum of all digits in all 4 columns is constant.</paragraph><paragraph>Insert your code into <bold>decoded_multiplication.py</bold>. There are actually two solutions, see expected output for details on what it should be. If you are stuck, but only when you are stuck, then use <bold>decoded_multiplication_scaffold.py</bold>.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 5",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:49.180409+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53339,
      "index": 6,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47917,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362128,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 4,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362129,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 7,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362130,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362132,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 381772,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362128,
          "original_id": 326250,
          "lesson_id": 53339,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Obtaining a sum from a subsequence of digits",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:49.180409+10:00",
          "updated_at": null,
          "challenge_id": 119416,
          "content": "<document version=\"2.0\"><paragraph>Write a program <code>sum_of_digits.py</code> that prompts the user for two natural numbers, say <code>available_digits</code> and <code>desired_sum</code>, and outputs the number of ways of selecting digits from <code>available_digits</code> that sum up to <code>desired_sum</code>. For instance, if <code>available_digits</code> is <code>12234</code> and sum is <code>5</code> then there are four (4) solutions:</paragraph><list style=\"bullet\"><list-item><paragraph>one solution is obtained by selecting 1 and both occurrences of 2 (1+2+2 = 5);</paragraph></list-item><list-item><paragraph>one solution is obtained by selecting 1 and 4 (1+4 = 5);</paragraph></list-item><list-item><paragraph>one solution is obtained by selecting the first occurrence of 2 and 3 (2+3 = 5);</paragraph></list-item><list-item><paragraph>one solution is obtained by selecting the second occurrence of 2 and 3 (2+3 = 5).</paragraph></list-item></list><paragraph>Here are possible interactions:</paragraph><pre>Input a number that we will use as available digits: 12234\nInput a number that represents the desired sum: 5\nThere are 4 solutions.\n</pre><pre>Input a number that we will use as available digits: 11111\nInput a number that represents the desired sum: 5\nThere is a unique solution.\n</pre><pre>Input a number that we will use as available digits: 11111\nInput a number that represents the desired sum: 6\nThere is no solution.\n</pre><pre>Input a number that we will use as available digits: 1234321\nInput a number that represents the desired sum: 5\nThere are 10 solutions. \n</pre><paragraph>Insert your code into <code>sum_of_digits.py</code></paragraph><paragraph>If you are stuck, but only when you are stuck, then use <code>sum_of_digits_scaffold.py</code>.</paragraph></document>"
        },
        {
          "id": 362129,
          "original_id": 326251,
          "lesson_id": 53339,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: Merging two strings into a third one",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:49.180409+10:00",
          "updated_at": null,
          "challenge_id": 119417,
          "content": "<document version=\"2.0\"><paragraph>Say that two strings <bold>s1</bold> and <bold>s2</bold> can be merged into a third string <bold>s3</bold> if <bold>s3</bold> is obtained from <bold>s1</bold> by inserting arbitrarily in <bold>s1</bold> the characters in <bold>s2</bold>, respecting their order. For instance, the two strings <bold>ab</bold> and <bold>cd</bold> can be merged into <bold>abcd</bold>, or <bold>cabd</bold>, or <bold>cdab</bold>, or <bold>acbd</bold>, or <bold>acdb</bold>, ..., but <bold>not</bold> into <bold>adbc</bold> nor into <bold>cbda</bold>. Write a program <code>merging_strings.py</code> that prompts the user for 3 strings and displays the output as follows:</paragraph><list style=\"bullet\"><list-item><paragraph>If no string can be obtained from the other two by merging, then the program outputs that there is no solution.</paragraph></list-item><list-item><paragraph>Otherwise, the program outputs which of the strings can be obtained from the other two by merging.</paragraph></list-item></list><paragraph>Here are possible interactions:</paragraph><pre>Please input the first string: ab\nPlease input the second string: cd\nPlease input the third string: abcd\nThe third string can be obtained by merging the other two.\n</pre><pre>Please input the first string: ab\nPlease input the second string: cdab\nPlease input the third string: cd\nThe second string can be obtained by merging the other two.\n</pre><pre>Please input the first string: abcd\nPlease input the second string: cd\nPlease input the third string: ab\nThe first string can be obtained by merging the other two.\n</pre><pre>Please input the first string: ab\nPlease input the second string: cd\nPlease input the third string: adcb\nNo string can be merged from the other two.\n</pre><pre>Please input the first string: aaaaa\nPlease input the second string: a\nPlease input the third string: aaaa\nThe first string can be obtained by merging the other two.\n</pre><pre>Please input the first string: aaab\nPlease input the second string: abcab\nPlease input the third string: aaabcaabb\nThe third string can be obtained by merging the other two.\n</pre><pre>Please input the first string: ??got\nPlease input the second string: ?it?go#t##\nPlease input the third string: it###\nThe second string can be obtained by merging the other two.\n</pre><paragraph>Insert your code into <code>merging_strings.py</code>.</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <code>merging_strings_scaffold.py</code>.</paragraph></document>"
        },
        {
          "id": 362130,
          "original_id": 326252,
          "lesson_id": 53339,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: Eight puzzle",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:49.180409+10:00",
          "updated_at": null,
          "challenge_id": 119418,
          "content": "<document version=\"2.0\"><paragraph>Dispatch the integers from <bold>0</bold> to <bold>8</bold>, with 0 possibly changed to <bold>None</bold>, as a list of 3 lists of size 3, to represent a <bold>9 puzzle</bold>.</paragraph><paragraph>For instance, let  <bold>[[4, 0, 8], [1, 3, 7], [5, 2, 6]]</bold> or <bold>[[4, None ,8], [1, 3, 7], [5, 2, 6]]</bold> represent the <bold>9 puzzle</bold></paragraph><figure><image src=\"https://static.edusercontent.com/files/pYAfXY0ekf8yTcW1TJhjiENU\" width=\"128\" height=\"133\"/></figure><paragraph>with the 8 integers being printed on 8 tiles that are placed in a frame with one location being tile free.</paragraph><paragraph>The aim is to slide tiles horizontally or vertically so as to eventually reach the configuration</paragraph><figure><image src=\"https://static.edusercontent.com/files/5Tac0aJ1aFewEO0wSndb4JNk\" width=\"128\" height=\"135\"/></figure><paragraph>It can be shown that the puzzle is solvable iff the permutation of the integers 1, ..., 8, determined by reading those integers off the puzzle from top to bottom and from left to right, is even. This is clearly a necessary condition since:</paragraph><list style=\"bullet\"><list-item><paragraph>sliding a tile horizontally does not change the number of inversions;</paragraph></list-item><list-item><paragraph>sliding a tile vertically changes the number of inversions by -2, 0 or 2;</paragraph></list-item><list-item><paragraph>the parity of the identity is even. </paragraph></list-item></list><paragraph>Complete the program <code>eight_puzzle.py</code> so as to have the functionality of the two functions:</paragraph><list style=\"bullet\"><list-item><paragraph><code>validate_8_puzzle(grid)</code> that prints out whether or not grid is a valid representation of a solvable 8 puzzle;</paragraph></list-item></list><list style=\"bullet\"><list-item><paragraph><code>solve_8_puzzle(grid)</code> that, assuming that grid is a valid representation of a solvable 8 puzzle, outputs a solution to the puzzle characterised as follows:</paragraph></list-item></list><list style=\"bullet\"><list-item><list style=\"bullet\"><list-item><paragraph>the number of moves is minimal;</paragraph></list-item></list></list-item></list><list style=\"bullet\"><list-item><list style=\"bullet\"><list-item><paragraph>at every stage, the preferences of the tile to slide are, from most preferred to least preferred:</paragraph><list style=\"bullet\"><list-item><paragraph>the tile above the empty cell (provided the latter is not in the top row), then</paragraph></list-item><list-item><paragraph>the tile to the left of the empty cell (provided the latter is not in the left column), then</paragraph></list-item><list-item><paragraph>the tile to the right of the empty cell (provided the latter is not in the right column), then</paragraph></list-item><list-item><paragraph>the tile below the empty cell (provided the latter is not in the bottom row).</paragraph></list-item></list></list-item></list></list-item></list></document>"
        },
        {
          "id": 362132,
          "original_id": 326254,
          "lesson_id": 53339,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: Magic squares",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:49.180409+10:00",
          "updated_at": null,
          "challenge_id": 119420,
          "content": "<document version=\"2.0\"><paragraph>Given a positive integer $n$, a magic square of order $n$ is a matrix of size $n \\times n$ that stores all numbers from 1 up to $n^2$ and such that the sum of the $n$ rows, the sum of the $n$ columns, and the sum of the two diagonals is constant, hence equal to $n(n^2+1)/2$.</paragraph><paragraph>Implement in the file <code>magic_squares.py</code> the function <code>print_square(square)</code>, that prints a list of lists that represents a square, and the function <code>is_magic_square(square)</code>, that checks whether a list of lists is a magic square.</paragraph><heading level=\"2\">Examples of execution:</heading><pre># Examples of execution\nprint(is_magic_square([[2,7,6], [1,5,9], [4,3,8]])) # False\nprint(is_magic_square([[2,7,6], [9,5,1], [4,3,8]])) # True\nprint(is_magic_square([[8,1,6],[3,5,7],[4,9,2]])) # True\nprint_square([[8,1,6],[3,5,7],[4,9,2]])\n\nFalse\nTrue\nTrue\n8 1 6\n3 5 7\n4 9 2\n</pre><paragraph/></document>"
        },
        {
          "id": 381772,
          "original_id": 328508,
          "lesson_id": 53339,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: The numbers round",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-10T19:24:07.293313+10:00",
          "updated_at": null,
          "challenge_id": 126099,
          "content": "<document version=\"2.0\"><paragraph>On the quiz show \"Letters and Numbers\" there is a round in which contestants are given <bold>six</bold> <bold>ingredient numbers</bold> and <bold>one</bold> <bold>target number</bold>, and their challenge is to apply arithmetic operations (<bold>addition</bold>, <bold>subtraction</bold>, <bold>multiplication</bold>, and <bold>division</bold>) to one or more of the ingredient numbers to get the target number. For example:</paragraph><pre>Ingredient numbers: 1, 2, 6, 10, 75, 100  \nTarget number: 582\nPossible answer: (100 - (2 + 1)) × 6 = 582\nPossible answer: ((100 - 2) - 1)) × 6 = 582\nPossible answer: (6 x 100) - (2 x (10 - 1)) = 582\n</pre><paragraph>The ingredient numbers are chosen randomly as follows:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>0-4</bold> <bold>large numbers</bold>, chosen from {<bold>25, 50, 75, 100</bold>} with <bold>no repeats</bold></paragraph></list-item><list-item><paragraph>The remaining are all <bold>small numbers</bold>, chosen from {<bold>1, 2, 3, ..., 10</bold>} with <bold>no repeats</bold></paragraph></list-item></list><paragraph>Each ingredient number can only be used <bold>once</bold>, but they need not all be used. No fractions are allowed at any stage of the calculation.</paragraph><paragraph>The <bold>target</bold> number is also chosen <bold>randomly</bold> from <bold>100 to 1000</bold>.</paragraph><paragraph><bold>Your challenge is to write a program that is given the ingredient numbers and the target number and calculates all possible answers (if any)</bold>.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 8",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:54.631875+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53352,
      "index": null,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11532,
      "number": -1,
      "openable": false,
      "openable_without_attempt": true,
      "original_id": 51861,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 7,
      "slide_marks_summary": [
        {
          "id": 362163,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362164,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362165,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362166,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362167,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362168,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362169,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362163,
          "original_id": 353035,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 1",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119449,
          "content": ""
        },
        {
          "id": 362164,
          "original_id": 353036,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 2",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119450,
          "content": ""
        },
        {
          "id": 362165,
          "original_id": 353037,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 3",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119451,
          "content": ""
        },
        {
          "id": 362166,
          "original_id": 353038,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 4",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119452,
          "content": ""
        },
        {
          "id": 362167,
          "original_id": 353039,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 5",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119453,
          "content": ""
        },
        {
          "id": 362168,
          "original_id": 353040,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 6",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119454,
          "content": ""
        },
        {
          "id": 362169,
          "original_id": 353041,
          "lesson_id": 53352,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Sample 2 Question 7",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:54.631875+10:00",
          "updated_at": null,
          "challenge_id": 119455,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Sample Exam Questions 2",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:55.331163+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53353,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47930,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 3,
      "slide_marks_summary": [
        {
          "id": 362170,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362171,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362172,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362170,
          "original_id": 326286,
          "lesson_id": 53353,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Loans and savings",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.331163+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/HTLWLhUBcWd456f9HtPXd3GV"
        },
        {
          "id": 362171,
          "original_id": 326287,
          "lesson_id": 53353,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Loans and savings",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.331163+10:00",
          "updated_at": null,
          "challenge_id": 119456,
          "content": ""
        },
        {
          "id": 362172,
          "original_id": 326288,
          "lesson_id": 53353,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "loans_and_savings.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:55.331163+10:00",
          "updated_at": null,
          "challenge_id": 119457,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Loans and savings",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:57.719702+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53364,
      "index": 27,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11533,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47941,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 384758,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362191,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384758,
          "original_id": null,
          "lesson_id": 53364,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Pure Prolog",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:01:25.339074+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/CWVN4qrwjAzwVp8hwz7et7Gh"
        },
        {
          "id": 362191,
          "original_id": 326307,
          "lesson_id": 53364,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Pure Prolog",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:57.719702+10:00",
          "updated_at": null,
          "challenge_id": 119470,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Pure Prolog",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:50.518991+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53341,
      "index": 8,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47919,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 378433,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378434,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378435,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378436,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378437,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 378433,
          "original_id": null,
          "lesson_id": 53341,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: Word ladders",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-29T13:28:29.773206+10:00",
          "updated_at": null,
          "challenge_id": 124979,
          "content": "<document version=\"2.0\"><paragraph>Write a program <bold>word_ladder.py</bold> that computes all transformations of a word <bold>word_1</bold> into a word <bold>word_2</bold>, consisting of sequences of words of minimal length, starting with <bold>word_1</bold>, endingin <bold>word_2</bold>, and such that two consecutive words in the sequence differ by at most one letter.</paragraph><paragraph>All words have to occur in a dictionary with name <bold>dictionary.txt</bold>, stored in the working directory.</paragraph><paragraph>It is convenient and effective to first create a dictionary whose keys are all words in the dictionary <bold>dictionary.txt</bold> with one letter replaced by a “<bold>slot</bold>”, the value for a given key being the list of words that match the key with the “<bold>slot</bold>” being replaced by an appropriate letter. From this dictionary, one can then build a dictionary with words as keys, and as value for a given key the list of words that differ in only one letter from the key.</paragraph><paragraph>The program implements a function <bold>word_ladder(word_1, word_2)</bold> that returns the list of all solutions, a solution being as previously described.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from word_ladder import *\n&gt;&gt;&gt; for ladder in word_ladder('cold', 'warm'): print(ladder)\n...\n['COLD', 'CORD', 'CARD', 'WARD', 'WARM']\n['COLD', 'CORD', 'WORD', 'WORM', 'WARM']\n['COLD', 'CORD', 'WORD', 'WARD', 'WARM']\n\n&gt;&gt;&gt; for  ladder  in  word_ladder('three',  'seven'):  print(ladder)\n...\n['THREE', 'THREW', 'SHREW', 'SHRED', 'SIRED', 'SITED', 'SATED', 'SAVED', 'SAVER', 'SEVER', 'SEVEN']\n\n&gt;&gt;&gt; for ladder in word_ladder('train', 'bikes'): print(ladder)\n...\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DRAWS', 'DRAGS', 'BRAGS', 'BRATS', 'BEATS', 'BELTS', 'BELLS', 'BALLS', 'BALES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DRAWS', 'DRAGS', 'BRAGS', 'BRATS', 'BEATS', 'BESTS', 'BUSTS', 'BUSES', 'BASES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\n\n</pre></document>"
        },
        {
          "id": 378434,
          "original_id": null,
          "lesson_id": 53341,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: Word search puzzle",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-29T13:30:14.45602+10:00",
          "updated_at": null,
          "challenge_id": 124980,
          "content": "<document version=\"2.0\"><paragraph>Word search puzzle consists of a grid of letters and a number of words, that have to be read <bold>horizontally</bold>, <bold>vertically</bold> or <bold>diagonally</bold>, in either direction. Write a program <bold>word_search.py</bold> that defines a class <bold>WordSearch</bold> with the following properties:</paragraph><list style=\"bullet\"><list-item><paragraph>To create a <bold>WordSearch</bold> object, the <bold>name of a file</bold> has to be provided. This file is meant to store a number of lines all with the same number of uppercase letters, those lines possibly containing spaces anywhere, and the file possibly containing extra blank lines.<break/></paragraph></list-item><list-item><paragraph><bold><code>__str__()</code></bold> is implemented.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>number_of_solutions()</bold> to display the number of solutions for each word length for which a solution exists.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>locate_word_in_grid()</bold> that takes a word as argument; it returns <bold>None</bold> if the word cannot be read in the grid, and otherwise returns the <italic>x</italic> and <italic>y</italic> coordinates of an occurrence of the first letter of the word in the grid and the direction to follow (N, NE, E, SE, S, SW, W, or NW) to read the whole word from that point onwards. Coordinates start from 0, with the <italic>x</italic>-axis pointing East, and the <italic>y</italic>-axis pointing South.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>locate_words_in_grid()</bold> that takes any number of words as arguments, and returns a dictionary whose keys are those words and whose values are <bold>None</bold> or the triple returned by <bold>locate_word_in_grid()</bold> when called with that word as argument.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>display_word_in_grid()</bold> that takes a word as argument and in case the word can be read from the grid, prints out the grid with all characters being displayed in lowercase, except for those that make up word, displayed in uppercase.</paragraph></list-item></list><paragraph>Here is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from word_search import *\n&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; ws = WordSearch('word_search_1.txt')\n&gt;&gt;&gt; print(ws)\nN D A O E L D L O G B M N E\nI T D C M E A I N R U T S L\nC L U U E I C G G G O L I I\nK M U I M U I D I R I A L T\nE U R T U N G S T E N B V H\nL I L S L T T U L R U O E I\nC M A T E T I U R D R C R U\nI D S C A M A G N E S I U M\nM A M P D M U I N A T I T I\nP C N P L A T I N U M D L L\nH Z E M A N G A N E S E I G\nM G I T I N R U N O R I T C\nR I A N N A M E R C U R Y N\nU O T C C R E P P O C E E R\n&gt;&gt;&gt; metal = 'PLATINUM'\n&gt;&gt;&gt; print(f'{metal}: {ws.locate_word_in_grid(metal)}')\nPLATINUM: (3, 9, 'E')\n&gt;&gt;&gt; metal = 'SODIUM'\n&gt;&gt;&gt; print(f'{metal}: {ws.locate_word_in_grid(metal)}')\nSODIUM: None\n&gt;&gt;&gt; metals = ('PLATINUM', 'COPPER', 'MERCURY', 'TUNGSTEN', 'MAGNESIUM', 'ZINC', 'MANGANESE',\n...               'TITANIUM', 'TIN', 'IRON', 'LITHIUM', 'CADMIUM', 'GOLD', 'COBALT', 'SILVER',\n...               'NICKEL', 'LEAD', 'IRIDIUM', 'URANIUM', 'SODIUM')\n&gt;&gt;&gt; located_metals = ws.locate_words_in_grid(*metals)\n&gt;&gt;&gt; pprint.pprint(located_metals)\n{'CADMIUM': (1, 9, 'N'),\n 'COBALT': (11, 6, 'N'),\n 'COPPER': (10, 13, 'W'),\n 'GOLD': (9, 0, 'W'),\n 'IRIDIUM': (10, 3, 'W'),\n 'IRON': (11, 11, 'W'),\n 'LEAD': (4, 5, 'S'),\n 'LITHIUM': (13, 1, 'S'),\n 'MAGNESIUM': (5, 7, 'E'),\n 'MANGANESE': (3, 10, 'E'),\n 'MERCURY': (6, 12, 'E'),\n 'NICKEL': (0, 0, 'S'),\n 'PLATINUM': (3, 9, 'E'),\n 'SILVER': (12, 1, 'S'),\n 'SODIUM': None,\n 'TIN': (6, 9, 'NE'),\n 'TITANIUM': (12, 8, 'W'),\n 'TUNGSTEN': (3, 4, 'E'),\n 'URANIUM': None,\n 'ZINC': (1, 10, 'SE')}\n&gt;&gt;&gt; for metal in metals:\n...         print(metal, end = ':\\n')\n...         ws.display_word_in_grid(metal)\n...         print()\n... \nPLATINUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n P L A T I N U M d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nCOPPER:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c R E P P O C e e r\n\nMERCURY:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a M E R C U R Y n\nu o t c c r e p p o c e e r\n\nTUNGSTEN:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r T U N G S T E N b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nMAGNESIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a M A G N E S I U M\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nZINC:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh Z e m a n g a n e s e i g\nm g I t i n r u n o r i t c\nr i a N n a m e r c u r y n\nu o t c C r e p p o c e e r\n\nMANGANESE:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e M A N G A N E S E i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nTITANIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d M U I N A T I T i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nTIN:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g N e s i u m\nm a m p d m u I n a t i t i\np c n p l a T i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nIRON:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u N O R I t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nLITHIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s L\nc l u u e i c g g g o l i I\nk m u i m u i d i r i a l T\ne u r t u n g s t e n b v H\nl i l s l t t u l r u o e I\nc m a t e t i u r d r c r U\ni d s c a m a g n e s i u M\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nCADMIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk M u i m u i d i r i a l t\ne U r t u n g s t e n b v h\nl I l s l t t u l r u o e i\nc M a t e t i u r d r c r u\ni D s c a m a g n e s i u m\nm A m p d m u i n a t i t i\np C n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nGOLD:\nn d a o e l D L O G b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nCOBALT:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u T s l\nc l u u e i c g g g o L i i\nk m u i m u i d i r i A l t\ne u r t u n g s t e n B v h\nl i l s l t t u l r u O e i\nc m a t e t i u r d r C r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nSILVER:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t S l\nc l u u e i c g g g o l I i\nk m u i m u i d i r i a L t\ne u r t u n g s t e n b V h\nl i l s l t t u l r u o E i\nc m a t e t i u r d r c R u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nNICKEL:\nN d a o e l d l o g b m n e\nI t d c m e a i n r u t s l\nC l u u e i c g g g o l i i\nK m u i m u i d i r i a l t\nE u r t u n g s t e n b v h\nL i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nLEAD:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s L t t u l r u o e i\nc m a t E t i u r d r c r u\ni d s c A m a g n e s i u m\nm a m p D m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nIRIDIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i M U I D I R I a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nURANIUM:\n\nSODIUM:\n\n&gt;&gt;&gt;\n</pre></document>"
        },
        {
          "id": 378435,
          "original_id": null,
          "lesson_id": 53341,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: Possible subtractions yielding a given sum",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-29T13:30:17.721295+10:00",
          "updated_at": null,
          "challenge_id": 124981,
          "content": "<document version=\"2.0\"><paragraph>Write a program <bold>subtractions.py</bold> that takes as input an <bold>iterable</bold> <bold>L</bold> of nonnegative integers and an <bold>integer</bold> <bold>N</bold>, and displays all ways of inserting <bold>minus</bold> signs and <bold>parentheses</bold> in <bold>L</bold>, resulting in an <bold>expression</bold> that <bold>evaluates</bold> to <bold>N</bold>. </paragraph><paragraph>You will make use  of <bold>eval()</bold> in this exercise.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from subtractions import *\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 1)\n1 - ((2 - 3) - (4 - 5))\n(1 - ((2 - 3) - 4)) - 5\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 2)\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 3)\n1 - (2 - (3 - (4 - 5)))\n1 - ((2 - (3 - 4)) - 5)\n(1 - (2 - 3)) - (4 - 5)\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 4)\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 5)\n(1 - 2) - ((3 - 4) - 5)\n&gt;&gt;&gt; subtractions((1, 3, 2, 5, 11, 9, 10, 8, 4, 7, 6), 40)\n1 - ((((3 - 2) - 5) - 11) - (9 - ((((10 - 8) - 4) - 7) - 6)))\n1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - (4 - (7 - 6))))\n1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - ((8 - (4 - 7)) - 6))\n1 - (((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - 4)) - (7 - 6))\n1 - (((((3 - 2) - 5) - 11) - (9 - (((10 - 8) - 4) - 7))) - 6)\n1 - ((((((3 - 2) - 5) - 11) - (9 - ((10 - 8) - 4))) - 7) - 6)\n1 - (((((((3 - 2) - 5) - 11) - (9 - (10 - 8))) - 4) - 7) - 6)\n1 - ((((((((3 - 2) - 5) - 11) - (9 - 10)) - 8) - 4) - 7) - 6)\n(1 - 3) - ((((2 - 5) - 11) - 9) - (10 - (((8 - 4) - 7) - 6)))\n(1 - 3) - (((((2 - 5) - 11) - 9) - (10 - ((8 - 4) - 7))) - 6)\n(1 - 3) - ((((((2 - 5) - 11) - 9) - (10 - (8 - 4))) - 7) - 6)\n(1 - 3) - (((((((2 - 5) - 11) - 9) - (10 - 8)) - 4) - 7) - 6)\n(1 - ((((3 - 2) - 5) - 11) - 9)) - ((((10 - 8) - 4) - 7) - 6)\n((1 - 3) - ((((2 - 5) - 11) - 9) - 10)) - (((8 - 4) - 7) - 6)\n(1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - 8)) - (4 - (7 - 6))\n(1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - (4 - 7)))) - 6\n(1 - (((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - 4)) - 7)) - 6\n((1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - 8)) - (4 - 7)) - 6\n</pre></document>"
        },
        {
          "id": 378436,
          "original_id": null,
          "lesson_id": 53341,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4: Voting systems",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-29T13:30:20.193152+10:00",
          "updated_at": null,
          "challenge_id": 124982,
          "content": "<document version=\"2.0\"><paragraph>Find out (e.g., in Wikipedia) about these <bold>voting systems</bold>: (a) <bold>one round</bold> method, (b) <bold>two round</bold> method, (c) <bold>elimination</bold> method, (d) <bold>De Borda</bold> count, and (e) <bold>De Condorcet</bold> count.</paragraph><paragraph>The <bold>elimination</bold> method works as follows. One adds up the tallies of all candidates who rank 1st and eliminate the candidate(s) who get the minimal number of votes (as ranked 1st candidates). For a given ordering, the candidates who remain and were ranked after the eliminated candidate(s) see their ranking go up so that the ordering is preserved, and rankings range from 1 up to the number of candidates that remain.</paragraph><paragraph>For instance, if to start with, there are 5 candidates, A, B, C, D, and E who are ranked 1, 2, 3, 4, and 5, respectively, and if B and D are eliminated because they get the least number of votes as 1st candidates across all rankings, then for that particular ranking, A remains ranked 1st, C becomes ranked 2nd, and E becomes ranked third.</paragraph><paragraph>The process is repeated until there is only one candidate left, or all candidates that remain get exactly the same number of votes as preferred candidates.</paragraph><paragraph>Then design a program <bold>election.py</bold> that defines a class <bold>Election</bold>, with objects of this class created from <bold>Excel files</bold> of the kind provided as examples, to which the <bold>methods</bold>:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>one_round_winners()</bold>,<break/></paragraph></list-item><list-item><paragraph><bold>two_round_winners()</bold>,<break/></paragraph></list-item><list-item><paragraph><bold>elimination_winner()</bold>,<break/></paragraph></list-item><list-item><paragraph><bold>de_borda_winners()</bold>, and<break/></paragraph></list-item><list-item><paragraph><bold>de_condorcet_winners()</bold></paragraph></list-item></list><paragraph>can be applied. Also, the <bold><code>__str__()</code></bold> method is implemented so as to display in textual form the election results recorded in the Excel file.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from election import *\n&gt;&gt;&gt; election = Election('election_1.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar   Maria    Max  \n     3273          1       5       4       2       3   \n     2182          5       1       4       3       2   \n     1818          5       2       1       4       3   \n     1636          5       4       2       1       3   \n      727          5       2       4       3       1   \n      364          5       4       2       3       1  \n&gt;&gt;&gt; election.one_round_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.two_round_winners()\nThe winner is Emily.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Oscar.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winner is Maria.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winner is Max.\n&gt;&gt;&gt; election = Election('election_2.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar   Maria    Max  \n     1000          1       2       3       4       5\n&gt;&gt;&gt; election.one_round_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.two_round_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Max.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election = Election('election_3.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert\n     1000          1   \n     1000          1   \n     1000          1   \n     1000          1   \n     1000          1   \n     1000          1\n&gt;&gt;&gt; election.one_round_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.two_round_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.elimination_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.de_borda_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.de_condorcet_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election = Election('election_4.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar \n     1000          1       2       3   \n     1000          2       1       3\n&gt;&gt;&gt; election.one_round_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election.two_round_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Oscar.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election = Election('election_5.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar   Maria \n     1000          1       2       3       4   \n     1000          2       3       1       4   \n     1000          3       1       2       4\n&gt;&gt;&gt; election.one_round_winners()\nThe winners are Albert, Emily and Oscar.\n&gt;&gt;&gt; election.two_round_winners()\nThe winners are Albert, Emily and Oscar.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Maria.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winners are Albert, Emily and Oscar.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThere is no winner.\n&gt;&gt;&gt; election = Election('election_6.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar \n     1000          1       2       3   \n     1000          2       1       3   \n      250          2       3       1   \n      250          3       2       1\n&gt;&gt;&gt; election.one_round_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.two_round_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.elimination_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winners are Albert and Emily.\n</pre><paragraph/></document>"
        },
        {
          "id": 378437,
          "original_id": null,
          "lesson_id": 53341,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Context free grammars",
          "index": 10,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-29T13:30:22.216955+10:00",
          "updated_at": null,
          "challenge_id": 124983,
          "content": "<document version=\"2.0\"><paragraph>A <italic>context free </italic>grammar is a set of <italic>production rules </italic>of the form:</paragraph><paragraph><bold>$symbol_0$ --&gt; $symbol_1$ ... $symbol_n$</bold></paragraph><paragraph>where <bold>$symbol_0$</bold>, . . . , <bold>$symbol_n$</bold> are either <italic>terminal </italic>or <italic>nonterminal symbols</italic>, with <bold>$symbol_0$</bold> being necessarily <italic>nonterminal</italic>.</paragraph><paragraph>A symbol is a <italic><bold>nonterminal</bold></italic> symbol iff it is denoted by a word built from underscores or uppercase letters.</paragraph><paragraph>A special <italic><bold>nonterminal</bold></italic> symbol is called the <italic><bold>start symbol</bold></italic>.</paragraph><paragraph>The language <italic><bold>generated</bold> </italic>by the grammar is the set of sequences of <italic><bold>terminal</bold></italic> symbols obtained by replacing a <italic><bold>nonterminal</bold></italic> symbol by the sequence on the right hand side of a rule having that <italic>nonterminal</italic> symbol on the left hand side, starting with the <italic>start symbol</italic>.</paragraph><paragraph>For instance, the following, where EXPRESSION is the start symbol, is a context free grammar for a set of arithmetic expressions:</paragraph><paragraph>EXPRESSION --&gt; EXPRESSION TERM_OPERATOR TERM<break/>EXPRESSION --&gt; TERM<break/>TERM --&gt; TERM FACTOR_OPERATOR FACTOR<break/>TERM --&gt; FACTOR<break/>FACTOR --&gt; NUMBER<break/>FACTOR --&gt; (EXPRESSION)<break/>NUMBER --&gt; DIGIT NUMBER | DIGIT<break/>DIGIT --&gt; 0<break/>...<break/>DIGIT --&gt; 9<break/>TERM_OPERATOR --&gt; +<break/>TERM_OPERATOR --&gt; -<break/>FACTOR_OPERATOR --&gt; *<break/>ACTOR_OPERATOR --&gt; /</paragraph><paragraph>Moreover, blank characters (spaces or tabs) can be inserted anywhere except inside a number. For instance, <bold>(2 + 3) * (10 - 2) - 12 * (1000 + 15)</bold> is an arithmetic expression generated by the grammar.</paragraph><paragraph>Note that operators associate to the left. The grammar is <italic>unambiguous</italic>, in the sense that every expression generated by the grammar has a unique evaluation.</paragraph><paragraph>Write down a program <bold>context_free_grammar.py</bold> that implements a function <bold>evaluate()</bold> which takes a string representing an expression as an argument, checks whether the expression can be generated by the grammar, and in case the answer is yes, returns the value of the expression, provided that no division by 0 is attempted; otherwise, the function returns <bold>None</bold>.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from context_free_grammar import *\n&gt;&gt;&gt; evaluate('100')\n100\n&gt;&gt;&gt; evaluate('(100)')\n100\n&gt;&gt;&gt; evaluate('1 - 20 + 300')\n281\n&gt;&gt;&gt; evaluate('(((((1))-((20))+((300)))))')\n281\n&gt;&gt;&gt; evaluate('20 * 4 / 5')\n16.0\n&gt;&gt;&gt; evaluate('(((((20))*((4))/((5)))))')\n16.0\n&gt;&gt;&gt; evaluate('1 + 20 * 30 - 400 / 500')\n600.2\n&gt;&gt;&gt; evaluate('1 + (20*30-400) / 500')\n1.4\n&gt;&gt;&gt; evaluate('1+(20 / 30 * 400)- 500')\n-232.33333333333337\n&gt;&gt;&gt; evaluate('1 + 2 * (3+4*5) / (6*7-8/9)')\n2.1189189189189186\n&gt;&gt;&gt; evaluate('100)')\n&gt;&gt;&gt; evaluate('100 + ')\n&gt;&gt;&gt; evaluate('100 + -3')\n&gt;&gt;&gt; evaluate('100 ÷ 50')\n&gt;&gt;&gt; evaluate('100 / 0')\n</pre><paragraph>Before you tackle the exercise, find out about <italic><bold>recursive descent parsers</bold></italic>. To easily tokenise the string, check out the <bold>findall()</bold> function from the <bold>re</bold> module.</paragraph><paragraph>See also related content <bold><link href=\"https://edstem.org/au/courses/16645/lessons/53331/slides/362072\">Week 10 - Notes 15 Context Free Grammars</link></bold> discussed in Week 10 Tuesday Lecture.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 10",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.74173+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-10-01T22:13:56.511687+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53286,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361891,
      "late_submissions": true,
      "locked_at": null,
      "module_id": null,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47877,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361891,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361891,
          "original_id": 328067,
          "lesson_id": 53286,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Course Outline",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.74173+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/jkpW7LM3RoNnL0dMhLIFqT4Q"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "completed",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Course Outline",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.779904+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-10-01T22:21:21.259214+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53287,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361892,
      "late_submissions": true,
      "locked_at": null,
      "module_id": null,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47878,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361892,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361892,
          "original_id": 326034,
          "lesson_id": 53287,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Lectures and Consultations Timetable",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.779904+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/mk5v4T2s9POE90M7VC3Czqfn"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "completed",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Lectures and Tutorials Timetable",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.872332+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53289,
      "index": 4,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": null,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 48660,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361894,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361894,
          "original_id": 330087,
          "lesson_id": 53289,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Course Schedule",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.872332+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>https://moodle.telt.unsw.edu.au/mod/page/view.php?id=6563908</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Course Schedule",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:35.910369+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53290,
      "index": 5,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": null,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 48671,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361895,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361895,
          "original_id": 330129,
          "lesson_id": 53290,
          "user_id": 93339,
          "course_id": 16645,
          "type": "html",
          "title": "Summary of Assessment Tasks",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:35.910369+10:00",
          "updated_at": null,
          "html": "<br>\r\n<table align=\"center\" border=\"1px solid\" style=\"border-collapse:collapse\" style=\"width: 100%\" cellpadding=\"5\">\r\n    <thead style=\"background-color:#96D4D4\">\r\n        <tr>\r\n            <td><strong>Item</strong>\r\n            </td>\r\n            <td><strong>Topics</strong>\r\n            </td>\r\n            <td><strong>Due</strong>\r\n            </td>\r\n            <td><strong>Marks</strong>\r\n            </td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>Six Coding Quizzes\r\n            </td>\r\n            <td>Various and worth 4 marks each\r\n            </td>\r\n            <td>Thursday Weeks 3, 4, 5, 7, 8, and 9 @ 9pm\r\n            </td>\r\n            <td>24%\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>Assignment 1\r\n            </td>\r\n            <td>Procedural programming\r\n            </td>\r\n            <td>Monday Week 7 @ 10am\r\n            </td>\r\n            <td>13%\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>Assignment 2\r\n            </td>\r\n            <td>Object oriented programming\r\n            </td>\r\n            <td>Monday Week 11 @ 10am\r\n            </td>\r\n            <td>13%\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>Final exam\r\n            </td>\r\n            <td>Everything covered in the course\r\n            </td>\r\n            <td>Exam period\r\n            </td>\r\n            <td>50%\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Summary of Assessment Tasks",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.217637+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53293,
      "index": 5,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11527,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47885,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361907,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361907,
          "original_id": 326067,
          "lesson_id": 53293,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "CSE VLAB Gateway",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.217637+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>https://vlabgateway.cse.unsw.edu.au/</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "CSE VLAB Gateway",
      "tutorial_regex": "",
      "type": "unix",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.337179+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53296,
      "index": 9,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11527,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47889,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361910,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361910,
          "original_id": 326071,
          "lesson_id": 53296,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Python 3 Cheat Sheet",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.337179+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/Xi3R6GsIpKNbfFHidbhx6CjG"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Python 3 Cheat Sheet",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.254708+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-10-01T22:21:33.003774+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53294,
      "index": 6,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361908,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11527,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47886,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361908,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361908,
          "original_id": 326068,
          "lesson_id": 53294,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Ed Discussion - Quick Start Guide",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.254708+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/8VjuVmC2iqZxvKtkiUVZeZpG"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "completed",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Ed Discussion - Quick Start Guide",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-06-27T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-06-24T18:05:54.074332+10:00",
      "due_at": "2024-07-11T21:00:00+10:00",
      "effective_available_at": "2024-06-27T19:15:00+10:00",
      "effective_due_at": "2024-07-11T21:00:00+10:00",
      "effective_locked_at": "2024-07-14T21:00:00+10:00",
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 55345,
      "index": 4,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": "2024-07-14T21:00:00+10:00",
      "module_id": 11530,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 53348,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": true,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": true,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 374397,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 374397,
          "original_id": 362150,
          "lesson_id": 55345,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Quiz 4",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-24T18:05:54.074332+10:00",
          "updated_at": null,
          "challenge_id": 123995,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This quiz is worth <bold>4 marks.</bold></paragraph><paragraph/><paragraph><bold>Marking</bold><break/><break/>  <bold>is_good_prime()                1.5 marks</bold><break/>  <bold>smallest_good_prime()   2.5 marks</bold><break/> <bold>------------------------------------------------------</bold><break/>  <bold>Total                                    4.0 marks</bold></paragraph><paragraph/><paragraph><bold>Quiz 4</bold> is due <bold>Week 7 Thursday 11 July 2024 @ 9.00pm (Sydney time)</bold>.</paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 3 days</bold> from the due date, that is, any late submission after <bold>Week 7 Sunday 14 July 2024 @ 9.00pm</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>quiz_4.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>.  It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for Quiz 4.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/uXToFGO4axhEl0VzWC6r0Q20\" filename=\"quiz_4.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-07-15T16:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Quiz 4",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.526309+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-18T14:41:47.469366+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53307,
      "index": 5,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361961,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47895,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 8,
      "slide_marks_summary": [
        {
          "id": 361960,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361961,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361962,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361963,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361964,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361965,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361966,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361967,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361960,
          "original_id": 340490,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Functions",
          "index": 157,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Suppose you&#39;d like to print lists of things in the following &#39;smart&#39; way, which takes into account the number of items and uses commas and &#39;and&#39; accordingly:</paragraph><pre>A\nA and B\nA, B, and C\nA, B, C, and D\n</pre><paragraph>You can&#39;t just use the <code>join()</code> method of a string, because it doesn&#39;t do this. You have to write a piece of code. And the code required is reasonably complicated:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\"># Print the list &#39;lst&#39; in a smart way\nif len(lst) == 1:\n    print(lst[0])\nelif len(lst) == 2:\n    print(lst[0] + &#39; and &#39; + lst[1])\nelse:\n    print(&#39;, &#39;.join(lst[:-1]) + &#39;, and &#39; + lst[-1])</snippet-file></snippet><paragraph>Having to write this code every time you want to smart-print a list would be a pain. Also, if you find an error in the code, or if you think of a way to improve it, you&#39;ll have to find all instances of the code and update them one-by-one.</paragraph><paragraph>Fortunately, there is a <underline>much</underline> better way, and that&#39;s to define a <bold>function</bold> which does this smart printing. Then whenever you want to smart-print a list you can just call the function and provide it with the list.</paragraph><paragraph>Here&#39;s how your program might look (don&#39;t worry if you don&#39;t understand the &#34;def&#34; part - you&#39;ll be learning this):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Define the function\ndef smart_print(lst):\n    if len(lst) == 1:\n        print(lst[0])\n    elif len(lst) == 2:\n        print(lst[0] + &#39; and &#39; + lst[1])\n    else:\n        print(&#39;, &#39;.join(lst[:-1]) + &#39;, and &#39; + lst[-1])\n\n# Use it\nsmart_print([&#39;A&#39;])\nsmart_print([&#39;A&#39;, &#39;B&#39;])\nsmart_print([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;])\nsmart_print([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;])</snippet-file></snippet><paragraph>This is much better. If you find an error in the code you only need to fix it in one place. If you think of a way to improve it, you only need to improve it in one place. And, as a bonus, the function name itself makes your code more self-documenting - each time you invoke the function its name makes it clear what you are doing, with no need for any comments. Brilliant!</paragraph><paragraph>Defining and using functions in this way is an example of <bold>code modularisation</bold>. It is an important and powerful technique, and is one of the cornerstones of good programming. You&#39;ll learn how to do it this week.</paragraph><paragraph></paragraph></document>"
        },
        {
          "id": 361961,
          "original_id": 340491,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Defining functions",
          "index": 158,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>So far you&#39;ve been using functions that are built-in to Python, such as <code>input()</code> , <code>print()</code>, and <code>len()</code>. Like many other languages, Python allows you to define your own functions.</paragraph><heading level=\"2\">Defining a function</heading><paragraph>You can define a function using a <code>def</code> statement, which has the following form:</paragraph><pre>def &lt;name&gt;():\n    &lt;statements&gt;</pre><paragraph>For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello():\n    print(&#39;Hello&#39;)</snippet-file></snippet><paragraph>Once you&#39;ve defined the function you can call it like any other function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello():\n&#x9;print(&#39;Hello&#39;)\n\nsay_hello()</snippet-file></snippet><paragraph>Notice that the code inside the body of the function is not executed when the function is defined - it is only executed when the function is called.</paragraph><paragraph>Also notice that you must define the function before calling it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">say_hello() # Error - the function has not yet been defined\ndef say_hello():\n&#x9;print(&#39;Hello&#39;)</snippet-file></snippet><heading level=\"2\">Naming functions</heading><paragraph>The rules for naming functions are the same as for naming variables.</paragraph><paragraph>Although it is not required, it has become conventional to use snake case - lower case words, separated by underscores, for example <code>say_hello</code>.</paragraph><paragraph>You should choose names that help to document your code - naming the above function <code>say_hello</code>, for example, is more explanatory than naming it <code>hello</code>, or, even worse, <code>my_func</code>.</paragraph><heading level=\"2\">Adding parameters</heading><paragraph>You can add <bold>parameters</bold> to a function, to specify that the function should receive one or more <bold>arguments</bold> when it is called. You do this by adding parameter names in the brackets after the function name:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def say_hello(name): # Add a parameter called &#34;name&#34;\n&#x9;print(&#39;Hello,&#39;, name)\n\nsay_hello(&#39;James&#39;) # Provide &#39;James&#39; as an argument</snippet-file></snippet><paragraph>When you call a function you must supply it with the right number of arguments - one for each parameter.  If the function has no parameters then you must supply no arguments; if the function has one parameter then you must supply exactly one argument; and so on. If you supply the wrong number of arguments then Python will raise an error. The <code>say_hello()</code> function defined above has one parameter, so you must supply it with exactly one argument:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello(name):\n&#x9;print(&#39;Hello,&#39;, name)\n    \nsay_hello() # Error - not enough arguments</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def say_hello(name):\n&#x9;print(&#39;Hello,&#39;, name)\n    \nsay_hello(&#39;James&#39;, &#39;Sarah&#39;) # Error - too many arguments</snippet-file></snippet><heading level=\"2\">Adding default values</heading><paragraph>You can give parameters default values. If no argument is provided for that parameter then the function will use the default value.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def say_hello(name = &#39;James&#39;): # Give the parameter a default value\n&#x9;print(&#39;Hello,&#39;, name)\n\nsay_hello() # The default value will be used\nsay_hello(&#39;Sarah&#39;) # &#39;Sarah&#39; will be used instead</snippet-file></snippet><paragraph>You can use this feature to make arguments <italic>optional -</italic> Python won&#39;t raise an error if the argument is not supplied, it will just use the default value.</paragraph><paragraph>If you set the default value to <code>None</code> then you can use this to detect whether an argument was supplied for the parameter:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def say_hello(name = None):\n    if name is None:\n        print(&#39;No name was provided&#39;)\n    else:\n        print(&#39;Hello,&#39;, name)   \n\nsay_hello()\nsay_hello(&#39;Sarah&#39;)</snippet-file></snippet><heading level=\"2\">Returning values</heading><paragraph>A function always returns a value. By default it will return the object <code>None</code>, but you can use a <code>return</code> statement to get it to return whatever value you want.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def sum(x, y):\n    return x + y # Specify a return value\n\nprint(sum(1, 2))</snippet-file></snippet><paragraph>The function will exit immediately after a <code>return</code> statement, so any further statements in the function body will not be executed.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def sum(x, y):\n    return x + y # The function exits here\n    print(&#39;This will not be printed&#39;) # Not executed\n\nprint(sum(1, 2))</snippet-file></snippet><paragraph>You can have multiple <code>return</code> statements (but only one will get executed):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def grade(mark):\n    if mark &gt;= 50:\n        return &#39;Pass&#39;\n    else:\n        return &#39;Fail&#39; # Only one of these return statements will be executed\n\nprint(grade(73))\nprint(grade(35))</snippet-file></snippet><paragraph>A function can only return one value. This value can, however, be a collection - a list, or a tuple, or a set, or a dictionary. It is fairly common to return a tuple. Here&#39;s an example in which a tuple with two elements is returned:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def ends(string):\n    first_char = string[0]\n    last_char = string[-1]\n    # Return a tuple with two elements\n    # Note that only the comma is needed - round brackets are assumed\n    return first_char, last_char\n\nprint(ends(&#39;Australia&#39;))\nprint(ends(&#39;Australia&#39;)[0])\nprint(ends(&#39;Australia&#39;)[1])</snippet-file></snippet><paragraph>You might hear people describe this as a case in which the function returns two values. This is loose talk - the function returns just one value - a tuple. It&#39;s important to be aware of what&#39;s really going on here. </paragraph><heading level=\"2\">Supplying arguments by keyword</heading><paragraph>If your function has many parameters then it can be difficult to remember the order in which they need to be supplied when you call it, and it can be difficult for someone reading the code to tell which is which:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def divide(numerator, denominator, num_places):\n&#x9;return round(numerator/denominator, num_places)\n\n# Not clear to the reader which argument goes with which paramater\n# Which one is the numerator? Which is the denominator?\nprint(divide(5, 6, 3))</snippet-file></snippet><paragraph>To make things easier, arguments can be supplied by <bold>keyword</bold>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def divide(numerator, denominator, num_places):\n&#x9;return round(numerator/denominator, num_places)\n\n# Now it&#39;s clear which argument goes with which paramater\nprint(divide(numerator=5, denominator=6, num_places=3))\n\n# And we don&#39;t have to worry about their order\nprint(divide(num_places=3, denominator=6, numerator=5)) # Same result</snippet-file></snippet><heading level=\"2\">Allowing an arbitrary number of arguments</heading><paragraph>Suppose you want a function that returns the smallest of some given numbers. Suppose you want to allow any number of numbers to be given.</paragraph><paragraph>One way would be to use a single parameter which expects a list. On this approach, you must provide exactly one argument, a list, but the list can be as long as you like:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def smallest(numbers): # Expects numbers to be a list\n    smallest = numbers[0]\n    for n in numbers:\n        if n &lt; smallest:\n            smallest = n\n    return smallest\n\nprint(smallest([42, 12])) # Provide a single list of 2 numbers\nprint(smallest([4, 11, 15, 2, 3])) # Provide a single list of 5 numbers</snippet-file></snippet><paragraph>Another way is to precede the name of the parameter with an asterisk. Then you can provide as many numbers as you like, not together in a single list, but each as a separate argument in its own right. The function will automatically combine them into a tuple:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def smallest(*numbers): # Add an asterisk to the front of the name\n    smallest = numbers[0]\n    for n in numbers:\n        if n &lt; smallest:\n            smallest = n\n    return smallest\n\nprint(smallest(42, 12)) # Provide 2 arguments\nprint(smallest(4, 11, 15, 2, 3)) # Provide 5 arguments</snippet-file></snippet><paragraph>You can also precede the name of the parameter with two asterisks. This allows you to provide as many keyword arguments as you like. This time they are gathered into a dictionary.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def full_name(**names):  # Add two asterisks to the front of the name\n    result = &#39;&#39;\n    if &#39;first&#39; in names: result = result + &#39; &#39; + names[&#39;first&#39;]\n    if &#39;middle&#39; in names: result = result + &#39; &#39; + names[&#39;middle&#39;]\n    if &#39;last&#39; in names: result = result + &#39; &#39; + names[&#39;last&#39;]\n    return result.strip()\n\nprint(full_name(first=&#39;John&#39;, last=&#39;Smith&#39;))\nprint(full_name(first=&#39;John&#39;, middle=&#39;Hubert&#39;, last=&#39;Smith&#39;))\nprint(full_name(last=&#39;Smith&#39;, middle=&#39;Hubert&#39;, first=&#39;John&#39;))</snippet-file></snippet><paragraph>You can use both kinds of parameter, but if you do then the * parameter must precede the ** parameter.</paragraph><heading level=\"2\">Pass</heading><paragraph>The body of a function definition cannot be empty, so if you want a function definition with no content then you need to use the pass statement to avoid Python raising an error. </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def my_func():\n    return None</snippet-file></snippet><paragraph>Alternatively, you could put an expression in the body, such as <code>{}</code>, or get the function to return <code>None</code>, </paragraph><heading level=\"2\">Functions are given objects</heading><paragraph>It is important to be aware that when you pass an argument to a function, that function has direct access to the object and can change the object (if its mutable). Here&#39;s an example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def add10(x):\n    x.append(10)\n\nlst = [1, 2, 3]\nadd10(lst)\nprint(lst)</snippet-file></snippet><paragraph>Notice that the function defined here changes the object that is passed to it as an argument. In this case we say that the function has <bold>side effects</bold> - it affects the state of the program outside the function.</paragraph><paragraph>One way to avoid the original list being changed is to use <bold>list</bold> method <code>copy()</code> as shown below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def add10(x):\n    x.append(10)\n\nlst = [1, 2, 3]\nlst1 = lst.copy() # create a copy of the object\nadd10(lst1)\nprint(lst1)\nprint(lst) # will not be modified</snippet-file></snippet><paragraph>Please note that the above will not apply to parameters passed by <bold>value</bold> (instead of <bold>reference</bold> as the list example above) as shown below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def add10(x):\n    x = x + 10\n    print(x) # outputs 15\n\nnum = 5\nadd10(num)\nprint(num) # outputs 5 NOT 15</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361962,
          "original_id": 340492,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Variable scope",
          "index": 159,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>If you create a variable inside a function then that variable is only defined inside the function. We say that the variable&#39;s <bold>scope</bold> is limited to the function, or that the variable is <bold>locally defined</bold>. If you try to use a variable outside its scope then Python will raise an error.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def my_func():\n    x = 5\n\nprint(x) # Error - x is only defined inside the function</snippet-file></snippet><paragraph>Even if you have used the same variable name outside the function, changes to variables defined inside the function are limited to occurring inside the function.  This can be a problem if you use locally defined variables with the same name as globally defined variables (i.e. variables not declared within the scope of a function) - this is known as <bold>variable shadowing</bold>. </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 3 # Globally defined x\n\ndef my_func():\n    x = 5 # Locally defined x, no change to the globally defined x\n\nmy_func() # No change to the globally defined x\nprint(x) # Prints 3, not 5</snippet-file></snippet><paragraph>If you want to use globally defined variables inside functions, the safest approach is to provide them to the function as arguments.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 3\n\ndef my_func(y):\n    return y + 2 # Add 2 to the number provided and return the result\n\nx = my_func(x) # Assign to x the result of of my_func(x) - changes x\nprint(x) # Prints 5</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361963,
          "original_id": 340494,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Nested functions",
          "index": 161,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You can define a function inside another function. When you do, the inside function is called a <bold>nested function</bold>. Here&#39;s an example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def acronym(string):\n    result = &#39;&#39;\n    words = string.split(&#39; &#39;)\n    def upper_first(string): # A nested function\n        return string[0].upper()\n    for word in words:\n        result += upper_first(word)\n    return result\n    \nprint(acronym(&#39;World Health Organisation&#39;))</snippet-file></snippet><paragraph>Because a nested function is defined inside an enclosing function, it is only available to be called inside that enclosing function. The following program generates an error, because the nested function is called outside its enclosing function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def acronym(string):\n    result = &#39;&#39;\n    words = string.split(&#39; &#39;)\n    def upper_first(string): # Only available inside acronym\n        return string[0].upper()\n    for word in words:\n        result += upper_first(word)\n    return result\n    \nprint(upper_first(&#39;hello&#39;)) # Error - upper_first is not available here</snippet-file></snippet></document>"
        },
        {
          "id": 361964,
          "original_id": 340495,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Lambda functions",
          "index": 162,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You can refer to a function without giving it a name.</paragraph><paragraph>Suppose, for example, you have a list of names and you want to sort those names by their <italic>last</italic> letter. You can use the list&#39;s <code>sort()</code> method to do this. By default, <code>sort()</code> sorts them alphabetically, but you can override this default by providing a function to use as the sorting key.</paragraph><paragraph>If you like, you can first define the function, giving it a name, and then provide it by name to <code>sort()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">names = [&#39;Geoff&#39;, &#39;Kim&#39;, &#39;Louise&#39;, &#39;Tam&#39;, &#39;Helen&#39;]\ndef last_letter(name):\n    return name[-1]\nnames.sort(key = last_letter) # Use the function defined above\nprint(names)</snippet-file></snippet><paragraph>But you don&#39;t need to. You can refer to the function directly when you call <code>sort()</code>, without giving it a name. You do this by using a <bold>lambda function</bold>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">names = [&#39;Geoff&#39;, &#39;Kim&#39;, &#39;Louise&#39;, &#39;Tam&#39;, &#39;Helen&#39;]\nnames.sort(key = lambda name: name[-1]) # Use a lambda function\nprint(names)</snippet-file></snippet><paragraph>A lambda function is an <bold>expression</bold> (not a statement) whose value is a function. You can think of a lambda function as being a <bold>function literal</bold>.</paragraph><paragraph>The syntax of a lambda function is as follows:</paragraph><pre>lambda &lt;parameters&gt;: &lt;expression&gt;</pre><paragraph>Note that there is no <code>return</code> in a lambda function.</paragraph><paragraph>Lambda functions can have more than one parameter. Here&#39;s a lambda function with two parameters:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">lambda a, b: a + b</snippet-file></snippet><paragraph>You can use a lambda function just like you use function names. You can call the function it refers to by using the usual round brackets notation (note that you typically need to put parentheses around the lambda function when you call it, to avoid confusion with neighbouring code):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print((lambda a, b: a + b)(2, 4))</snippet-file></snippet><paragraph>And you can use it to assign a value to a variable:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">f = lambda a, b: a + b\nprint(f(2, 4))</snippet-file></snippet><paragraph>Note what is going on in this last example. We are using the lambda function <code>lambda a, b: a + b</code> to assign a value to a variable <code>f</code>. The value of the lambda function is a function - you can think of it as a literal for that function. So <code>f</code> is being assigned a function. We can then use <code>f</code> like any other function name. In line 2, we call the function, using <code>f(2, 4)</code>.</paragraph><paragraph>Compare the above with the following example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def f(a, b):\n    return a + b\nprint(f(2, 4))</snippet-file></snippet><paragraph>The two examples are similar, but there are some subtle differences. In both examples we end up with <code>f</code> being the name of a function. But we get there in two different ways. In the first example, we <underline>assign</underline> <code>f</code> the function using an assignment statement and a lambda function that refers to the function. In the second example, we <underline>define</underline> <code>f</code> using a <code>def</code> statement that defines the function.</paragraph></document>"
        },
        {
          "id": 361965,
          "original_id": 340496,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Functions are objects",
          "index": 163,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Functions are objects, and you can use them in the same way you use other objects, such as numbers, strings, lists, and so on. Just as you might set a variable&#39;s value to a number, such as <code>1</code>, you might also set it to a function, such as <code>len()</code>. Also:</paragraph><list style=\"bullet\"><list-item><paragraph>You can assign a function to a variable</paragraph></list-item><list-item><paragraph>A function can be an attribute of an object</paragraph></list-item><list-item><paragraph>A function can be an element of a collection</paragraph></list-item><list-item><paragraph>Functions can be keys in a dictionary</paragraph></list-item><list-item><paragraph>You can pass a function as an argument of a function call</paragraph></list-item><list-item><paragraph>You can return a function as the result of a function call</paragraph></list-item></list><paragraph>And so on. Because of this we say that Python functions are <bold>first class</bold>.</paragraph><paragraph>Because you can supply functions as arguments to functions, you can create functions that operate on functions:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">def add(x, y):\n&#x9;return x + y\ndef subtract(x, y):\n&#x9;return x - y\ndef apply(f, x, y): # This function applies function f to values x and y\n&#x9;return f(x, y)\n\nprint(apply(add, 10, 1))\nprint(apply(subtract, 10, 1))</snippet-file></snippet><paragraph>Here&#39;s another example. In this case we define a function <code>compose</code>, which takes two functions <code>f</code> and <code>g</code> as arguments and returns a function - the <italic>composition</italic> of <code>f</code> and <code>g</code>, which is the function that takes an argument <code>x</code> and returns <code>f(g(x))</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def add1(x):\n&#x9;return x + 1\ndef subtract1(x):\n&#x9;return x - 1\ndef compose(f, g): # This function returns a function\n&#x9;return lambda x: f(g(x))\n\nadd2 = compose(add1, add1) # add2 is a new function\nprint(add2(10))\ndo_nothing = compose(add1, subtract1) # do_nothing is a new function\nprint(do_nothing(10))</snippet-file></snippet><paragraph>Functions that take functions as arguments, or return functions as values, are known as <bold>higher order functions</bold>.</paragraph><paragraph></paragraph></document>"
        },
        {
          "id": 361966,
          "original_id": 340497,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Generators",
          "index": 164,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Before we leave the topic of functions, there is one special type of function that you should know about.</paragraph><paragraph>Suppose you have a function that returns a collection of objects, perhaps a list. Suppose it is the following one:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def squares():\n    result = []\n    for x in range(10):\n        result.append(x**2)\n    return(result)\n\nprint(squares())</snippet-file></snippet><paragraph>The function returns the full list, which you can then <bold>iterate</bold> over:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">def squares():\n    result = []\n    for x in range(10):\n        result.append(x**2)\n    return(result)\n\nfor x in squares():\n    print(x)</snippet-file></snippet><paragraph>Rather than getting the function to return the full list, you can get it to return the elements one at a time, by using a <code>yield</code> statement instead of a <code>return</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def squares():\n    for x in range(10):\n        yield x**2 # Use a yield statement\n\nfor x in squares():\n    print(x)</snippet-file></snippet><paragraph>Notice what happens when you print:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def squares():\n    for x in range(10):\n        yield x**2\n\nprint(squares())</snippet-file></snippet><paragraph>The function now returns a special kind of object, called a <bold>generator</bold> - it does not return the full list. This generator object generates the elements as they are needed.</paragraph><paragraph>Why would you do this, rather than have the function return the full list at the outset? If the list is large, and if you don&#39;t need its elements all at once, then it is a good way to save memory. </paragraph><heading level=\"2\">Generator expressions</heading><paragraph>There is an even more concise way to make a generator. Rather than defining a function that returns a generator, you can use a <bold>generator expression</bold>. It is exactly like a comprehension, but you use round brackets. This is why there is no tuple comprehension - the round brackets are used for generator expressions instead.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">squares = (x**2 for x in range(10)) # Get a generator from a generator expression\n\nprint(squares)\nfor x in squares:\n    print(x)</snippet-file></snippet><paragraph></paragraph></document>"
        },
        {
          "id": 361967,
          "original_id": 340498,
          "lesson_id": 53307,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Further reading",
          "index": 165,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.526309+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com</paragraph></list-item></list><paragraph></paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 3 - Functions",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:37.436833+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-10-01T22:21:39.889853+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53306,
      "index": 4,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 361959,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 50371,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 361958,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 361959,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361958,
          "original_id": 340472,
          "lesson_id": 53306,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 3 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.436833+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 3 Tuesday To Do List</heading><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Assignment 1</bold> worth <bold>13 marks</bold> will be released  <bold>today @ 7.15pm</bold></paragraph></list-item><list-item><paragraph><bold>Quiz 1</bold> worth <bold>4 marks</bold> is due <bold>Week 3 Thursday @ 9pm</bold></paragraph></list-item></list><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Continue \"<bold>Week 2 - Lists, Tuples, Sets, and Dictionaries</bold>\" lesson</paragraph><list style=\"bullet\"><list-item><list style=\"unordered\"/></list-item><list-item><paragraph>Adding elements</paragraph><list style=\"unordered\"><list-item><paragraph>Adding to a <bold>list</bold>: <code>append()</code>, <code>insert()</code>, <code>extend()</code>, and using <code>+</code> operator</paragraph></list-item><list-item><paragraph><bold>No</bold> adding to <bold>tuples</bold> since they are <bold>immutable</bold></paragraph></list-item><list-item><paragraph>Adding to a <bold>set</bold>: <code>add()</code> and <code>update()</code></paragraph></list-item><list-item><paragraph>Adding to a <bold>dictionary</bold> by specifying a value for a new key or updating it</paragraph></list-item></list></list-item><list-item><paragraph>Removing elements</paragraph><list style=\"unordered\"><list-item><paragraph>Removing from a list: <code>del</code>, set slice to empty list, <code>pop()</code>, <code>remove()</code>, and <code>clear()</code></paragraph></list-item><list-item><paragraph><bold>No</bold> removing from <bold>tuples</bold> since they are <bold>immutable</bold></paragraph></list-item><list-item><paragraph>Removing from a set: <code>remove()</code> , <code>discard()</code>, and <code>clear()</code></paragraph></list-item><list-item><paragraph>Removing from a dictionary: <code>del</code>, <code>pop()</code>, and <code>clear()</code></paragraph></list-item></list></list-item><list-item><paragraph>Modifying elements</paragraph><list style=\"unordered\"><list-item><paragraph>Modifying list elements: assignment and slice</paragraph></list-item><list-item><paragraph><bold>No</bold> <bold>tuples</bold> modification since they are <bold>immutable</bold></paragraph></list-item><list-item><paragraph>Modifying set elements: can not be changed, but remove then add</paragraph></list-item><list-item><paragraph>Modifying dictionary elements: using assignment similarly to list elements</paragraph></list-item></list></list-item><list-item><paragraph>Sorting elements</paragraph><list style=\"unordered\"><list-item><paragraph><code>sort()</code> method (<bold>lists</bold> <bold>only</bold> and <bold>in-place</bold>)</paragraph></list-item><list-item><paragraph><code>sorted()</code> method (<bold>applies to all</bold> and <bold>returns a list</bold>)</paragraph></list-item></list></list-item><list-item><paragraph>Joining elements using <code>join()</code> string method</paragraph></list-item><list-item><paragraph>Special string operations</paragraph><list style=\"unordered\"><list-item><paragraph>Strings as tuples</paragraph></list-item><list-item><paragraph>Splitting strings</paragraph></list-item></list></list-item><list-item><paragraph>Special set operations: union, intersection, difference, symmetric difference, comparing sets</paragraph></list-item><list-item><paragraph>Comprehensions</paragraph></list-item><list-item><paragraph>Files as lists: <code>readlines()</code>, <code>writelines()</code>, reading CSV files</paragraph></list-item><list-item><paragraph>Dates and times</paragraph></list-item></list></list-item><list-item><paragraph>Start \"<bold>Functions</bold>\" lesson</paragraph><list style=\"bullet\"><list-item><paragraph>Functions</paragraph></list-item><list-item><paragraph>Defining functions</paragraph></list-item><list-item><paragraph>Variable scope</paragraph></list-item><list-item><paragraph>Nested functions</paragraph></list-item><list-item><paragraph>Lambda functions</paragraph></list-item><list-item><paragraph>Functions are objects</paragraph></list-item><list-item><paragraph>Generators</paragraph></list-item></list></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>For examples of <bold>Flow of Execution</bold>, see: <link href=\"https://runestone.academy/ns/books/published/thinkcspy/Functions/FlowofExecutionSummary.html\">https://runestone.academy/ns/books/published/thinkcspy/Functions/FlowofExecutionSummary.html</link><break/></paragraph></list-item><list-item><paragraph>Python List <code>sort()</code> Method <break/><link href=\"https://www.programiz.com/python-programming/methods/list/sort\">https://www.programiz.com/python-programming/methods/list/sort</link><break/></paragraph></list-item><list-item><paragraph>Python <code>sorted()</code> Method<break/><link href=\"https://www.programiz.com/python-programming/methods/built-in/sorted\">https://www.programiz.com/python-programming/methods/built-in/sorted</link></paragraph></list-item></list></document>"
        },
        {
          "id": 361959,
          "original_id": 340473,
          "lesson_id": 53306,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 3 Thursday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:37.436833+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 3 Thursday To Do List</heading><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Assignment 1</bold> discussion</paragraph></list-item><list-item><paragraph><bold>Quiz 2</bold> worth <bold>4 marks</bold> will be released <bold>today @ 7.15pm</bold></paragraph></list-item><list-item><paragraph><bold>Quiz 1</bold> worth <bold>4 marks</bold> is due <bold>today @ 9pm</bold></paragraph></list-item></list><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Continue \"<bold>Functions</bold>\" lesson</paragraph><list style=\"bullet\"><list-item><paragraph>Defining functions</paragraph></list-item><list-item><paragraph>Variable scope</paragraph></list-item><list-item><paragraph>Nested functions</paragraph></list-item><list-item><paragraph>Lambda functions</paragraph></list-item><list-item><paragraph>Functions are objects</paragraph></list-item><list-item><paragraph>Generators</paragraph></list-item></list><paragraph/></list-item><list-item><paragraph>Week 3 - Notes 2 The Monty Hall Problem</paragraph></list-item></list><list style=\"number\"><list-item><list style=\"bullet\"><list-item><paragraph>functions from the random module (<code>random()</code>, <code>choice()</code>, <code>randrange()</code>, <code>seed()</code>, ...)</paragraph></list-item><list-item><paragraph><code>input()</code> function</paragraph></list-item><list-item><paragraph><code>int()</code> function</paragraph></list-item><list-item><paragraph>exceptions</paragraph></list-item><list-item><paragraph><code>break</code> statement</paragraph></list-item><list-item><paragraph><code>istitle()</code> and <code>lower()</code> str class methods</paragraph></list-item><list-item><paragraph>sets, sets vs dictionaries</paragraph></list-item><list-item><paragraph><code>choice()</code> function</paragraph></list-item><list-item><paragraph><code>randrange()</code>  function</paragraph></list-item><list-item><paragraph><code>remove()</code> and <code>pop()</code> list class methods</paragraph></list-item><list-item><paragraph>multiple assignments</paragraph></list-item><list-item><paragraph>functions with default parameter values </paragraph></list-item><list-item><paragraph>formatted strings</paragraph></list-item><list-item><pre>12 possible outcomes:\nwinning door A A A A B B B B C C C C\nfirst chosen A A B C B B A C C C A B\nopened door  B C C B A C C A A B B A\n</pre></list-item><list-item><pre>24 possible outcomes:\nwinning door    A A A A A A A A B B B B B B B B C C C C C C C C\nfirst chosen    A A A A B B C C B B B B A A C C C C C C A A B B\nopened door     B B C C C C B B A A C C C C A A A A B B B B A A \n2nd chosen door A C A B A B A C B C B A B A B C C B C A C A C B\n</pre></list-item></list></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>doctest — Test interactive Python examples (will be used for final exam questions)<break/><link href=\"https://docs.python.org/3/library/doctest.html\">https://docs.python.org/3/library/doctest.html</link></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "completed",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 3 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:36.029154+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53292,
      "index": 3,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11527,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47884,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 361906,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 361906,
          "original_id": 326066,
          "lesson_id": 53292,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "How to Use Jupyter Notebook: A Beginner’s Tutorial",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:36.029154+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph><link href=\"https://www.dataquest.io/blog/jupyter-notebook-tutorial/\">https://www.dataquest.io/blog/jupyter-notebook-tutorial/</link></paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "How to Use Jupyter Notebook: A Beginner’s Tutorial",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:42.984426+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53327,
      "index": 17,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 51653,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 362055,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362056,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362055,
          "original_id": 351469,
          "lesson_id": 53327,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 9 Tuesday To Do List",
          "index": 9,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.984426+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 9 Tuesday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 6</bold> worth <bold>4 marks</bold> is due <bold>Week 9 Thursday 25/7/24 @ 9pm</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday 5/8/24 @ 10am</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Final Exam</bold> worth <bold>50 marks</bold> to be held on <bold>Wednesday 21 August 2024</bold><break/><break/></paragraph></list-item></list><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Week 9 Notes 13 <bold>Quadratic Equations</bold></paragraph><list style=\"bullet\"><list-item><paragraph>Provide deep understanding of <bold>object oriented design and syntax</bold></paragraph></list-item><list-item><paragraph>Keyword arguments</paragraph></list-item><list-item><paragraph>Positional arguments</paragraph></list-item><list-item><paragraph><bold>Functional</bold> design</paragraph></list-item><list-item><paragraph><bold>Package</bold> design</paragraph></list-item><list-item><paragraph><bold>Object-oriented</bold> design<break/><break/></paragraph></list-item></list></list-item><list-item><paragraph>Solve <bold>Sample Exam Question 2</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Assignment 2</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Quiz 6</bold></paragraph></list-item></list></document>"
        },
        {
          "id": 362056,
          "original_id": 351470,
          "lesson_id": 53327,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 9 Thursday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.984426+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 9 Thursday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 6</bold> worth <bold>4 marks</bold> is due today <bold>@ 9pm</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday 5/8/24 @ 10am</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Final Exam</bold> worth <bold>50 marks</bold> to be held on <bold>Wednesday 21 August 2024</bold><break/><break/></paragraph></list-item><list-item><paragraph>There will be <bold>two (2) back to back sessions (morning and afternoon)</bold> with <bold>corralling for the afternoon session</bold>. Morning students can't leave until the afternoon students are properly corralled<break/><break/></paragraph></list-item><list-item><paragraph><bold>Session preference</bold> <bold>form</bold> released to students <bold>today at 4.23pm</bold> (check your email):<break/><link href=\"https://cgi.cse.unsw.edu.au/~exam/24T2/seating/register.cgi\">https://cgi.cse.unsw.edu.au/~exam/24T2/seating/register.cgi</link><break/>Closes <bold>Midday Week 10 Friday 2nd August 2024</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Seating allocations</bold> released <bold>Mid Week 11 (Study Break)</bold> together with <bold>exact time and location</bold><break/><break/></paragraph></list-item><list-item><paragraph>Exam environment for practice open until  <bold>Week 11 Tuesday 6 August 23.59pm</bold>. </paragraph></list-item></list><paragraph/><heading level=\"2\">Content </heading><list style=\"number\"><list-item><paragraph>Week 9 Notes 14 <bold>Levenshtein Distance</bold></paragraph><list style=\"bullet\"><list-item><paragraph>See also <link href=\"https://edstem.org/au/courses/16645/workspaces/ppDT8EIc4fQLFpiCFpFUBncfwC0ulpsm\">https://edstem.org/au/courses/16645/workspaces/ppDT8EIc4fQLFpiCFpFUBncfwC0ulpsm</link><break/><break/></paragraph></list-item></list></list-item><list-item><paragraph>Solve <bold>Sample Exam Questions 5 and 7</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Assignment 2</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Quiz 6</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Useful links about Levenshtein distance</heading><list style=\"ordered\"><list-item><paragraph>Levenshtein distance<break/><link href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\">https://en.wikipedia.org/wiki/Levenshtein_distance</link><break/></paragraph></list-item><list-item><paragraph>Levenshtein Distance, in Three Flavors <link href=\"https://people.cs.pitt.edu/~kirk/cs1501/Pruhs/Spring2006/assignments/editdistance/Levenshtein%20Distance.htm\">https://people.cs.pitt.edu/~kirk/cs1501/Pruhs/Spring2006/assignments/editdistance/Levenshtein%20Distance.htm</link><break/></paragraph></list-item><list-item><paragraph>Another Python version of Levenshtein distance <link href=\"https://folk.idi.ntnu.no/mlh/hetland_org/coding/python/levenshtein.py\">https://folk.idi.ntnu.no/mlh/hetland_org/coding/python/levenshtein.py</link><break/></paragraph></list-item><list-item><paragraph>Levenshtein Distance<break/><link href=\"https://python-course.eu/levenshtein_distance.php\">https://python-course.eu/levenshtein_distance.php</link></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 9 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:48.687891+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53338,
      "index": 5,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11529,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47916,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": true,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 5,
      "slide_marks_summary": [
        {
          "id": 362124,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362125,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 5,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378413,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 378419,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362127,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362124,
          "original_id": 343333,
          "lesson_id": 53338,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 1: A circle class",
          "index": 92,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.687891+10:00",
          "updated_at": null,
          "challenge_id": 119412,
          "content": "<document version=\"2.0\"><paragraph>Write a program in which you define a class <code>Circle</code>, to facilitate working with circles, and then illustrate its use.</paragraph><paragraph>Your <code>Circle</code> class should:</paragraph><list style=\"bullet\"><list-item><paragraph>Have an <code>__init__</code> special method that allows you to create a <code>Circle</code> object by supplying a number which is the radius of the circle. This should be stored in an attribute <code>radius</code>. The method should check that the supplied value is a valid radius (i.e. a non-negative float), and deal with invalid values appropriately.</paragraph></list-item><list-item><paragraph>Have a <code>__str__</code> special method that allows you to print a <code>Circle</code> object in an informative way (for example, if the radius is 5 it returns <code>Circle of radius 5</code>).</paragraph></list-item><list-item><paragraph>Have an instance method called <code>circumference</code> that returns the circumference of a <code>Circle</code> object.</paragraph></list-item><list-item><paragraph>Have an instance method called <code>area</code> that returns the area of a <code>Circle</code> object.</paragraph></list-item><list-item><paragraph>Have <code>__eq__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code> special methods that allow you to compare two <code>Circle</code> objects. You should compare them by radius, so that two <code>Circle</code> objects are equal when they have the same radius; one <code>Circle</code> object is less than another <code>Circle</code> object when it has a smaller radius; and so on.</paragraph></list-item><list-item><paragraph>Make appropriate use of docstrings.</paragraph></list-item></list><paragraph>To illustrate the use of your class, here is the kind of code you might add to your program, after your class definition:</paragraph><pre># Inspect the documentation\nprint(Circle.__doc__) # Output: A class to facilitate working with circles\nprint(Circle.circumference.__doc__) # Output: Returns the circumference of the circle\nprint(Circle.area.__doc__) # Output: Returns the area of the circle\n\n# Create some Circle objects\ncircle_1 = Circle(4)\ncircle_2 = Circle(5.3)\ncircle_3 = Circle(-2) # Output: an appropriate error message\ncircle_4 = Circle('a') # Output: an appropriate error message\n\n# Print them\nprint(circle_1) # Output: Circle of radius 4\nprint(circle_2) # Output: Circle of radius 5.3\n\n# Get their circumference and area\nprint(circle_1.circumference()) # Output: 25.13\nprint(circle_1.area()) # Output: 50.27\nprint(circle_2.circumference()) # Output: 33.3\nprint(circle_2.area()) # Output: 88.25\n\n# Compare them\nprint(circle_1 &lt; circle_2) # Output: True\nprint(circle_1 &lt;= circle_2) # Output: True\nprint(circle_1 == circle_2) # Output: False\nprint(circle_1 &gt;= circle_2) # Output: False\nprint(circle_1 &gt; circle_2) # Output: False\n</pre><callout type=\"info\">As a guide, use the <code>Length</code> class that was defined in Week 5 content as an illustrative example.</callout></document>"
        },
        {
          "id": 362125,
          "original_id": 343334,
          "lesson_id": 53338,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 2: A text class",
          "index": 93,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.687891+10:00",
          "updated_at": null,
          "challenge_id": 119413,
          "content": "<document version=\"2.0\"><paragraph>Write a program in which you define a class <code>Text</code>, to facilitate working with pieces of text.</paragraph><paragraph>Define your class such that:</paragraph><list style=\"unordered\"><list-item><paragraph>Each instance of <code>Text</code> has an attribute <code>words</code> which holds the words of the text in an array, a method <code>num_words</code> which returns the number of words in the text, a method <code>num_chars</code> which returns the total number of characters in the words, and a method <code>word_length</code> which returns the average number of characters per word (as a float rounded to one decimal place).</paragraph></list-item></list><paragraph>Get your program to ask the user for a piece of text, and then, using the class you have defined, tell the user the number of words in the text, the number of characters in the text, and the average number of characters per word in the text.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>Please enter your text: The quick brown fox jumped over the lazy dog.\nNumber of words: 9\nNumber of characters: 36\nAverage word length: 4.0\n</pre><paragraph>Note: you might find it helpful to have your class clean the text before splitting it into words, in the way that you did in the Week 3 Exercise 1: Word frequency practice exercise.</paragraph></document>"
        },
        {
          "id": 378413,
          "original_id": null,
          "lesson_id": 53338,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 3: A location class",
          "index": 94,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-28T11:13:34.290943+10:00",
          "updated_at": null,
          "challenge_id": 124975,
          "content": "<document version=\"2.0\"><paragraph>Sometimes we work with data about things that have a <bold>location</bold>, given as a <bold>latitude</bold> and a <bold>longitude</bold>. </paragraph><paragraph>Define a class to help us work with locations.</paragraph><paragraph>Give a location two <bold>data</bold> attributes: <code>lat</code>, and <code>lon</code>. </paragraph><paragraph>Give also location the following three <bold>method</bold> attributes:</paragraph><list style=\"bullet\"><list-item><paragraph><code>hemisphere()</code>, which returns which <bold>hemisphere</bold> the location is in:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Northern Hemisphere</bold> if lat &gt; 0</paragraph></list-item><list-item><paragraph><bold>Southern Hemisphere</bold> if lat &lt; 0</paragraph></list-item><list-item><paragraph><bold>Equator</bold> if lat = 0<break/></paragraph></list-item></list></list-item><list-item><paragraph><code>zone()</code>, which returns which <bold>zone</bold> the location is in, defined by the tropics and the arctic/antarctic circles:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>North Frigid Zone</bold> if lat &gt;= 66.57</paragraph></list-item><list-item><paragraph><bold>North Temperate Zone</bold> if lat &gt;= 23.43</paragraph></list-item><list-item><paragraph><bold>Tropical Zone</bold> if lat &gt;= -23.43</paragraph></list-item><list-item><paragraph><bold>South Temperate Zone</bold> if lat &gt;= -66.57</paragraph></list-item><list-item><paragraph><bold>South Frigid Zone</bold>  if lat &lt; -66.57<break/></paragraph></list-item></list></list-item><list-item><paragraph><code>direction_to()</code>, which returns the direction to another location:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>North</bold> if lat &lt; another lat</paragraph></list-item><list-item><paragraph><bold>South</bold> if lat &gt; another lat</paragraph></list-item><list-item><paragraph><bold>East</bold> if lon &lt; another lon</paragraph></list-item><list-item><paragraph><bold>West</bold> if lon &gt; another lon</paragraph></list-item></list></list-item></list><paragraph>Add some error checking. For instance, latitudes must be between -90 and 90, and longitudes must be between -180 and 180.</paragraph><paragraph>To illustrate the use of your class, here is the kind of code you might add to your program, after your class definition:</paragraph><pre>sydney = Location(-33.87, 151.21)\nwellington = Location(-41.28, 174.77)\nhobart = Location(-42.88, 147.33)\nstockholm = Location(59.33, 18.07)\n\nprint(f\"Sydney is in the {sydney.zone()}\") # Sydney is in the South Temperate Zone\nprint(f\"Stockholm is in the {stockholm.zone()}\") # Stockholm is in the North Temperate Zone\n\nprint(f\"To get from Sydney to Stockholm you need to travel {sydney.direction_to(stockholm)}\") # To get from Sydney to Stockholm you need to travel North West\nprint(f\"To get from Hobart to Wellington you need to travel {hobart.direction_to(wellington)}\") # To get from Hobart to Wellington you need to travel North East\n\nnowhere = Location(-200, 151.21) # The output is shown below\n# Traceback (most recent call last):\n#   File \"/home/main.py\", line 41, in &lt;module&gt;\n#     nowhere = Location(-200, 151.21)\n#               ^^^^^^^^^^^^^^^^^^^^^^\n#   File \"/home/main.py\", line 7, in __init__\n#     raise Exception(\"Invalid coordinates\")\n# Exception: Invalid coordinates\n\n</pre><paragraph/></document>"
        },
        {
          "id": 378419,
          "original_id": 328584,
          "lesson_id": 53338,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 4:  A temperature module",
          "index": 96,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-28T21:55:16.857234+10:00",
          "updated_at": null,
          "challenge_id": 124977,
          "content": "<document version=\"2.0\"><paragraph>There are many different units in which temperature can be measured. Three of the most common are Celsius,  Fahrenheit, and Kelvin (used a lot in science).</paragraph><paragraph>Your task is to define a Temperature class, which we can use to more easily convert temperatures from one scale to another, and to compare temperatures that are on different scales.</paragraph><paragraph>The conversions between the scales go as follows:</paragraph><pre>Converting to Celsius:\nCelsius = (Fahrenheit - 32) × 5/9\nCelsius = Kelvin - 273.15\n\nConverting from Celsius:\nFahrenheit = (9/5 x Celsius) + 32\nKelvin = Celsius + 273.15\n</pre><paragraph/><paragraph>Your <code>Temperature</code> class should:</paragraph><list style=\"bullet\"><list-item><paragraph>Have an <code>__init__</code> special method that allows you to create a <code>Temperature</code> object by supplying a number and a unit: either Celsius (C), Fahrenheit (F), or Kelvin (K).</paragraph></list-item><list-item><paragraph>Have a <code>__str__</code> special method that allows you to print a <code>Temperature</code> object in an informative way.</paragraph></list-item><list-item><paragraph>Have an instance method called <code>to</code> that has a parameter for a unit, an optional parameter for a number of decimal places, and returns the temperature of the instance in the given unit, rounded to the given number of decimal places, if any were given, otherwise not rounded.</paragraph></list-item><list-item><paragraph>Have <code>__eq__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code> special methods that allow you to compare two Temperature objects.</paragraph></list-item><list-item><paragraph>Make appropriate use of <bold>docstrings</bold>.</paragraph></list-item></list><paragraph>Save your class in a module called <code>temperature.py</code>. Import this module into <code>code.py</code>, and add some code to <code>code.py</code> that illustrates the use of your <code>Temperature</code> class.</paragraph><paragraph><bold>Example:</bold></paragraph><paragraph>Here is the kind of code you might use in <code>code.py</code> to illustrate your class:</paragraph><pre># Create Temperature objects\ntemp_1 = Temperature(32, 'C')\ntemp_2 = Temperature(100, 'F')\ntemp_3 = Temperature(324, 'K')\n\n# Print them\nprint(temp_1) # Outputs Temperature: 32C\nprint(temp_2) # Outputs Temperature: 100F\nprint(temp_3) # Outputs Temperature: 324K\n\n# Convert them\nprint(temp_1.to('F')) # Outputs 89.6\nprint(temp_2.to('K', 3)) # Outputs 310.928\nprint(temp_3.to('C', 1)) # Outputs 50.9\n\n# Compare them\nprint(temp_1 == temp_2) # Outputs False\nprint(temp_1 &lt; temp_2) # Outputs True\nprint(temp_1 &lt;= temp_2) # Outputs True\nprint(temp_1 &gt; temp_2) # Outputs False\nprint(temp_1 &gt;= temp_2) # Outputs False\n</pre><callout type=\"info\">As a guide, use the <code>Length</code> class that was defined in Week 5 content as an illustrative example.</callout></document>"
        },
        {
          "id": 362127,
          "original_id": 326249,
          "lesson_id": 53338,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Exercise 5: Mediants",
          "index": 103,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:48.687891+10:00",
          "updated_at": null,
          "challenge_id": 119415,
          "content": "<document version=\"2.0\"><paragraph>Let two distinct reduced positive fractions $F_1=\\frac{p_1}{q_1}$ and $F_2=\\frac{p_2}{q_2}$ be given, with the denominator set to 1 in case the fraction is 0. The mediant of $F_1$ and $F_2$ is defined as $\\frac{p_1+p_2}{q_1+q_2}$; it is also in reduced form, and sits between $F_1$ and $F_2$. Let a reduced fraction $F=\\frac{p}{q}$ in $(0,1)$ be given. It can be shown that starting with $\\frac{0}{1}$ and $\\frac{1}{1}$, one can compute a finite number of mediants and eventually generate $F$. More precisely, there exists $n\\in\\mathbf N$ and a sequence of pairs of fractions $(F_1^i,F_2^i)_{i\\leq n}$ such that:</paragraph><list style=\"bullet\"><list-item><paragraph>$F_1^0=\\frac{0}{1}$ and $F_2^0=\\frac{1}{1}$;</paragraph></list-item><list-item><paragraph>for all $i&lt; n$, either $F^{i+1}_1$ or $F^{i+1}_2$ is the mediant of $F^i_1$ and $F^i_2$, with $F^{i+1}_2$ equal to $F^i_2$ or $F^{i+1}_1$ equal to $F^i_1$, respectively, depending on whether that mediant is strictly smaller or strictly greater than $F$, respectively.</paragraph></list-item><list-item><paragraph>$F$ is the mediant of $F_1^n$ and $F_2^n$.<break/></paragraph></list-item></list><paragraph>The program <code><bold>mediants.py</bold></code> defines a function <code><bold>mediants_to()</bold></code> that given as arguments two strictly positive integers $p$ and $q$ with $p&lt;q$ and $\\gcd(p,q)=1$, computes the sequence $(F_1^i,F_2^i)_{i\\leq n}$ previously defined. The function returns None but displays that sequence, one pair per line, with the mediant of the pair in-between, and for all pairs except the last one, indicating with the * character whether $\\frac{p}{q}$ is between the first member of the pair and the mediant, or between the mediant and the second member of the pair. The numerators and denominators of all fractions are aligned and displayed in a field of width equal to the maximum of the number of digits in $p$ and the number of digits in $q$. Five spaces, or two spaces, the * character and two spaces, precede and follow the display of all mediants. Replace pass in the body of <code><bold>mediants_to()</bold></code> with your code, possibly defining other functions.</paragraph></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 7",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-07-09T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-07-02T22:43:20.128534+10:00",
      "due_at": "2024-08-05T10:00:00+10:00",
      "effective_available_at": "2024-07-09T19:15:00+10:00",
      "effective_due_at": "2024-08-05T10:00:00+10:00",
      "effective_locked_at": "2024-08-10T10:00:00+10:00",
      "first_viewed_at": "2025-07-29T10:32:34.225544+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 56004,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 378866,
      "late_submissions": true,
      "locked_at": "2024-08-10T10:00:00+10:00",
      "module_id": 11531,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 53350,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": true,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 378866,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 378866,
          "original_id": 362152,
          "lesson_id": 56004,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Assignment 2",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-02T22:43:20.128534+10:00",
          "updated_at": null,
          "challenge_id": 125093,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This <bold>Assignment 2</bold> is worth <bold>13 marks</bold> distributed as follows:</paragraph><pre>Marking                                            \n                                                 Subtotal\n __init__() method                                 3.0 marks        \n     Incorrect input                        1.5\n     Input does not represent a labyrinth   1.5\n    \n display_features() method                        10.0 marks\n     gates                                  1.5\n     walls that are all connected           1.5\n     inaccessible inner points              1.5\n     accessible areas                       1.5\n     accessible cul-de-sacs                 2.0\n     entry-exit paths                       2.0    \n    \nTotal                                             13.0 marks      \n</pre><paragraph/><paragraph><bold>Assignment 2</bold> is due <bold>Week 11 Monday 5 August 2024 @ 10:00am (Sydney time)</bold></paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 5 days</bold> from the due date, that is, any late submission after <bold>Week 11 Saturday 10 August 2024 @ 10:00am</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>labyrinth.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>. It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for <bold>Assignment 2</bold>.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/DTpx98Hhfgka76gGgfFmKKps\" filename=\"Assignment_2.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-08-12T10:15:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Assignment 2",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-07-09T16:26:31.17487+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-25T11:16:07.37238+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 56296,
      "index": 12,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 381285,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": true,
      "original_id": null,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 3,
      "slide_marks_summary": [
        {
          "id": 381285,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 381287,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 381289,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 381285,
          "original_id": 328687,
          "lesson_id": 56296,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "The Matplotlib family",
          "index": 19,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-07-09T16:50:54.747431+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>We will be looking at how to visualise data using <bold>Matplotlib</bold>, a powerful Python plotting library with which you can quickly generate plots of your data. It is inspired by <bold>Matlab</bold>, and many of its objects are similarly named. Hence, if you are familiar with Matlab then you should feel at home using Matplotlib.</paragraph><paragraph>Matplotlib provides a module called <bold>pyplot</bold> as a convenient way to access the Matplotlib functionality, and it is actually with pyplot that we do the plotting.</paragraph><paragraph/><heading level=\"2\">Plotting with pyplot</heading><paragraph>To use pyplot you must import it. Note that pyplot is part of the Matplotlib library, but since it is the only part of Matplotlib that we will be using we can use a more targeted import. It is standard to use the alias <code>plt</code> for the pyplot object:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt</snippet-file></snippet><paragraph/><heading level=\"2\">Plotting with pyplot via pandas</heading><paragraph>Working directly with pyplot can be a bit laborious. Pandas provides its own <code>plot()</code> function as a method of series and data frames, which automatically performs many of the common tasks involved in using pyplot.</paragraph><paragraph>Because the <code>plot()</code> method is part of pandas, you do not need to import anything other than pandas to use it. It is standard to use the alias <code>pd</code>:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import pandas as pd</snippet-file></snippet><paragraph/><heading level=\"2\">Plotting with pyplot via seaborn</heading><paragraph>Although pandas' <code>plot()</code> method simplifies the process of plotting with Matplotlib, there are some ways in which it is still limited. <bold>Seaborn</bold> is a library that is designed to further simplify the task of using pyplot. It is not part of pandas, but it is designed to work well with pandas. It is particularly good for working with categorical (i.e., non-numerical) data.</paragraph><paragraph>To use seaborn you must import it. It is standard to use the alias <code>sns</code>:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import seaborn as sns</snippet-file></snippet><paragraph>Seaborn has some very nice plotting styles. You can set a style by calling seaborn's <code>set()</code> function, and if you do not specify which style you would like then seaborn will just set its default style:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import seaborn as sns\nsns.set()</snippet-file></snippet><paragraph>Keep in mind that calling <code>set()</code> will affect the style of all matplotlib plots, not just those you create using seaborn.</paragraph><paragraph>The seaborn website has an excellent <link href=\"https://seaborn.pydata.org/examples/index.html\">example gallery</link> of plots, with the code that is used to produce them.</paragraph></document>"
        },
        {
          "id": 381287,
          "original_id": 328689,
          "lesson_id": 56296,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Working directly with pyplot",
          "index": 22,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-09T16:50:54.789073+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph>Although it is easier to do plotting with pandas and seaborn, we will go through some basic plotting directly with pyplot. This will give you a better understanding of what is going on behind the scenes when you plot with pandas and seaborn.</paragraph><paragraph/><heading level=\"2\">An example</heading><paragraph>Suppose you have the following (fictitious) data about quarterly unemployment rates for NSW and VIC, loaded into a Python dictionary:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">data = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}</snippet-file></snippet><paragraph>The following program uses pyplot to create line plots of these quarterly figures, one line for each state.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\n\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\n# Create a new figure and call it 'fig'\nfig = plt.figure()\n\n# Add an axes to the figure and call it 'ax'\nax = fig.add_subplot()\n\n# Add a line plot to ax\n# Use the quarters as the x-values and the NSW percentages as the y-values\nax.plot(data['NSW'].keys(), data['NSW'].values())\n\n# Add a line plot to ax\n# This time use the VIC percentages as the y-values\nax.plot(data['VIC'].keys(), data['VIC'].values())\n\n# Save the figure\n# This step is necessary for getting the plot to show here in Ed\nfig.savefig('plot.png')</snippet-file></snippet><callout type=\"info\">To get a plot to show here in Ed, you must save it using <code>fig.savefig()</code>. You can name the plot whatever you want.</callout><paragraph/><heading level=\"2\">Adding some features</heading><paragraph>It would be better if we added a figure title, some line labels and a legend, and some axis labels:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\n\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\nfig = plt.figure()\n\n# Add a figure title\nfig.suptitle('Unemployment Rates')\n\nax = fig.add_subplot()\n\n# Specify labels this time\nax.plot(data['NSW'].keys(), data['NSW'].values(), label='NSW')\nax.plot(data['VIC'].keys(), data['VIC'].values(), label='VIC')\n\n# Show a legend\nax.legend()\n\n# Specify axis labels \nax.set_xlabel('Quarter')\nax.set_ylabel('Unemployment (%)')\n\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/><heading level=\"2\">Using multiple axes</heading><paragraph>In the figure above, both line plots were drawn on the same axes. You can draw them on separate axes instead, by adding two axes to the figure and specifying how they should be laid out.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\nfig = plt.figure()\nfig.suptitle('Unemployment Rates')\n\n# Add an axes. It's the first axes of a 1 x 2 grid of axes.\nax1 = fig.add_subplot(1, 2, 1)\n\n# No need for a label this time\nax1.plot(data['NSW'].keys(), data['NSW'].values())\n\n# Specify a title for the axes, and labels for the x- and y-axis\nax1.set_title('NSW')\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Unemployment (%)')\n\n# Add an axes. It's the second axes of a 1 x 2 grid of axes.\nax2 = fig.add_subplot(1, 2, 2)\n\n# No need for a label this time\nax2.plot(data['VIC'].keys(), data['VIC'].values())\n\n# Specify a title for the axes, and labels for the x- and y-axis\nax2.set_title('VIC')\nax2.set_xlabel('Quarter')\nax2.set_ylabel('Unemployment (%)')\n\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/><heading level=\"2\">Some finishing touches</heading><paragraph>Let us add a few finishing touches:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\n# Set the size to be 10 inches wide by 8 inches tall\nfig = plt.figure(figsize=[10, 8])\n\nfig.suptitle('Unemployment Rates')\nax1 = fig.add_subplot(1, 2, 1)\nax1.plot(data['NSW'].keys(), data['NSW'].values())\nax1.set_title('NSW')\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Unemployment (%)')\n\n# Set the y-axis values to go from 3 to 4\nax1.set_ylim(3, 4)\n\n# Set the y-axis ticks to be 3.0, 3.1, 3.2, ..., 4.0 \nax1.set_yticks([x/10 for x in range(30, 41)])\n\n# Show gridlines on the axes\nax1.grid()\n\n# Tell ax2 to share its y-axis with ax1\nax2 = fig.add_subplot(1, 2, 2, sharey=ax1)\n\n# Specify the colour of the line\nax2.plot(data['VIC'].keys(), data['VIC'].values(), color='green')\n\nax2.set_title('VIC')\nax2.set_xlabel('Quarter')\n\n# Show gridlines on the axes\nax2.grid()\n\n# Create a bit more space around the axes, to stop overlap\nfig.tight_layout()\n\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/><heading level=\"2\">One more example</heading><paragraph>The figure that was used in the previous slide, to illustrate plotting terminology, was created using pyplot. Here's the code for it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8))\nfig.suptitle('A figure with three axes')\n\nax = fig.add_subplot(2, 2, 1)\nax.bar([1,2,3,4], [1,3,1,4])\nax.set_title('An axes with bar plot')\nax.set_xlabel('x-axis, with major ticks')\nax.set_ylabel('y-axis, with major ticks')\n\nax = fig.add_subplot(2, 2, 2)\nax.scatter([1,2,3,4], [2,4,1,2])\nax.set_title('An axes with scatter plot and grid')\nax.set_xlabel('x-axis, with major ticks')\nax.set_ylabel('y-axis, with major ticks')\nax.set_xlim(0,5)\nax.set_ylim(0,5)\nax.grid()\n\nax = fig.add_subplot(2, 1, 2)\nax.plot([1,2,3,4], [1,3,2,4], label='Line 1')\nax.plot([1,2,3,4], [2,1,4,3], label='Line 2')\nax.set_title('An axes with line plot')\nax.set_xlabel('x-axis, with major and minor ticks')\nax.set_ylabel('y-axis, with major and minor ticks')\nax.minorticks_on()\nax.legend(title='Legend')\n\nfig.tight_layout()\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/></document>"
        },
        {
          "id": 381289,
          "original_id": null,
          "lesson_id": 56296,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "More plots examples using pyplot",
          "index": 74,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-09T17:15:17.845497+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><paragraph><bold>Example 1: Simple plot</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\n\nx_numbers = [1, 6, 3]\ny_numbers = [2, 4, 6]\n\nplt.plot(x_numbers, y_numbers)\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 2: Adding a marker</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nx_numbers = [1, 6, 3]\r\ny_numbers = [2, 4, 6]\r\n\r\nplt.plot(x_numbers, y_numbers, '+')\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 3: Changing the marker</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nx_numbers = [1, 6, 3]\r\ny_numbers = [2, 4, 6]\r\n\r\nplt.plot(x_numbers, y_numbers, marker='*')\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 4: Annual temperatures in NYC</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nplt.plot(nyc_temp, marker='o')\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 5: Annual temperatures in NYC with years</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nyears = range(2000, 2013)\r\n\r\nplt.plot(years, nyc_temp, marker='o')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 6: Comparing multiple datasets</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# New York City temperatures (farenheight)\r\ntemp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\r\ntemp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\r\ntemp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\r\n\r\nmonths = range(1, 13)\r\n\r\nplt.plot(months, temp_2000, months, temp_2006, months, temp_2012)\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 7: Multiple datasets with legends</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# New York City temperatures (farenheight)\r\ntemp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\r\ntemp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\r\ntemp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\r\n\r\nmonths = range(1, 13)\r\n\r\nplt.plot(months, temp_2000, months, temp_2006, months, temp_2012) \r\n\r\nplt.legend([2000, 2006, 2012])\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 8: Adding a title and labels</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# New York City temperatures (farenheight)\r\ntemp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\r\ntemp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\r\ntemp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\r\n\r\nmonths = range(1, 13)\r\n\r\nplt.plot(months, temp_2000, months, temp_2006, months, temp_2012) \r\n\r\nplt.legend([2000, 2006, 2012])\r\nplt.title('Average monthly temperature in NYC')\r\nplt.xlabel('Month')\r\nplt.ylabel('Temperature (F)')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 9: Adjusting axes ranges</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nplt.plot(nyc_temp, marker='o')\r\n\r\nprint(f'Original axes ranges {plt.axis()}') # Display existing axis values (auto-generated)\r\n\r\nnewAxisRange = [0, 12, 53.4, 57.3]\r\nplt.axis(newAxisRange)\r\n\r\nprint(f'updated axes ranges {plt.axis()}')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 10: Adjusting axes ranges version 2</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nplt.plot(nyc_temp, marker='o')\r\n\r\nprint(f'Original axes {plt.axis()}') # Display existing axis values (auto-generated)\r\n\r\nplt.axis(ymin = 50) # Set minimum of y-axis to zero\r\nplt.axis(ymax = 60) # Set maximum of y-axis\r\n\r\nprint(f'updated axes ranges {plt.axis()}')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 11: Plot 1 revisited</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\ndef create_graph():\r\n    x_numbers = [1, 6, 3]\r\n    y_numbers = [2, 4, 6]\r\n\r\n    plt.plot(x_numbers, y_numbers)\r\n    plt.savefig('a.png')\r\n\r\n\r\nif __name__ == '__main__':\r\n    create_graph()</snippet-file></snippet><paragraph/><paragraph><bold>Example 12: Graphing functions - Gravity</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# Draw the graph - takes the x and y sets of data as parameters\r\ndef draw_graph(x, y):\r\n    plt.plot(x, y, marker='o')\r\n    plt.xlabel('Distance (metres)') \r\n    plt.ylabel('Gravitational force (newtons)')\r\n    plt.title('Gravitational force and distance')\r\n    plt.savefig('a.png')\r\n\r\ndef generate_F_r():\r\n    r = range(100, 1001, 50) # Set from 100 to 1000 in steps of 50\r\n    F = [] # Empty set ready to fill with values\r\n    G = 6.674 * (10**-11) # Gravitational constant\r\n    m1 = 0.5 # First mass in kg\r\n    m2 = 1.5 # Second mass in kg\r\n       \r\n    # Calculate force and add it to the list, F\r\n    for dist in r:\r\n        force = G * (m1 * m2) / (dist ** 2)\r\n        F.append(force)\r\n\r\n    draw_graph(r, F)\r\n\r\ngenerate_F_r()</snippet-file></snippet><paragraph/><paragraph><bold>Example 13: Graphing functions - SOHCAHTOA</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\r\nimport matplotlib.pyplot as plt\r\n\r\nDEG_2_RAD = 3.14159 / 180.0 # Constant to convert degrees to radians\r\n\r\n# Draw the graph - takes the x and y sets of data as parameters\r\ndef draw_graph(sinVals, cosVals, angles):\r\n    plt.xlabel('Angle (radians)')\r\n    plt.ylabel('Value')\r\n    plt.plot(angles, sinVals, marker='o') # Plot sin values\r\n    plt.plot(angles, cosVals, marker='x') # Plot cos values    \r\n    plt.savefig('a.png')\r\n\r\ndef generate_F_r():\r\n    angles = range(0, 360, 10)    # Get a list of angles from 0 to 350 degrees in 10 deg increments\r\n    angles = [x * DEG_2_RAD for x in angles] # Convert to radians\r\n    sinVals = []\r\n    cosVals = []   \r\n    \r\n    for a in angles:\r\n        sinVals.append( math.sin(a) )\r\n        cosVals.append( math.cos(a) )\r\n\r\n    draw_graph(sinVals, cosVals, angles)\r\n\r\ngenerate_F_r()</snippet-file></snippet><paragraph/><paragraph><bold>Example 14: Bar Chart - Horizontal</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\ndef create_bar_chart(data, labels):    \r\n    num_bars = len(data) # Number of bars    \r\n    positions = range(1, num_bars+1) # Positions of bars on y-axis\r\n\r\n    # Draw the bar chart (horizontal bars)\r\n    plt.barh(positions, data, align='center')\r\n\r\n    # Add little 'ticks' to verticle bars and some labels &amp; titles\r\n    plt.yticks(positions, labels)\r\n    plt.xlabel('Steps')\r\n    plt.ylabel('Day')\r\n    plt.title('Number of steps walked')\r\n    \r\n    plt.grid() # Add a grid for easier visual estimation of values\r\n    plt.savefig('a.png')\r\n\r\n# Number of steps walked during the past week\r\nsteps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]\r\n    \r\n# Corresponding days\r\nlabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    \r\ncreate_bar_chart(steps, labels)</snippet-file></snippet><paragraph/><paragraph><bold>Example 15: Bar Chart - Vertical</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\ndef create_bar_chart(data, labels):    \r\n    num_bars = len(data) # Number of bars    \r\n    positions = range(1, num_bars+1) # Positions of bars on y-axis\r\n\r\n    # Draw the bar chart (vertical bars)\r\n    plt.bar(positions, data, align='center')\r\n\r\n     # Add little 'ticks' to verticle bars and some labels &amp; titles\r\n    plt.xticks(positions, labels)\r\n    plt.xlabel('Day')\r\n    plt.ylabel('Steps')\r\n    plt.title('Number of steps walked')\r\n    \r\n    plt.grid() # Add a grid for easier visual estimation of values\r\n    plt.savefig('a.png')\r\n\r\n# Number of steps walked during the past week\r\nsteps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]\r\n    \r\n# Corresponding days\r\nlabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    \r\ncreate_bar_chart(steps, labels)\r\n\r\n</snippet-file></snippet><paragraph/><paragraph><bold>Example 16: Histogram</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Generate a normal distribution of 1000 values\r\nx = np.random.normal(size = 1000)\r\n\r\n# Plot a histogram of this data, dividing it up into 30 bins\r\nplt.hist(x, bins = 30)\r\n\r\n# Add a label and show the histogram\r\nplt.ylabel('Probability');\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph/></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 7 - Plotting with Matplotlib",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-07-11T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-07-10T20:20:17.576598+10:00",
      "due_at": "2024-07-18T21:00:00+10:00",
      "effective_available_at": "2024-07-11T19:15:00+10:00",
      "effective_due_at": "2024-07-18T21:00:00+10:00",
      "effective_locked_at": "2024-07-21T21:00:00+10:00",
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 56367,
      "index": 5,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": "2024-07-21T21:00:00+10:00",
      "module_id": 11530,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 53346,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": true,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": true,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 381784,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 381784,
          "original_id": 362148,
          "lesson_id": 56367,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Quiz 5",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-10T20:20:17.576598+10:00",
          "updated_at": null,
          "challenge_id": 126104,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This quiz is worth <bold>4</bold> marks.</paragraph><paragraph/><paragraph><bold>Marking</bold></paragraph><paragraph>  <bold>stairs_in_grid()  4 marks</bold><break/> <bold>--------------------------------------</bold><break/> <bold>Total                     4 marks</bold></paragraph><paragraph/><paragraph><bold>Quiz 5</bold> is due <bold>Week 8 Thursday 18 July 2024 @ 9.00pm (Sydney time)</bold>.</paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 3 days</bold> from the due date, that is, any late submission after <bold>Week 8 Sunday 21 July 2024 @ 9.00pm</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>quiz_5.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>.  It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for Quiz 5.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/sJOdIjwWFKNQha9RWXvqgXsc\" filename=\"quiz_5.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-07-21T23:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Quiz 5",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:43.678313+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53329,
      "index": 18,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47908,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 7,
      "slide_marks_summary": [
        {
          "id": 362064,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 392418,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 392417,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 392419,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362065,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362066,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362067,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362064,
          "original_id": 326205,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Week 9 - Levenshtein distance",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.678313+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/wjTPGf5TucMrzJzcW8upCJsN"
        },
        {
          "id": 392418,
          "original_id": null,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "depart_leopard",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-25T00:49:47.877305+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/JkvGV8EPPG0YzBrzpfIKLFiU"
        },
        {
          "id": 392417,
          "original_id": null,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "paper_pope",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-25T00:49:12.520239+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/KGXTrv3Ao0yCCjDAFvcljIKW"
        },
        {
          "id": 392419,
          "original_id": null,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "PAPER_to_POPE",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-25T00:50:44.846254+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/zdrsAhzJSB2SvVZgtVRNqQ9J"
        },
        {
          "id": 362065,
          "original_id": 326206,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Useful links about Levenshtein distance",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.678313+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><list style=\"number\"><list-item><paragraph>Levenshtein distance<break></break><link href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\">https://en.wikipedia.org/wiki/Levenshtein_distance</link><break></break></paragraph></list-item><list-item><paragraph>Levenshtein Distance, in Three Flavors <link href=\"https://people.cs.pitt.edu/~kirk/cs1501/Pruhs/Spring2006/assignments/editdistance/Levenshtein%20Distance.htm\">https://people.cs.pitt.edu/~kirk/cs1501/Pruhs/Spring2006/assignments/editdistance/Levenshtein%20Distance.htm</link><break></break></paragraph></list-item><list-item><paragraph>Another Python version of Levenshtein distance <link href=\"https://folk.idi.ntnu.no/mlh/hetland_org/coding/python/levenshtein.py\">https://folk.idi.ntnu.no/mlh/hetland_org/coding/python/levenshtein.py</link><break></break></paragraph></list-item><list-item><paragraph>Levenshtein Distance<break></break><link href=\"https://python-course.eu/levenshtein_distance.php\">https://python-course.eu/levenshtein_distance.php</link></paragraph></list-item></list><paragraph></paragraph></document>"
        },
        {
          "id": 362066,
          "original_id": 326207,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Week 9 - Levenshtein distance",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.678313+10:00",
          "updated_at": null,
          "challenge_id": 119362,
          "content": ""
        },
        {
          "id": 362067,
          "original_id": 326208,
          "lesson_id": 53329,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "levenshtein_distance.py",
          "index": 7,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:43.678313+10:00",
          "updated_at": null,
          "challenge_id": 119363,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 9 - Notes 14 Levenshtein Distance",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-07-18T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-07-12T20:21:44.502539+10:00",
      "due_at": "2024-07-25T21:00:00+10:00",
      "effective_available_at": "2024-07-18T19:15:00+10:00",
      "effective_due_at": "2024-07-25T21:00:00+10:00",
      "effective_locked_at": "2024-07-28T21:00:00+10:00",
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 56994,
      "index": null,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": "2024-07-28T21:00:00+10:00",
      "module_id": 11530,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 47924,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": true,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": true,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 384766,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 384766,
          "original_id": 326271,
          "lesson_id": 56994,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Quiz 6",
          "index": 8,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-07-12T20:21:44.502539+10:00",
          "updated_at": null,
          "challenge_id": 127070,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This quiz is worth <bold>4</bold> marks.</paragraph><paragraph/><paragraph><bold>Marking</bold></paragraph><paragraph>  <bold>size_of_largest_parallelogram()  4 marks</bold><break/> <bold>---------------------------------------------------------------</bold><break/> <bold>Total                                                    4 marks</bold></paragraph><paragraph/><paragraph><bold>Quiz 6</bold> is due <bold>Week 9 Thursday 25 July 2024 @ 9.00pm (Sydney time)</bold>.</paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 3 days</bold> from the due date, that is, any late submission after <bold>Week 9 Sunday 28 July 2024 @ 9.00pm</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>quiz_6.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>.  It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for Quiz 6.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/JvUfcwZwudKMqYgHu1eevsO5\" filename=\"quiz_6.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-07-28T23:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Quiz 6",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:44.263266+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53332,
      "index": 21,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47910,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 6,
      "slide_marks_summary": [
        {
          "id": 362075,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362076,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362077,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362078,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362079,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362080,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362075,
          "original_id": 326213,
          "lesson_id": 53332,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "Three special perfect squares",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.263266+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/26FdsMchKehN8QcortH3ph3J"
        },
        {
          "id": 362076,
          "original_id": 326214,
          "lesson_id": 53332,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "Week 10 - Three special perfect squares",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.263266+10:00",
          "updated_at": null,
          "challenge_id": 119366,
          "content": ""
        },
        {
          "id": 362077,
          "original_id": 326215,
          "lesson_id": 53332,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "three_special_perfect_squares_v1.py",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.263266+10:00",
          "updated_at": null,
          "challenge_id": 119367,
          "content": ""
        },
        {
          "id": 362078,
          "original_id": 326216,
          "lesson_id": 53332,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "three_special_perfect_squares_v2.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.263266+10:00",
          "updated_at": null,
          "challenge_id": 119368,
          "content": ""
        },
        {
          "id": 362079,
          "original_id": 326217,
          "lesson_id": 53332,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "three_special_perfect_squares_v3.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.263266+10:00",
          "updated_at": null,
          "challenge_id": 119369,
          "content": ""
        },
        {
          "id": 362080,
          "original_id": 326218,
          "lesson_id": 53332,
          "user_id": 93339,
          "course_id": 16645,
          "type": "video",
          "title": "Three special perfect squares",
          "index": 6,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:44.263266+10:00",
          "updated_at": null,
          "content": "",
          "video_url": "https://youtu.be/rwgxiQoVTfw"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 10 - Notes 16 Three Special Perfect Squares",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-06-11T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-06-11T14:14:43.361316+10:00",
      "due_at": "2024-07-08T10:00:00+10:00",
      "effective_available_at": "2024-06-11T19:15:00+10:00",
      "effective_due_at": "2024-07-08T10:00:00+10:00",
      "effective_locked_at": "2024-07-13T10:00:00+10:00",
      "first_viewed_at": "2025-08-05T10:15:46.555125+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 54712,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 371449,
      "late_submissions": true,
      "locked_at": "2024-07-13T10:00:00+10:00",
      "module_id": 11531,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 53349,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 371449,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 371449,
          "original_id": 362151,
          "lesson_id": 54712,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Assignment 1",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "seen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-11T14:14:43.361316+10:00",
          "updated_at": null,
          "challenge_id": 123135,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF</bold> <bold>file</bold> below and <bold>stubs</bold>.</paragraph><paragraph>This <bold>Assignment 1</bold> is worth <bold>13 marks</bold>.</paragraph><pre>Marking\n\n  Rectangles Boundary  5 marks\n  Moving Die           4 marks\n  Fishing Towns        4 marks\n ----------------------------------------------------------------------\n  Total               13 marks\n</pre><paragraph/><paragraph><bold>Assignment 1</bold> is due <bold>Week 7 Monday 8 July 2024 @ 10:00am (Sydney time)</bold></paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 5 days</bold> from the due date, that is, any late submission after <bold>Week 7 Saturday 13 July 2024 @ 10:00am</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filenames <code><bold>boundary.py</bold></code>, <code><bold>moving_die.py</bold></code>, and <code><bold>fishing_towns.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>. It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for <bold>Assignment 1</bold>.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/Rmuff89IpthrYqoHT1OwxIdv\" filename=\"Assignment_1.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-07-15T16:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Assignment 1",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:42.227261+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53324,
      "index": 13,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": false,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 51419,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution-until-correct",
        "quiz_active_status": "active"
      },
      "slide_count": 2,
      "slide_marks_summary": [
        {
          "id": 374417,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362041,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 374417,
          "original_id": 362023,
          "lesson_id": 53324,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 8 Tuesday To Do List",
          "index": 11,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-25T13:49:03.412308+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 8 Tuesday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Final Exam</bold> scheduled <bold>Wednesday 21 August 2024</bold>. The exact time slot (<bold>morning</bold> or <bold>afternoon</bold>) and <bold>location</bold> will be known closer to the exam date.<break/><break/></paragraph></list-item><list-item><paragraph><bold>Quiz 5</bold> worth <bold>4 marks</bold> is due <bold>Week 8 Thursday @ 9pm</bold><break/><break/></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday @ 10am</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content</heading><list style=\"number\"><list-item><paragraph>Week 8 Notes 10 K-means clustering</paragraph><list style=\"bullet\"><list-item><paragraph><code>namedtuple</code> from collections</paragraph></list-item><list-item><paragraph><code>math.hypot()</code></paragraph></list-item><list-item><paragraph><code>subplot()</code> from <code>matplotlib.pyplot</code> module<break/><break/></paragraph></list-item></list></list-item><list-item><paragraph>Week 8 Notes 11 The Tower and Marbles Puzzle</paragraph><list style=\"bullet\"><list-item><paragraph>The tower and marbles puzzle - n levels and m marbles</paragraph></list-item><list-item><paragraph>Particular Case m = 2</paragraph></list-item><list-item><paragraph><code>random.randint()</code> function</paragraph></list-item><list-item><paragraph><code>dict.fromkeys()</code> method</paragraph></list-item><list-item><paragraph>General case</paragraph></list-item><list-item><paragraph>List comprehension</paragraph></list-item><list-item><paragraph>Nicely display a rectangle - string formatting</paragraph></list-item></list><paragraph/></list-item><list-item><paragraph>Discuss <bold>Assignment 2</bold><break/>Briefly describe <bold>second example</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Quiz 5</bold><break/>Note that what is <bold>recorded</bold> in the <bold>grid</bold> are <bold>not</bold> <bold>only</bold> <bold>0s</bold> and <bold>1s</bold>. Values up to <bold>dim</bold> are recorded.<break/><break/></paragraph></list-item></list><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph><code>math.hypot()</code> Method<break/><link href=\"https://www.w3schools.com/python/ref_math_hypot.asp\">https://www.w3schools.com/python/ref_math_hypot.asp</link><break/><break/></paragraph></list-item><list-item><paragraph><code>subplot()</code> from <code>matplotlib.pyplot</code> module<break/><link href=\"https://www.w3schools.com/python/matplotlib_subplot.asp\">https://www.w3schools.com/python/matplotlib_subplot.asp</link></paragraph></list-item></list></document>"
        },
        {
          "id": 362041,
          "original_id": 349054,
          "lesson_id": 53324,
          "user_id": 93339,
          "course_id": 16645,
          "type": "document",
          "title": "Week 8 Thursday To Do List",
          "index": 12,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.227261+10:00",
          "updated_at": null,
          "content": "<document version=\"2.0\"><heading level=\"2\">Week 8 Thursday To Do List</heading><paragraph/><heading level=\"2\">Admin/Tips</heading><list style=\"number\"><list-item><paragraph><bold>Quiz 6</bold> worth <bold>4 marks</bold> will be released <bold>today @ 7.15pm</bold><break/></paragraph></list-item><list-item><paragraph><bold>Quiz 5</bold> worth <bold>4 marks</bold> is due <bold>today @ 9pm</bold><break/></paragraph></list-item><list-item><paragraph><bold>Assignment 2</bold> worth <bold>13 marks</bold> is due <bold>Week 11 Monday 5/8/24 @ 10am</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Content </heading><list style=\"number\"><list-item><list style=\"bullet\"/></list-item></list><list style=\"number\"><list-item><paragraph><bold>Extra notes</bold> that will <bold>not be discussed</bold> released (see bottom of <bold>Ed Lessons</bold>)<break/><break/></paragraph></list-item><list-item><paragraph>Week 8 Notes 12 The Game of Life</paragraph><list style=\"unordered\"><list-item><paragraph><code>numpy</code> module</paragraph></list-item><list-item><paragraph>Comprehensive List vs Non-Comprehensive List<break/><break/></paragraph></list-item></list></list-item><list-item><paragraph>Solve <bold>Sample Exam Question 1</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Assignment 2</bold><break/><break/></paragraph></list-item><list-item><paragraph>Discuss <bold>Quiz 6</bold></paragraph></list-item></list><paragraph/><heading level=\"2\">Useful Links</heading><list style=\"number\"><list-item><paragraph>Using 2D arrays/lists the right way in Python<break/><link href=\"https://www.geeksforgeeks.org/python-using-2d-arrays-lists-the-right-way/\">https://www.geeksforgeeks.org/python-using-2d-arrays-lists-the-right-way/</link><break/><break/></paragraph></list-item><list-item><paragraph>NumPy Tutorial<break/><link href=\"https://www.w3schools.com/python/numpy/default.asp\">https://www.w3schools.com/python/numpy/default.asp</link><break/><break/></paragraph></list-item></list></document>"
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 8 - Overview",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": null,
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-05-27T01:25:42.264296+10:00",
      "due_at": null,
      "effective_available_at": null,
      "effective_due_at": null,
      "effective_locked_at": null,
      "first_viewed_at": "2025-09-18T14:41:11.567836+10:00",
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 53325,
      "index": 14,
      "inverse_regex": false,
      "is_hidden": false,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": 362043,
      "late_submissions": true,
      "locked_at": null,
      "module_id": 11528,
      "number": -1,
      "openable": false,
      "openable_without_attempt": false,
      "original_id": 47902,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": false,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "multiple-attempts",
        "quiz_active_status": "active"
      },
      "slide_count": 4,
      "slide_marks_summary": [
        {
          "id": 362043,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362044,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362045,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        },
        {
          "id": 362046,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 362043,
          "original_id": 326169,
          "lesson_id": 53325,
          "user_id": 93339,
          "course_id": 16645,
          "type": "pdf",
          "title": "The tower and marbles puzzle",
          "index": 2,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "completed",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.264296+10:00",
          "updated_at": null,
          "content": "",
          "file_url": "https://static.edusercontent.com/files/eLUXSJ9OLDYhpV88ZRFtCDkd"
        },
        {
          "id": 362044,
          "original_id": 326170,
          "lesson_id": 53325,
          "user_id": 93339,
          "course_id": 16645,
          "type": "jupyter",
          "title": "The tower and marbles puzzle",
          "index": 3,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.264296+10:00",
          "updated_at": null,
          "challenge_id": 119351,
          "content": ""
        },
        {
          "id": 362045,
          "original_id": 326171,
          "lesson_id": 53325,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "tower_and_2_marbles.py",
          "index": 4,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.264296+10:00",
          "updated_at": null,
          "challenge_id": 119352,
          "content": ""
        },
        {
          "id": 362046,
          "original_id": 326172,
          "lesson_id": 53325,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "tower_and_m_marbles.py",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-05-27T01:25:42.264296+10:00",
          "updated_at": null,
          "challenge_id": 119353,
          "content": ""
        }
      ],
      "solutions_at": null,
      "state": "active",
      "status": "attempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Week 8 - Notes 11 The Tower and Marbles Puzzle",
      "tutorial_regex": "",
      "type": "general",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-06-13T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-06-13T13:23:17.039281+10:00",
      "due_at": "2024-06-20T21:00:00+10:00",
      "effective_available_at": "2024-06-13T19:15:00+10:00",
      "effective_due_at": "2024-06-20T21:00:00+10:00",
      "effective_locked_at": "2024-06-23T21:00:00+10:00",
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 54805,
      "index": 2,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": "2024-06-23T21:00:00+10:00",
      "module_id": 11530,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 53344,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": true,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": true,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 371850,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 371850,
          "original_id": 362146,
          "lesson_id": 54805,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Quiz 2",
          "index": 5,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-13T13:23:17.039281+10:00",
          "updated_at": null,
          "challenge_id": 123224,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This quiz is worth <bold>4</bold> marks.</paragraph><paragraph/><paragraph><bold>Marking</bold><break/><break/>  <bold>remove_values_no_greater_than_index()  1.25 marks</bold><break/>  <bold>cap_sum_to()                                                      1.25 marks</bold><break/>  <bold>increasing_sequence_from()                          1.50 marks</bold><break/> <bold>-----------------------------------------------------------------------------------</bold><break/>  <bold>Total                                                                      4.00 marks</bold></paragraph><paragraph/><paragraph><bold>Quiz 2</bold> is due <bold>Week 4 Thursday 20 June 2024 @ 9.00pm (Sydney time)</bold>.</paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 3 days</bold> from the due date, that is, any late submission after <bold>Week 4 Sunday 23 June 2024 @ 9pm</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>quiz_2.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>.  It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for Quiz 2.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/z8OddIv0ZwO49fm31fI8uTIk\" filename=\"quiz_2.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-06-24T12:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Quiz 2",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    },
    {
      "attempt_id": null,
      "attempted_at": null,
      "attempts": null,
      "attempts_remaining": null,
      "available_at": "2024-06-06T19:15:00+10:00",
      "clean_attempts": false,
      "course_id": 16645,
      "created_at": "2024-06-05T18:03:53.870343+10:00",
      "due_at": "2024-06-13T21:00:00+10:00",
      "effective_available_at": "2024-06-06T19:15:00+10:00",
      "effective_due_at": "2024-06-13T21:00:00+10:00",
      "effective_locked_at": "2024-06-16T21:00:00+10:00",
      "first_viewed_at": null,
      "grade_passback_auto_send": false,
      "grade_passback_mode": "",
      "grade_passback_scale_to": null,
      "id": 54434,
      "index": 1,
      "inverse_regex": false,
      "is_hidden": true,
      "is_timed": false,
      "is_unlisted": false,
      "kind": "content",
      "last_viewed_slide_id": null,
      "late_submissions": true,
      "locked_at": "2024-06-16T21:00:00+10:00",
      "module_id": 11530,
      "number": -1,
      "openable": true,
      "openable_without_attempt": false,
      "original_id": 47921,
      "outline": "",
      "password": "",
      "password_one_time": false,
      "prerequisites": [],
      "release_challenge_solutions": true,
      "release_challenge_solutions_while_active": false,
      "release_feedback": false,
      "release_feedback_while_active": false,
      "release_quiz_correctness_only": false,
      "release_quiz_solutions": false,
      "reopen_submissions": false,
      "require_user_override": false,
      "settings": {
        "quiz_question_number_style": "",
        "quiz_mode": "hide-solution",
        "quiz_active_status": "active"
      },
      "slide_count": 1,
      "slide_marks_summary": [
        {
          "id": 369530,
          "is_hidden": false,
          "rubric_points": 0,
          "auto_points": 0,
          "scoring_mode": "",
          "scale_to": null,
          "scale_to_auto": null,
          "scale_to_rubric": null
        }
      ],
      "slides": [
        {
          "id": 369530,
          "original_id": 326268,
          "lesson_id": 54434,
          "user_id": 93339,
          "course_id": 16645,
          "type": "code",
          "title": "Quiz 1",
          "index": 1,
          "is_hidden": false,
          "lesson_markable_id": null,
          "rubric_id": null,
          "rubric_points": null,
          "auto_points": null,
          "status": "unseen",
          "correct": null,
          "response": null,
          "created_at": "2024-06-05T18:03:53.870343+10:00",
          "updated_at": null,
          "challenge_id": 122399,
          "content": "<document version=\"2.0\"><paragraph>See <bold>PDF file</bold> below and <bold>stub</bold>.</paragraph><paragraph>This quiz is worth <bold>4 marks</bold>.</paragraph><paragraph/><paragraph><bold>Marking</bold></paragraph><paragraph>  <bold>Absolute Difference   1.0 mark</bold><break/>  <bold>Horizontal Bars           1.5 marks</bold><break/>  <bold>Vertical Bars                1.5 marks<break/>  ------------------------------------------------<break/>  Total                               4.0 marks</bold></paragraph><paragraph/><paragraph><bold>Quiz 1</bold> is due <bold>Week 3 Thursday 13 June 2024 @ 9.00pm (Sydney time)</bold>.</paragraph><paragraph>Please note that <bold>late</bold> submission with <bold>5% penalty per day</bold> is allowed <bold>up to 3 days</bold> from the due date, that is, any late submission after <bold>Week 3 Sunday 16 June 2024 @ 9.00pm</bold> will be discarded.</paragraph><paragraph>Please make sure not to change the filename <code><bold>quiz_1.py</bold></code> while submitting by clicking on <bold>[Mark]</bold> button in <bold>Ed</bold>.  It is your responsibility to check that your submission did go through properly using <bold>Submissions</bold> link in Ed otherwise your mark will be <bold>zero</bold> for Quiz 1.</paragraph><paragraph/><file url=\"https://static.au.edusercontent.com/files/nNgaCRx0OnNSsL8UTOolmPca\" filename=\"quiz_1.pdf\"/></document>"
        }
      ],
      "solutions_at": "2024-06-18T01:00:00+10:00",
      "state": "scheduled",
      "status": "unattempted",
      "submitted_at": null,
      "timer_duration": 60,
      "timer_effective_duration": 60,
      "timer_expiration_access": false,
      "title": "Quiz 1",
      "tutorial_regex": "",
      "type": "python",
      "updated_at": null,
      "user_id": 93339
    }
  ]
}