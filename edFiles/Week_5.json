{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:48.176957+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53337,
  "index": 4,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11529,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47915,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": true,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 8,
  "slide_marks_summary": [
    {
      "id": 372911,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362119,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 373641,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362120,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 3,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362121,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 3,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362122,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362123,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 370980,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 372911,
      "original_id": 362112,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 1: Fibonacci maker",
      "index": 2,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-15T12:20:13.745042+10:00",
      "updated_at": null,
      "challenge_id": 123408,
      "content": "<document version=\"2.0\"><paragraph>Recall the Fibonacci numbers from practice exercise <bold>Week 3 Exercise 3: Fibonacci lister</bold>:</paragraph><paragraph>0, 1, 1, 2, 3, 5, 8, 13, ...</paragraph><paragraph>Write a program that returns a requested Fibonacci number, this time using a <bold>recursive function</bold>.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>Which Fibonacci number would you like? 1\nIt is 0.</pre><pre>Which Fibonacci number would you like? 8\nIt is 13.</pre><pre>Which Fibonacci number would you like? 12\nIt is 89.</pre></document>"
    },
    {
      "id": 362119,
      "original_id": 342269,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 2: Prime factoriser",
      "index": 3,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.176957+10:00",
      "updated_at": null,
      "challenge_id": 119407,
      "content": "<document version=\"2.0\"><paragraph>Write a program that asks the user for a number and then factorises the number into primes.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>Enter a number: 345\n345 = 3 x 5 x 23\n</pre><pre>Enter a number: 612\n612 = 2 x 2 x 3 x 3 x 17</pre><pre>Enter a number: 127\n127 = 127</pre></document>"
    },
    {
      "id": 373641,
      "original_id": 362126,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 3: Longest sequence of consecutive letters",
      "index": 4,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-21T11:32:29.374431+10:00",
      "updated_at": null,
      "challenge_id": 123653,
      "content": "<document version=\"2.0\"><paragraph>Write a program <bold><code>longest_sequence.py</code></bold> that prompts the user for a string <bold>w</bold> of lowercase letters and outputs the longest sequence of consecutive letters that occur in <bold>w</bold>, but with possibly other letters in between, starting as close as possible to the beginning of <bold>w</bold>.</paragraph><paragraph>Insert your code into <code><bold>longest_sequence.py</bold></code>.</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold><code>longest_sequence_scaffold.py</code></bold>.</paragraph><paragraph><bold>Examples:</bold></paragraph><pre>Please input a string of lowercase letters: a\nThe solution is: a\n</pre><pre>Please input a string of lowercase letters: abcefgh\nThe solution is: efgh\n</pre><pre>Please input a string of lowercase letters: abcefg\nThe solution is: abc\n</pre><pre>Please input a string of lowercase letters: ablccmdnneofffpg\nThe solution is: abcdefg\n</pre><pre>Please input a string of lowercase letters: abcdiivjwkaalbmmbz\nThe solution is: ijklm\n</pre><pre>Please input a string of lowercase letters: abcpqrstuvwxbcbcddddeffghijklrst\nThe solution is: abcdefghijkl\n</pre><paragraph/><paragraph/></document>"
    },
    {
      "id": 362120,
      "original_id": 326242,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 4: A triangle of characters",
      "index": 5,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.176957+10:00",
      "updated_at": null,
      "challenge_id": 119408,
      "content": "<document version=\"2.0\"><paragraph>Write a program <bold><code>characters_triangle.py</code></bold> that gets a strictly positive integer <bold>N</bold> as input and outputs a</paragraph><paragraph>triangle of height <bold>N</bold>. For instance, when <bold>N = 5</bold>, the triangle looks like this:</paragraph><figure><image src=\"https://static.edusercontent.com/files/8Qq6hZXLTMIgUbtFDotik30R\" width=\"109\" height=\"116\"/></figure><paragraph>Two built-in functions are useful for this exercise:</paragraph><list style=\"bullet\"><list-item><paragraph><bold><code>ord()</code></bold> returns the integer that encodes the character provided as argument;</paragraph></list-item><list-item><paragraph><bold><code>chr()</code></bold> returns the character encoded by the integer provided as argument.</paragraph></list-item></list><paragraph>For instance:</paragraph><pre>&gt;&gt;&gt; ord('A')\n65\n\n&gt;&gt;&gt; chr(65)\n'A'\n</pre><paragraph>Consecutive uppercase letters are encoded by consecutive integers. For instance:</paragraph><pre>&gt;&gt;&gt; ord('A'), ord('B'), ord('C')\n(65, 66, 67)\n</pre><paragraph>Insert your code into <bold><code>characters_triangle.py</code></bold>. If you are stuck, but only when you are stuck, then use <bold><code>characters_triangle_scaffold_1.py</code></bold>.</paragraph></document>"
    },
    {
      "id": 362121,
      "original_id": 326243,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 5: Pascal triangle",
      "index": 6,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.176957+10:00",
      "updated_at": null,
      "challenge_id": 119409,
      "content": "<document version=\"2.0\"><paragraph>Write a program <code><bold>pascal_triangle.py</bold></code> that prompts the user for a number <bold>N</bold> and prints out the first <bold>N + 1</bold> lines of Pascal triangle, making sure the numbers are nicely aligned, as illustrated below for N = <bold>3</bold>, <bold>7</bold> and <bold>11</bold> respectively:</paragraph><figure><image src=\"https://static.edusercontent.com/files/EUdbRG48kueRTKrIdx46dggR\" width=\"82\" height=\"85\"/></figure><figure><image src=\"https://static.edusercontent.com/files/7Q5kkEH7exZ4x2ce7ZQk70Sh\" width=\"239\" height=\"146\"/></figure><figure><image src=\"https://static.edusercontent.com/files/b8yO6RAcBJ8NbpeA6t0UebCF\" width=\"455\" height=\"189\"/></figure><paragraph>Insert your code into <bold><code>pascal_triangle.py</code></bold></paragraph><paragraph>If you are stuck, but only when you are stuck, then use <bold><code>pascal_triangle_scaffold_1.py</code></bold>.</paragraph></document>"
    },
    {
      "id": 362122,
      "original_id": 326244,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 6: Hasse diagrams",
      "index": 7,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.176957+10:00",
      "updated_at": null,
      "challenge_id": 119410,
      "content": "<document version=\"2.0\"><paragraph>Let a strictly positive integer <bold>n</bold> be given. Let <bold>D</bold> be the set of divisors of <bold>n</bold>. Let <bold>k</bold> be the number of prime divisors of <bold>n</bold> (that is, the number of prime numbers in <bold>D</bold>). The members of <bold>D</bold> can be arranged as the vertices of a solid in a <bold>k</bold>-dimensional space as illustrated below for <bold>n = 12</bold> (in which case <bold>D = {1,2,3,4,6,12}</bold> and <bold>k = 2</bold>) and for <bold>n = 30</bold> (in which case <bold>D = {1,2,3,5,6,10,15,30}</bold> and <bold>k = 3</bold>).<break/></paragraph><list style=\"bullet\"><list-item><paragraph>Each of the solids' vertices is associated with two collections of nodes: those \"directly below'' it, and those \"directly above'' it. In particular, the prime divisors of <bold>n</bold> are \"directly above'' <bold>1</bold>, and no vertex is below <bold>1</bold>; <bold>n</bold> has exactly <bold>k</bold> vertices \"directly below'' it, and no vertex is above <bold>n</bold>. This suggests considering a dictionary whose keys are the members of <bold>D</bold> (inserted from smallest to largest), and as value for a given key <bold>d</bold>, the pair of ordered lists of members of <bold>D</bold> \"directly below'' <bold>d</bold> and \"directly above'' <bold>d</bold>, respectively.<break/></paragraph></list-item><list-item><paragraph>The solids exhibit <bold>k</bold> distinct \"edge directions'', one for each prime divisor of <bold>n</bold>, defining a partition of the solids' edges. One can represent this partition as a dictionary whose keys are the prime divisors of <bold>n</bold> (inserted from smallest to largest), and as value for a given key <bold>p</bold>, the ordered list of ordered pairs of members of <bold>D</bold> that make up the endpoints of the edges whose \"direction'' is associated with <bold>p</bold>.</paragraph></list-item></list><figure><image src=\"https://static.edusercontent.com/files/fUYHVADq6615ENRYgQ5GK9rU\" width=\"313\" height=\"536\"/></figure><paragraph>The program <bold><code>hasse_diagram.py</code></bold> defines a function <code><bold>make_hasse_diagram()</bold></code> that returns a named tuple <code><bold>HasseDiagram</bold></code> with three attributes:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>factors</bold>, for a dictionary whose keys are the members of <bold>D</bold>, and as value for a given key <bold>d</bold> (<bold>1</bold> excepted), a string that represents the prime decomposition of <bold>d</bold>, using <bold>x</bold> for multiplication and <bold>^</bold> for exponentiation, displaying only exponents greater than <bold>1</bold>;<break/></paragraph></list-item><list-item><paragraph><bold>vertices</bold>, for the first dictionary previously defined;<break/></paragraph></list-item><list-item><paragraph><bold>edges</bold>, for the second dictionary previously defined.</paragraph></list-item></list><paragraph>Replace <code><bold>pass</bold></code> in <bold><code>hasse_diagram.py</code></bold> with your code.</paragraph><paragraph>Except for <bold><code>namedtuple</code></bold>, <code><bold>hasse_diagram.py</bold></code> imports a number of classes and functions from various modules that are used in the solution, but that other good solutions will make no use of.</paragraph></document>"
    },
    {
      "id": 362123,
      "original_id": 326245,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 7: Encoding pairs of integers as natural numbers",
      "index": 8,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.176957+10:00",
      "updated_at": null,
      "challenge_id": 119411,
      "content": "<document version=\"2.0\"><paragraph>Complete the program <bold><code>plane_encoding.py</code></bold> that implements a function <bold><code>encode(a, b)</code></bold> and a function <bold><code>decode(n)</code></bold> for the one-to-one mapping from the set of pairs of integers onto the set of natural numbers, that can be graphically described as follows:</paragraph><figure><image src=\"https://static.edusercontent.com/files/CTWCWzFQVwBxVwG7oTFHmJxo\" width=\"207\" height=\"200\"/></figure><paragraph>That is, starting from the point <code>(0, 0)</code> of the plane, we move to <code>(1, 0)</code> and then spiral counterclockwise:</paragraph><list style=\"bullet\"><list-item><paragraph><code>encode(0,0)</code> returns <code>0</code> and <code>decode(0)</code> returns <code>(0,0)</code></paragraph></list-item><list-item><paragraph><code>encode(1,0)</code> returns <code>1</code> and <code>decode(1)</code> returns <code>(1,0)</code></paragraph></list-item><list-item><paragraph><code>encode(1,1)</code> returns <code>2</code> and <code>decode(2)</code> returns <code>(1,1)</code></paragraph></list-item><list-item><paragraph><code>encode(0,1)</code> returns <code>3</code> and <code>decode(3)</code> returns <code>(0,1)</code></paragraph></list-item><list-item><paragraph><code>encode(-1,1)</code> returns <code>4</code> and <code>decode(4)</code> returns <code>(-1,1)</code></paragraph></list-item><list-item><paragraph><code>encode(-1,0)</code> returns <code>5</code> and <code>decode(5)</code> returns <code>(-1,0)</code></paragraph></list-item><list-item><paragraph><code>encode(-1,-1)</code> returns <code>6</code> and <code>decode(6)</code> returns <code>(-1,-1)</code></paragraph></list-item><list-item><paragraph><code>encode(0,-1)</code> returns <code>7</code> and <code>decode(7)</code> returns <code>(0,-1)</code></paragraph></list-item><list-item><paragraph><code>encode(1,-1)</code> returns <code>8</code> and <code>decode(8)</code> returns <code>(1,-1)</code></paragraph></list-item><list-item><paragraph><code>encode(2,-1)</code> returns <code>9</code> and <code>decode(9)</code> returns <code>(2,-1)</code><break/> . . . </paragraph></list-item></list></document>"
    },
    {
      "id": 370980,
      "original_id": 362109,
      "lesson_id": 53337,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 8: Decoding a multiplication",
      "index": 103,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-10T11:48:10.371961+10:00",
      "updated_at": null,
      "challenge_id": 122966,
      "content": "<document version=\"2.0\"><paragraph>We want to decode all multiplications of the form</paragraph><figure><image src=\"https://static.edusercontent.com/files/VZ2185U4AJPBVhgfQt88nAqg\" width=\"144\" height=\"144\"/></figure><paragraph>such that the sum of all digits in all 4 columns is constant.</paragraph><paragraph>Insert your code into <bold>decoded_multiplication.py</bold>. There are actually two solutions, see expected output for details on what it should be. If you are stuck, but only when you are stuck, then use <bold>decoded_multiplication_scaffold.py</bold>.</paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 5",
  "tutorial_regex": "",
  "type": "python",
  "updated_at": null,
  "user_id": 93339
}