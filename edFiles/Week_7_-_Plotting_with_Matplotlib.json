{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-07-09T16:26:31.17487+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": "2025-09-25T11:16:07.37238+10:00",
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 56296,
  "index": 12,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": 381285,
  "late_submissions": false,
  "locked_at": null,
  "module_id": 11528,
  "number": -1,
  "openable": false,
  "openable_without_attempt": true,
  "original_id": null,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": false,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "hide-solution-until-correct",
    "quiz_active_status": "active"
  },
  "slide_count": 3,
  "slide_marks_summary": [
    {
      "id": 381285,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 381287,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 381289,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 381285,
      "original_id": 328687,
      "lesson_id": 56296,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "The Matplotlib family",
      "index": 19,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "completed",
      "correct": null,
      "response": null,
      "created_at": "2024-07-09T16:50:54.747431+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>We will be looking at how to visualise data using <bold>Matplotlib</bold>, a powerful Python plotting library with which you can quickly generate plots of your data. It is inspired by <bold>Matlab</bold>, and many of its objects are similarly named. Hence, if you are familiar with Matlab then you should feel at home using Matplotlib.</paragraph><paragraph>Matplotlib provides a module called <bold>pyplot</bold> as a convenient way to access the Matplotlib functionality, and it is actually with pyplot that we do the plotting.</paragraph><paragraph/><heading level=\"2\">Plotting with pyplot</heading><paragraph>To use pyplot you must import it. Note that pyplot is part of the Matplotlib library, but since it is the only part of Matplotlib that we will be using we can use a more targeted import. It is standard to use the alias <code>plt</code> for the pyplot object:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt</snippet-file></snippet><paragraph/><heading level=\"2\">Plotting with pyplot via pandas</heading><paragraph>Working directly with pyplot can be a bit laborious. Pandas provides its own <code>plot()</code> function as a method of series and data frames, which automatically performs many of the common tasks involved in using pyplot.</paragraph><paragraph>Because the <code>plot()</code> method is part of pandas, you do not need to import anything other than pandas to use it. It is standard to use the alias <code>pd</code>:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import pandas as pd</snippet-file></snippet><paragraph/><heading level=\"2\">Plotting with pyplot via seaborn</heading><paragraph>Although pandas' <code>plot()</code> method simplifies the process of plotting with Matplotlib, there are some ways in which it is still limited. <bold>Seaborn</bold> is a library that is designed to further simplify the task of using pyplot. It is not part of pandas, but it is designed to work well with pandas. It is particularly good for working with categorical (i.e., non-numerical) data.</paragraph><paragraph>To use seaborn you must import it. It is standard to use the alias <code>sns</code>:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import seaborn as sns</snippet-file></snippet><paragraph>Seaborn has some very nice plotting styles. You can set a style by calling seaborn's <code>set()</code> function, and if you do not specify which style you would like then seaborn will just set its default style:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">import seaborn as sns\nsns.set()</snippet-file></snippet><paragraph>Keep in mind that calling <code>set()</code> will affect the style of all matplotlib plots, not just those you create using seaborn.</paragraph><paragraph>The seaborn website has an excellent <link href=\"https://seaborn.pydata.org/examples/index.html\">example gallery</link> of plots, with the code that is used to produce them.</paragraph></document>"
    },
    {
      "id": 381287,
      "original_id": 328689,
      "lesson_id": 56296,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Working directly with pyplot",
      "index": 22,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-07-09T16:50:54.789073+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Although it is easier to do plotting with pandas and seaborn, we will go through some basic plotting directly with pyplot. This will give you a better understanding of what is going on behind the scenes when you plot with pandas and seaborn.</paragraph><paragraph/><heading level=\"2\">An example</heading><paragraph>Suppose you have the following (fictitious) data about quarterly unemployment rates for NSW and VIC, loaded into a Python dictionary:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">data = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}</snippet-file></snippet><paragraph>The following program uses pyplot to create line plots of these quarterly figures, one line for each state.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\n\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\n# Create a new figure and call it 'fig'\nfig = plt.figure()\n\n# Add an axes to the figure and call it 'ax'\nax = fig.add_subplot()\n\n# Add a line plot to ax\n# Use the quarters as the x-values and the NSW percentages as the y-values\nax.plot(data['NSW'].keys(), data['NSW'].values())\n\n# Add a line plot to ax\n# This time use the VIC percentages as the y-values\nax.plot(data['VIC'].keys(), data['VIC'].values())\n\n# Save the figure\n# This step is necessary for getting the plot to show here in Ed\nfig.savefig('plot.png')</snippet-file></snippet><callout type=\"info\">To get a plot to show here in Ed, you must save it using <code>fig.savefig()</code>. You can name the plot whatever you want.</callout><paragraph/><heading level=\"2\">Adding some features</heading><paragraph>It would be better if we added a figure title, some line labels and a legend, and some axis labels:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\n\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\nfig = plt.figure()\n\n# Add a figure title\nfig.suptitle('Unemployment Rates')\n\nax = fig.add_subplot()\n\n# Specify labels this time\nax.plot(data['NSW'].keys(), data['NSW'].values(), label='NSW')\nax.plot(data['VIC'].keys(), data['VIC'].values(), label='VIC')\n\n# Show a legend\nax.legend()\n\n# Specify axis labels \nax.set_xlabel('Quarter')\nax.set_ylabel('Unemployment (%)')\n\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/><heading level=\"2\">Using multiple axes</heading><paragraph>In the figure above, both line plots were drawn on the same axes. You can draw them on separate axes instead, by adding two axes to the figure and specifying how they should be laid out.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\nfig = plt.figure()\nfig.suptitle('Unemployment Rates')\n\n# Add an axes. It's the first axes of a 1 x 2 grid of axes.\nax1 = fig.add_subplot(1, 2, 1)\n\n# No need for a label this time\nax1.plot(data['NSW'].keys(), data['NSW'].values())\n\n# Specify a title for the axes, and labels for the x- and y-axis\nax1.set_title('NSW')\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Unemployment (%)')\n\n# Add an axes. It's the second axes of a 1 x 2 grid of axes.\nax2 = fig.add_subplot(1, 2, 2)\n\n# No need for a label this time\nax2.plot(data['VIC'].keys(), data['VIC'].values())\n\n# Specify a title for the axes, and labels for the x- and y-axis\nax2.set_title('VIC')\nax2.set_xlabel('Quarter')\nax2.set_ylabel('Unemployment (%)')\n\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/><heading level=\"2\">Some finishing touches</heading><paragraph>Let us add a few finishing touches:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\ndata = {\n    'NSW': {'Q1': 3.2, 'Q2': 3.4, 'Q3': 3.4, 'Q4': 3.6},\n    'VIC': {'Q1': 3.5, 'Q2': 3.4, 'Q3': 3.0, 'Q4': 3.1},\n}\n\n# Set the size to be 10 inches wide by 8 inches tall\nfig = plt.figure(figsize=[10, 8])\n\nfig.suptitle('Unemployment Rates')\nax1 = fig.add_subplot(1, 2, 1)\nax1.plot(data['NSW'].keys(), data['NSW'].values())\nax1.set_title('NSW')\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Unemployment (%)')\n\n# Set the y-axis values to go from 3 to 4\nax1.set_ylim(3, 4)\n\n# Set the y-axis ticks to be 3.0, 3.1, 3.2, ..., 4.0 \nax1.set_yticks([x/10 for x in range(30, 41)])\n\n# Show gridlines on the axes\nax1.grid()\n\n# Tell ax2 to share its y-axis with ax1\nax2 = fig.add_subplot(1, 2, 2, sharey=ax1)\n\n# Specify the colour of the line\nax2.plot(data['VIC'].keys(), data['VIC'].values(), color='green')\n\nax2.set_title('VIC')\nax2.set_xlabel('Quarter')\n\n# Show gridlines on the axes\nax2.grid()\n\n# Create a bit more space around the axes, to stop overlap\nfig.tight_layout()\n\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/><heading level=\"2\">One more example</heading><paragraph>The figure that was used in the previous slide, to illustrate plotting terminology, was created using pyplot. Here's the code for it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8))\nfig.suptitle('A figure with three axes')\n\nax = fig.add_subplot(2, 2, 1)\nax.bar([1,2,3,4], [1,3,1,4])\nax.set_title('An axes with bar plot')\nax.set_xlabel('x-axis, with major ticks')\nax.set_ylabel('y-axis, with major ticks')\n\nax = fig.add_subplot(2, 2, 2)\nax.scatter([1,2,3,4], [2,4,1,2])\nax.set_title('An axes with scatter plot and grid')\nax.set_xlabel('x-axis, with major ticks')\nax.set_ylabel('y-axis, with major ticks')\nax.set_xlim(0,5)\nax.set_ylim(0,5)\nax.grid()\n\nax = fig.add_subplot(2, 1, 2)\nax.plot([1,2,3,4], [1,3,2,4], label='Line 1')\nax.plot([1,2,3,4], [2,1,4,3], label='Line 2')\nax.set_title('An axes with line plot')\nax.set_xlabel('x-axis, with major and minor ticks')\nax.set_ylabel('y-axis, with major and minor ticks')\nax.minorticks_on()\nax.legend(title='Legend')\n\nfig.tight_layout()\nfig.savefig('plot.png')</snippet-file></snippet><paragraph/></document>"
    },
    {
      "id": 381289,
      "original_id": null,
      "lesson_id": 56296,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "More plots examples using pyplot",
      "index": 74,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-07-09T17:15:17.845497+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph><bold>Example 1: Simple plot</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\n\nx_numbers = [1, 6, 3]\ny_numbers = [2, 4, 6]\n\nplt.plot(x_numbers, y_numbers)\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 2: Adding a marker</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nx_numbers = [1, 6, 3]\r\ny_numbers = [2, 4, 6]\r\n\r\nplt.plot(x_numbers, y_numbers, '+')\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 3: Changing the marker</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nx_numbers = [1, 6, 3]\r\ny_numbers = [2, 4, 6]\r\n\r\nplt.plot(x_numbers, y_numbers, marker='*')\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 4: Annual temperatures in NYC</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nplt.plot(nyc_temp, marker='o')\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 5: Annual temperatures in NYC with years</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nyears = range(2000, 2013)\r\n\r\nplt.plot(years, nyc_temp, marker='o')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 6: Comparing multiple datasets</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# New York City temperatures (farenheight)\r\ntemp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\r\ntemp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\r\ntemp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\r\n\r\nmonths = range(1, 13)\r\n\r\nplt.plot(months, temp_2000, months, temp_2006, months, temp_2012)\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 7: Multiple datasets with legends</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# New York City temperatures (farenheight)\r\ntemp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\r\ntemp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\r\ntemp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\r\n\r\nmonths = range(1, 13)\r\n\r\nplt.plot(months, temp_2000, months, temp_2006, months, temp_2012) \r\n\r\nplt.legend([2000, 2006, 2012])\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 8: Adding a title and labels</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# New York City temperatures (farenheight)\r\ntemp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\r\ntemp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\r\ntemp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\r\n\r\nmonths = range(1, 13)\r\n\r\nplt.plot(months, temp_2000, months, temp_2006, months, temp_2012) \r\n\r\nplt.legend([2000, 2006, 2012])\r\nplt.title('Average monthly temperature in NYC')\r\nplt.xlabel('Month')\r\nplt.ylabel('Temperature (F)')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 9: Adjusting axes ranges</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nplt.plot(nyc_temp, marker='o')\r\n\r\nprint(f'Original axes ranges {plt.axis()}') # Display existing axis values (auto-generated)\r\n\r\nnewAxisRange = [0, 12, 53.4, 57.3]\r\nplt.axis(newAxisRange)\r\n\r\nprint(f'updated axes ranges {plt.axis()}')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 10: Adjusting axes ranges version 2</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\nnyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\r\n\r\nplt.plot(nyc_temp, marker='o')\r\n\r\nprint(f'Original axes {plt.axis()}') # Display existing axis values (auto-generated)\r\n\r\nplt.axis(ymin = 50) # Set minimum of y-axis to zero\r\nplt.axis(ymax = 60) # Set maximum of y-axis\r\n\r\nprint(f'updated axes ranges {plt.axis()}')\r\n\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph><bold>Example 11: Plot 1 revisited</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\ndef create_graph():\r\n    x_numbers = [1, 6, 3]\r\n    y_numbers = [2, 4, 6]\r\n\r\n    plt.plot(x_numbers, y_numbers)\r\n    plt.savefig('a.png')\r\n\r\n\r\nif __name__ == '__main__':\r\n    create_graph()</snippet-file></snippet><paragraph/><paragraph><bold>Example 12: Graphing functions - Gravity</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\n# Draw the graph - takes the x and y sets of data as parameters\r\ndef draw_graph(x, y):\r\n    plt.plot(x, y, marker='o')\r\n    plt.xlabel('Distance (metres)') \r\n    plt.ylabel('Gravitational force (newtons)')\r\n    plt.title('Gravitational force and distance')\r\n    plt.savefig('a.png')\r\n\r\ndef generate_F_r():\r\n    r = range(100, 1001, 50) # Set from 100 to 1000 in steps of 50\r\n    F = [] # Empty set ready to fill with values\r\n    G = 6.674 * (10**-11) # Gravitational constant\r\n    m1 = 0.5 # First mass in kg\r\n    m2 = 1.5 # Second mass in kg\r\n       \r\n    # Calculate force and add it to the list, F\r\n    for dist in r:\r\n        force = G * (m1 * m2) / (dist ** 2)\r\n        F.append(force)\r\n\r\n    draw_graph(r, F)\r\n\r\ngenerate_F_r()</snippet-file></snippet><paragraph/><paragraph><bold>Example 13: Graphing functions - SOHCAHTOA</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\r\nimport matplotlib.pyplot as plt\r\n\r\nDEG_2_RAD = 3.14159 / 180.0 # Constant to convert degrees to radians\r\n\r\n# Draw the graph - takes the x and y sets of data as parameters\r\ndef draw_graph(sinVals, cosVals, angles):\r\n    plt.xlabel('Angle (radians)')\r\n    plt.ylabel('Value')\r\n    plt.plot(angles, sinVals, marker='o') # Plot sin values\r\n    plt.plot(angles, cosVals, marker='x') # Plot cos values    \r\n    plt.savefig('a.png')\r\n\r\ndef generate_F_r():\r\n    angles = range(0, 360, 10)    # Get a list of angles from 0 to 350 degrees in 10 deg increments\r\n    angles = [x * DEG_2_RAD for x in angles] # Convert to radians\r\n    sinVals = []\r\n    cosVals = []   \r\n    \r\n    for a in angles:\r\n        sinVals.append( math.sin(a) )\r\n        cosVals.append( math.cos(a) )\r\n\r\n    draw_graph(sinVals, cosVals, angles)\r\n\r\ngenerate_F_r()</snippet-file></snippet><paragraph/><paragraph><bold>Example 14: Bar Chart - Horizontal</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\ndef create_bar_chart(data, labels):    \r\n    num_bars = len(data) # Number of bars    \r\n    positions = range(1, num_bars+1) # Positions of bars on y-axis\r\n\r\n    # Draw the bar chart (horizontal bars)\r\n    plt.barh(positions, data, align='center')\r\n\r\n    # Add little 'ticks' to verticle bars and some labels &amp; titles\r\n    plt.yticks(positions, labels)\r\n    plt.xlabel('Steps')\r\n    plt.ylabel('Day')\r\n    plt.title('Number of steps walked')\r\n    \r\n    plt.grid() # Add a grid for easier visual estimation of values\r\n    plt.savefig('a.png')\r\n\r\n# Number of steps walked during the past week\r\nsteps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]\r\n    \r\n# Corresponding days\r\nlabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    \r\ncreate_bar_chart(steps, labels)</snippet-file></snippet><paragraph/><paragraph><bold>Example 15: Bar Chart - Vertical</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\n\r\ndef create_bar_chart(data, labels):    \r\n    num_bars = len(data) # Number of bars    \r\n    positions = range(1, num_bars+1) # Positions of bars on y-axis\r\n\r\n    # Draw the bar chart (vertical bars)\r\n    plt.bar(positions, data, align='center')\r\n\r\n     # Add little 'ticks' to verticle bars and some labels &amp; titles\r\n    plt.xticks(positions, labels)\r\n    plt.xlabel('Day')\r\n    plt.ylabel('Steps')\r\n    plt.title('Number of steps walked')\r\n    \r\n    plt.grid() # Add a grid for easier visual estimation of values\r\n    plt.savefig('a.png')\r\n\r\n# Number of steps walked during the past week\r\nsteps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]\r\n    \r\n# Corresponding days\r\nlabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    \r\ncreate_bar_chart(steps, labels)\r\n\r\n</snippet-file></snippet><paragraph/><paragraph><bold>Example 16: Histogram</bold></paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Generate a normal distribution of 1000 values\r\nx = np.random.normal(size = 1000)\r\n\r\n# Plot a histogram of this data, dividing it up into 30 bins\r\nplt.hist(x, bins = 30)\r\n\r\n# Add a label and show the histogram\r\nplt.ylabel('Probability');\r\nplt.savefig('a.png')</snippet-file></snippet><paragraph/><paragraph/></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "attempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 7 - Plotting with Matplotlib",
  "tutorial_regex": "",
  "type": "general",
  "updated_at": null,
  "user_id": 93339
}