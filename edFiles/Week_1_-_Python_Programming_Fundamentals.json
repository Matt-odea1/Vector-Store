{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:36.564438+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": "2025-10-01T22:23:01.477696+10:00",
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53299,
  "index": 1,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": 361915,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11528,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47890,
  "outline": "You'll learn to write and run your first Python program",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": false,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 14,
  "slide_marks_summary": [
    {
      "id": 361915,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361916,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361917,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361918,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361919,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361920,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361921,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361922,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361923,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361924,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361925,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361926,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361927,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361928,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 361915,
      "original_id": 326073,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Program, language, and Python",
      "index": 4,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "completed",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Program</heading><paragraph>A computer <italic>program</italic> (or <italic>code</italic>) is a set of instructions for a computer to follow. Computer <italic>programming</italic> (or <italic>coding</italic>) is the activity of writing computer programs.</paragraph><heading level=\"2\">Language</heading><paragraph>When you write a program you must use a language that the computer can understand. There are many such languages - Java, Python, C, Ruby, JavaScript, PHP, and many, many more.  Each language has its own advantages and disadvantages, and there is no \"best\" language that will be the most appropriate choice in all situations.  While, for expediency, this course will focus on a single language (Python), many of the fundamental principles you will learn, such as program flow, data manipulation and code modularity, carry over to almost every other language.</paragraph><paragraph>Like natural languages, such as English and French, programming languages have a specific grammar; this is known as the language's <italic>syntax</italic>. Unlike natural languages, programming languages require you to be precise and unambiguous.  Python has very simple syntax and is considered one of the best designed programming languages in this respect.</paragraph><heading level=\"2\">Python</heading><paragraph>In this course, you will learn the <link href=\"https://www.python.org/\">Python language</link>. Python is one of the most popular languages for several reasons: </paragraph><list style=\"unordered\"><list-item><list style=\"unordered\"><list-item><paragraph>It is a general-purpose language that can be used in a wide variety of situations.</paragraph></list-item><list-item><paragraph>It is mature enough that many comprehensive libraries for many disciplines have been built and extensively tested.</paragraph></list-item><list-item><paragraph>It was developed recently enough to be built upon many of the fundamental programming principles that have been developed and fine-tuned over the years.</paragraph></list-item><list-item><paragraph>It has a human-friendly syntax that is easy to learn.</paragraph></list-item></list></list-item></list><paragraph>Python has become one of the most popular languages for working with data. It has data processing and visualisation libraries such as <italic>pandas</italic> and <italic>Matplotlib</italic> that make handling data very easy.</paragraph><paragraph>Even though you will be learning just one language, many of the fundamental principles you will learn, such as controlling program flow, manipulating data, and modularising code, carry over to almost every other language.</paragraph><heading level=\"2\">Version</heading><paragraph>Like natural languages, programming languages tend to change over time. You'll be using the latest version of Python throughout this course - Python 3. You may encounter some Python 2 code from time to time. The language differences between these two are minor however they can be incompatible with each other.</paragraph><paragraph>In this course, code will usually be presented in a web interpreter as seen below, the language the code is written in can be seen in the top right corner of the web interpreter, most code will be editable and runnable. Try running the code below to see the exact version of Python 3 we are using (in ed):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import sys\nprint(sys.version)</snippet-file></snippet><paragraph><bold>Python nuts and bolts</bold></paragraph><paragraph>Python is an <italic>interpreted</italic> language which means that code is passed directly to an interpreter (a program running on the host machine) for execution rather than being <italic>compiled</italic> into machine-readable instructions to be executed directly by the computer. This means that executing Python code can be as simple as starting an interpreter and typing commands to run. If you installed a version of Python on your computer then there will be an interpreter as part of that installation. Alternatively, you can access an interpreter through the <italic><link href=\"https://edstem.org/au/courses/16645/workspaces/\">Workspaces</link></italic> and <italic><bold>code snippets</bold></italic> here on <bold>ed</bold> platform. Increasing usability by simplifying the process from program writing to execution makes Python a very attractive language for the novice programmer.</paragraph></document>"
    },
    {
      "id": 361916,
      "original_id": 326074,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Python Programming Basics",
      "index": 10,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Here is a very simple Python program: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello, world!&#39;)</snippet-file></snippet><heading level=\"2\">Execution</heading><paragraph>You can execute the program (i.e., run it)  by clicking &#39;Run&#39;. When you do, the Python interpreter executes each line of the program, one at a time, from beginning to end (in this case there is only one line).</paragraph><paragraph>When you run a program like this, the Python <italic>interpreter</italic> executes each line of the program, one at a time, from beginning to end (in this case there is only one line).</paragraph><paragraph>Whenever you see a runnable piece of code like this you can also modify it yourself. This is a great way for you to experiment with Python (don&#39;t worry, you won&#39;t break anything, and everything gets restored when you refresh the page). Try modifying the code above to get it to print your name rather than &#34;world&#34;.</paragraph><heading level=\"2\">Statements</heading><paragraph>Each line in the program is called a <italic>statement</italic>. Your programs will typically contain many statements. Here is one with two statements:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello, world!&#39;)\nprint(&#39;Goodbye, world!&#39;)</snippet-file></snippet><heading level=\"2\">The print() function</heading><paragraph><code>print()</code> is a Python <italic>function,</italic> one that you will find yourself using often. <code>&#39;Hello world!&#39;</code> is an <italic>argument</italic> of the function - some input that we give to the function. The <code>print()</code> function performs the task of printing the argument.</paragraph><paragraph>Try modifying the program below to make it print your name (you need to use quotation marks):</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print()</snippet-file></snippet><paragraph>If you supply <code>print()</code> with multiple arguments it will print them all, separated by spaces. You will find this very useful: </paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(&#39;The value is&#39;, 10*2)</snippet-file></snippet><paragraph>A very handy technique when using <code>print()</code> is to use an <bold>f-string</bold>. If you append an &#39;f&#39; to the start of a quoted string (before the first quote) you can get Python to do things inside the string before it prints, such as perform calculations. You do this by using curly brackets. Here are some examples: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(f&#39;The result is {10*2}.&#39;)\nprint(f&#39;The results are {10*2}, {10*3}, and {10*4}.&#39;)</snippet-file></snippet><heading level=\"2\">Input</heading><heading level=\"2\">Getting user input</heading><paragraph>Another Python function that you will use often is <code>input()</code>, which you can use to get input from the user. For example:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(input(&#39;What would you like to print? &#39;))</snippet-file></snippet><paragraph>This program asks the user for some input and then prints it.</paragraph><heading level=\"2\">Syntax errors</heading><paragraph>Before executing a program the interpreter first checks that it has correct syntax. If it finds any <italic>syntax errors</italic> it will tell you, and not run the program. The following program contains a syntax error (it&#39;s missing a quotation mark) - try running it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(&#39;Hello, world!)</snippet-file></snippet><heading level=\"2\">Runtime errors</heading><paragraph>Sometimes the syntax of a program is fine, but Python raises an error during its execution. These are called <italic>runtime errors</italic>. When this happens, execution stops, and Python returns some information about the error.</paragraph><paragraph>For example, the following program asks Python to divide a number by zero, which is impossible. It generates a runtime error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(10/0)</snippet-file></snippet><heading level=\"2\">Logical errors</heading><paragraph>Sometimes the syntax of a program is fine, and it executes without any runtime errors, but it doesn&#39;t do what you intended it to do. This is called a <italic>logical error</italic>.</paragraph><paragraph>For example, suppose you write the following program to add 1 and 2 and then multiply the result by 3:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(1 + 2 * 3)</snippet-file></snippet><paragraph>The result you&#39;re expecting is 9, because 1 + 2 is 3, and 3 times 3 is 9. But the program above prints 7. Error! This is not a syntax error, nor a runtime error - it&#39;s a logical error. The problem is that Python assumes that you want the multiplication to happen first, then the addition (you will learn more about this). So it calculates 2 x 3 = 6, then 1 + 6 = 7. You should write you program like this instead:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print((1 + 2) * 3)</snippet-file></snippet><paragraph>This removes the logical error.</paragraph><heading level=\"2\">Comments</heading><paragraph>In Python, anything on the same line after a <code>#</code> will be ignored by the Python interpreter. This allows you to add comments. It is important that the programs you write are easily understandable by someone who reads them. To help with this it can be a good idea to add comments throughout.</paragraph><paragraph>Here is an example from above, with an explanatory comment added:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\"># Ask the user for input and then print it:\nprint(input(&#39;What would you like to print? &#39;))</snippet-file></snippet><paragraph>Comments can start anywhere on a line (but use comments on the same line as the code sparingly):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(input(&#39;What would you like to print? &#39;)) # Ask the user for input and then print it</snippet-file></snippet><callout type=\"info\">You should not use comments to state the obvious. Comments should explain the intentions of the code, instead of describing the exact procedure it is performing. What the code is <italic>doing</italic> is often obvious, but it may not be obvious <italic>why</italic> it is doing that.<break></break>Here in Ed we&#39;ll add quite a few comments to code that wouldn&#39;t ordinarily be added, for <italic>instructional</italic> purposes.</callout><heading level=\"2\">Disabling code</heading><paragraph>You can also use <code>#</code> to disable one or more lines of code, either because they are not yet finished and will cause an error, or because your program is not working and you are trying to find the cause of the error, or because you are not using them but want to save them just in case you decide to use them again. For example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(&#39;Hello, world!&#39;)\n# print(&#39;Goodbye, world!&#39;)</snippet-file></snippet><heading level=\"2\">Whitespace</heading><paragraph>Python will ignore blank lines between statements and spaces between arguments in a statement.  So the following code snippets are equivalent:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">\nprint  ( &#39;Hello&#39;   )\n\nprint(   10    *      2)</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello&#39;)\nprint(10*2)</snippet-file></snippet><paragraph>Spacing at the start of a line (i.e. <italic>indentation</italic>) is not ignored by Python - it indicates a <italic>compound statement</italic> and we will see this further when we cover the <code>if</code> and <code>while</code> commands.  If you incorrectly add indentation, Python will throw a (syntax) error.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">    print(&#39;Hello&#39;)</snippet-file></snippet><paragraph>Spacing inside quotes is also not ignored by Python:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(&#39;Hello     world&#39;)</snippet-file></snippet><paragraph>Although much of your whitespace is ignored by Python it has become conventional to use it in a certain way, described in a set of guidelines called &#34;The PEP 8 Style Guide&#34;, or just &#34;PEP 8&#34;. According to PEP 8, for example, you should use <code>print(&#39;Hello&#39;)</code> rather than <code>print( &#39;Hello&#39; )</code>  or <code>print ( &#39;Hello&#39; )</code>.</paragraph><paragraph>There is a link to <link href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8</link> in the main section of this course, for your information. The guidelines are comprehensive, covering much more than just the use of whitespace. You&#39;re not expected to know all of them. If you just follow the formatting used in the examples throughout this course then your code should be fine.</paragraph><heading level=\"2\">Case sensitivity</heading><paragraph>Python is a <bold>case-sensitive</bold> language. This means that &#34;print&#34; and &#34;Print&#34; are considered to be different words. See what happens when you try to use &#34;Print&#34; instead of &#34;print&#34;:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">Print(&#39;Hello world!&#39;)</snippet-file></snippet></document>"
    },
    {
      "id": 361917,
      "original_id": 330833,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Importing modules",
      "index": 13,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph/><paragraph>You won't get far using Python before you need to <bold>import a module</bold>. A module is just a file that contains Python code, with a \".py\" extension. Although the core Python language contains a lot of functionality, some of the functionality you'll want is included in modules, rather than in the core. You can access that functionality by importing those modules.</paragraph><paragraph>For example, there is a lot of non-core mathematics functionality in the \"math.py\" module. You can import that module as follows (note that you don't include \".py\" - Python will figure it out):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math</snippet-file></snippet><paragraph>This makes all of the code that has been saved in the math.py file available for use in your program. For example, in math.py there is a function <code>floor()</code>, which rounds a number down to the nearest integer. Having imported math.py you can now call this function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\nprint(math.floor(3.14))</snippet-file></snippet><paragraph>Note that you call the function using <code>math.floor()</code>, rather than using just <code>floor()</code>. If you'd like to be able to use this function without having to add the prefix, you can do so using the <code>from</code> keyword when you import:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import floor\nprint(floor(3.14))</snippet-file></snippet><paragraph>If you'd like to import more functions then you can just separate their names by commas:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import floor, ceil\nprint(floor(3.14))\nprint(ceil(3.14))</snippet-file></snippet><paragraph>You can import everything by using an asterisk:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import *\nprint(floor(3.14))\nprint(ceil(3.14))</snippet-file></snippet><paragraph>But you should avoid doing this because you might end up with the same function name being used twice as shown in the examples below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import *\r\n\r\ndef ceil(x): # my ceil() doubles the number given\r\n    return 2*x\r\n\r\nprint(ceil(3.14))  # you will get 6.28</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from math import *\r\n\r\n#def ceil(x): # my ceil() doubles the number given\r\n#    return 2*x\r\n\r\nprint(ceil(3.14))  # you will get 4</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\r\n\r\ndef ceil(x): # my ceil() doubles the number given\r\n    return 2*x\r\n\r\nprint(math.ceil(3.14))  # you will get 4\r\nprint(ceil(3.14))  # you will get 6.28</snippet-file></snippet><paragraph/><paragraph>You can use the <code>dir()</code> function to see what is available to you in a module that you have imported:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\nprint(dir(math))</snippet-file></snippet><paragraph>When you import a module you can give it an <bold>alias</bold> using the <code>as</code> keyword, to save yourself some typing. One module that we will be using a lot in the second half of this course is the pandas module. It is standard to give it the alias \"pd\" when importing it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import pandas as pd\nprint(dir(pd))</snippet-file></snippet><paragraph>When Python gets installed on a computer many modules are installed with it. These are called <bold>built-in modules</bold>. These are automatically available for you to import. If you want to import other modules they will first need to be installed on the computer. You can also write your own modules, and import them.</paragraph></document>"
    },
    {
      "id": 361918,
      "original_id": 326075,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Objects",
      "index": 14,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>When you program with Python (and many other languages) you will work a lot with <italic>objects.</italic> Objects encapsulate a piece of data (which may be simple, such as a single number; or more complex, such as a collection of smaller objects) and are the building blocks of Python.  For example, in the statement <code>print(&#39;The value is&#39;, 10*2)</code>, <code>&#39;The value is&#39;</code>, <code>10</code> and <code>2</code> are all objects.  Indeed, even the <code>print()</code> function is an object.  </paragraph><heading level=\"2\">Types</heading><paragraph>Every object is of a certain <italic>type</italic>. The type of an object determines how Python interacts with it, for example it makes sense to add two numbers, but it does not make sense to add functions.  In Python, the main types are:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Integer (int)</bold>. A whole number, positive or negative, including zero (i.e. ..., -2, -1, 0, 1, 2, ...).</paragraph></list-item><list-item><paragraph><bold>Floating-point number (float)</bold>. A positive or negative number, not necessarily whole, including zero (e.g. 3.14, -0.12, 89.56473).</paragraph></list-item><list-item><paragraph><bold>String (str)</bold>. A sequence of characters (e.g. &#39;Hello&#39;, &#39;we34t&amp;2*&#39;).  Used to store text.</paragraph></list-item><list-item><paragraph><bold>Boolean (bool)</bold>. A truth value, either true or false.</paragraph></list-item><list-item><paragraph><bold>List (list)</bold>. An ordered container of objects.</paragraph></list-item><list-item><paragraph><bold>Tuple (tuple)</bold>. An immutable list (i.e. one that cannot be changed).</paragraph></list-item><list-item><paragraph><bold>Set (set)</bold>. An unordered container of unique objects.</paragraph></list-item><list-item><paragraph><bold>Dictionary (dict)</bold>. A set of key-object pairs.</paragraph></list-item><list-item><paragraph><bold>Function</bold>. A piece of code that can be run by calling it.</paragraph></list-item><list-item><paragraph><bold>Class</bold>. A user-defined type of object.</paragraph></list-item></list><paragraph>Python also has a special object, <code>None</code>, which represents the absence of an object. It is of type <bold>NoneType</bold>. It is the only object of this type.</paragraph><paragraph>You will be learning more about the objects of each type. This week you will learn about integers, floats, strings, and booleans. Next week you will learn about lists, tuples, sets, and dictionaries. In Week 3 you will learn about functions and classes. </paragraph><heading level=\"2\">Checking the type of an object</heading><paragraph>You can find out the type of an object by using Python&#39;s <code>type()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(type(1))\nprint(type(3.14))\nprint(type(&#39;Hello&#39;))\nprint(type(None))\nprint(type(print))</snippet-file></snippet><paragraph>Notice in the last example above that we have provided the <code>print</code> function as an argument to the <code>type</code> function. You can do that - the <code>print</code> function is an object, just like numbers and strings are, and you can provide it as an argument to the <code>type()</code> function to find out what type of object it is. Most of the time you&#39;ll be calling <code>print()</code>, and providing arguments to it, but occasionally you might provide it as an argument to some other function, as we have done above. In fact, you can even provide <code>print</code> as an argument to <code>print()</code> function itself:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(print)</snippet-file></snippet><paragraph>When an object is of a certain type we say that it is an <bold>instance</bold> of that type. You can also use Python&#39;s <code>isinstance()</code> function to check whether an object is of a certain type:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(isinstance(1, int)) # True\nprint(isinstance(1, float)) # False\nprint(isinstance(3.14, float)) # True\nprint(isinstance(3.14, int)) # False\nprint(isinstance(&#39;Hello&#39;, str)) # True\nprint(isinstance(&#39;Hello&#39;, float)) # False</snippet-file></snippet><heading level=\"2\">Attributes</heading><paragraph>Objects have <italic>attributes</italic>. Attributes are properties that are specific to the object.  For example, the string object &#39;Hello&#39;, has an attribute <code>upper()</code>, which is a function that produces an upper-case version of the string. You can access this attribute of the string by using <italic>dot notation</italic>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#39;Hello&#39;.upper())</snippet-file></snippet><paragraph>It can be useful to think of &#39;.&#39; as representing &#34; &#39;s &#34; (i.e. apostrophe-s) - the statement <code>&#39;Hello&#39;.upper()</code> is instructing Python to execute the <code>upper()</code> function of the <code>&#39;Hello&#39;</code> object.</paragraph><paragraph>When an attribute is a function, like this one is, it is also called a <italic>method</italic>. Attributes which are not methods are also known as <italic>fields</italic>.</paragraph><paragraph>Which attributes an object has depends upon what type of object it is. String objects have the <code>upper()</code> attribute (method), but integer objects do not. If you try to access this attribute of an integer you will get an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(&#34;Hello&#34;.upper())\nnumber = 12\nprint(number.upper())</snippet-file></snippet><paragraph>Part of learning Python, and other languages, is learning what attributes the different types of objects have.</paragraph></document>"
    },
    {
      "id": 361919,
      "original_id": 326076,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Expressions",
      "index": 16,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>To work with an object you need to refer to it, and to refer to it you use an <italic>expression</italic>. </paragraph><paragraph>Expressions come in two varieties: <bold>simple expressions</bold> and <bold>complex expressions</bold>. We&#39;ll consider simple expressions first, and then complex expressions.</paragraph><paragraph>There are three types of simple expressions:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Literals</bold></paragraph></list-item><list-item><paragraph><bold>Variables</bold></paragraph></list-item><list-item><paragraph><bold>Constants</bold></paragraph></list-item></list><heading level=\"2\">Literals</heading><paragraph>A <italic>literal</italic> shows explicitly which object they refer to. Here are some examples: </paragraph><list style=\"bullet\"><list-item><paragraph>Integer literals: <code>1</code>, <code>26</code>, <code>-14</code></paragraph></list-item><list-item><paragraph>Floating-point literals: <code>3.14</code>, <code>0.06</code>, <code>-9.7</code></paragraph></list-item><list-item><paragraph>String literals: <code>&#39;Hello&#39;</code>, <code>&#34;Goodbye&#34;</code> (you can use single or double quotes, but they must match)</paragraph></list-item><list-item><paragraph>Boolean literals: <code>True</code>, <code>False</code> (there are only two)</paragraph></list-item><list-item><paragraph>None literal: <code>None</code> (there is only one)</paragraph></list-item></list><paragraph>You might be wondering whether <code>-14</code> counts as a literal. The answer is no: Python understands this expression not as a literal for the number -14, but as the application of the <code>-</code> operator to the number 14 (more about number operators in the next slide).</paragraph><heading level=\"2\">Variables</heading><paragraph>You can also introduce your own names for objects, and these are called <italic>variables</italic>. </paragraph><paragraph>When you introduce a variable you have to specify which object it refers to. This is called <bold>assigning</bold> the variable, and you do it using the <bold>assignment operator</bold> <code>=</code>. This is sometimes also called <bold>binding</bold> the variable - you bind it to an object.</paragraph><paragraph>Here is an example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(message)</snippet-file></snippet><paragraph>The first line introduces a variable <code>message</code> and assigns it the string object <code>&#39;Hello there&#39;</code>. The second line uses this variable to print the object.</paragraph><paragraph>Once you introduce a variable you can use it as many times as you like throughout your program:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(message)\nprint(message)\nprint(message)\nprint(message)</snippet-file></snippet><paragraph>The object that the variable refers to is often called the <bold>value</bold> of the variable. You can change the value of a variable (i.e., change which object the variable refers to) as often as you like:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(message)\nmessage = 3.14 # Assign a new value\nprint(message)\nmessage = True # Assign a new value\nprint(message)</snippet-file></snippet><paragraph>Notice that the variable <code>message</code> in the program refers to different types of object as the program proceeds - first it refers to a string, then to a floating-point number, and then to a boolean. Because variables in Python can do this we say that Python has <italic>flexible typing</italic>. (Some languages, such as C and Java, do not allow variables to change their reference to a different type of object.)</paragraph><paragraph>If you want to check the type of the object that a variable refers to, you can use the <code>type()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = &#39;Hello there&#39;\nprint(type(x)) # str\nx = 3.14\nprint(type(x)) # float\nx = True\nprint(type(x)) # bool\nx = print\nprint(type(x)) # function</snippet-file></snippet><paragraph>Any type of object can be assigned to a variable, not just numbers, strings or booleans. Look at the last example above - we have assigned the <code>print</code> function to the variable <code>x</code>. Having done that, <code>x</code> is then another name for the <code>print</code> function, and we can use it accordingly:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = print\nx(&#39;Hello, world!&#39;)</snippet-file></snippet><paragraph>You can use variables to assign other variables:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nnew_message = message\nprint(new_message)</snippet-file></snippet><paragraph>Be careful to understand what&#39;s going on here. In line 2 you are getting <code>new_message</code> to refer to whatever it is that <code>message</code> refers to at the time. If a different object is later assigned to <code>message</code>, it will <underline>not</underline> automatically be assigned to <code>new_message</code> as well - there will be no change in what <code>new_message</code> refers to. Let&#39;s check that:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nnew_message = message\nmessage = &#39;Goodbye&#39; # Value of new_message not changed \nprint(new_message)</snippet-file></snippet><paragraph>You must assign a value to a variable before you use it, otherwise Python will generate an error:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(message) # Error - message has no value</snippet-file></snippet><paragraph>If you want to introduce a variable but don&#39;t yet have any significant value to assign it then you can assign it the value <code>None</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = None\nprint(message) # No error - message has a value</snippet-file></snippet><paragraph>You can assign multiple variables the same value:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = y = z = 0 # All get assigned 0\nprint(x, y, z)</snippet-file></snippet><paragraph>Or different values, using a technique called <bold>multiple assignment</bold>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x, y, z = 1, 2, 3 # x gets 1, y gets 2, z gets 3\nprint(x, y, z)</snippet-file></snippet><paragraph>This technique gives you a way to swap the values of two variables:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x, y = 1, 2\nprint(x, y)\nx, y = y, x # Swap the values of x and y\nprint(x, y)</snippet-file></snippet><heading level=\"2\">Naming rules</heading><paragraph>You have a fair bit of freedom in what names you can introduce, but there are some rules and restrictions.</paragraph><paragraph>First,  you cannot use any of Python&#39;s keywords, such as <code>import</code>, <code>from</code>, <code>True</code>, <code>False</code>, <code>None</code>, etc. There are 33 keywords in version 3 - you will be learning most of them.</paragraph><paragraph>Second, a name can only contain uppercase letters (<code>A-Z</code>), lower case letters (<code>a-z</code>),  digits (<code>0-9</code>) and the underscore (<code>_</code>). Moreover, the first character cannot be a digit.</paragraph><paragraph>Keep in mind that Python is case sensitive, and this applies to your names as well. The program below generates an error because the variable <code>Message</code> is not given a value before it is used (the variable <code>message</code> is, but that&#39;s a different variable):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">message = &#39;Hello there&#39;\nprint(Message) # Error - Message does not have a value</snippet-file></snippet><paragraph>It is best to choose names for your variables that make the intention of your program as clear as possible. Consider the following two pieces of code:</paragraph><pre>var1 = 10\nvar2 = 120\nprint(var1 * var2)\n</pre><pre>days = 10\nfish_per_day = 120\nprint(days * fish_per_day)</pre><paragraph>Both pieces of code do the same thing, but the second makes it much clearer what is going on. In effect, by choosing variable names carefully we can use them to help explain the code.</paragraph><paragraph>It is fairly standard to make variable names lowercase, with words separated by underscores, e.g, <code>fish_per_day</code>. This is often called <bold>snake case</bold>.</paragraph><heading level=\"2\">Unbinding variables</heading><paragraph>You can unbind a variable from an object by using <code>del</code>.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = 10\nprint(x)\ndel x # Unbind x from its value\nprint(x) # Now we get an error</snippet-file></snippet><paragraph>Note that the word &#34;del&#34; is a bit misleading. You are not deleting the variable or the object it is bound to - you are just severing the connection between them.</paragraph><paragraph>Although, when you do this the variable and/or the object might get removed from memory, via a process called <bold>garbage collection</bold>. An object is removed from memory by Python when nothing is referring to it.</paragraph><paragraph>Also note that unbinding a variable is not the same as <bold>rebinding</bold> it to <code>None</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 10\nprint(x)\nx = None\nprint(x) # No error - x has a value</snippet-file></snippet><heading level=\"2\">Choosing types</heading><paragraph>You can get Python to return an object of a certain type by using the functions <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>list</code>, <code>tuple</code>, <code>set</code>, and <code>dict</code>. For example, if you would like <code>var</code> to refer to the floating-point number 1 rather than the integer 1 you can use the <code>float</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">var = 1 # var refers to the integer 1\nprint(var, type(var))\n\nvar = float(1) # var refers to the floating point number 1.0\nprint(var, type(var))</snippet-file></snippet><paragraph>You might need to do this when you are getting user input. Python treats user input as a string, so if you are asking the user to enter a number then you will need to convert the input, using <code>int</code> or <code>float</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># number will be a string:\nnumber = input(&#39;Enter a number: &#39;)\nprint(number, type(number))\n\n# number will be an integer:\nnumber = int(input(&#39;Enter a number: &#39;))\nprint(number, type(number))\n\n# number will be a float:\nnumber = float(input(&#39;Enter a number: &#39;))\nprint(number, type(number))</snippet-file></snippet><paragraph>Sometimes Python can&#39;t return an object of the type you are asking for, and it will raise an error. For example, Python cannot make every string into an integer:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">var = int(&#39;hello&#39;) # Error - cannot make &#39;hello&#39; into an integer\nprint(type(var))</snippet-file></snippet><paragraph>You can use the same functions to change the type of object a variable refers to after it has been set: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">var = 2 # var refer to the integer 2, by default\nprint(var, type(var))\n\nvar = float(var) # var now refers to the floating-point number 2.0\nprint(var, type(var))\n\nvar = str(var) # var now refers to the string &#39;2.0&#39;\nprint(var, type(var))</snippet-file></snippet><paragraph>Note that when it operates on a floating-point number the <code>int</code> function truncates all decimal places:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(int(1.2))\nprint(int(-1.2))</snippet-file></snippet><heading level=\"2\">Constants</heading><paragraph>If you intend the value of a variable not to change, then you are using it as a <bold>constant</bold>. It is conventional to indicate this by naming it using all capital letters, with underscores separating the words, e.g, <code>MAX_INT</code>. One of the main reasons for using constants is to give an indication as to <italic>why</italic> a particular value is being used (e.g. using the constant HOURS_PER_DAY instead of the literal 24), so again, it&#39;s best to use names that help to explain what your program does:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">HOURS_PER_DAY = 24 # Signal that this should not change\nMINUTES_PER_HOUR = 60 # Signal that this should not change\n\nnum_days = int(input(&#39;How many days? &#39;))\nnum_minutes = num_days * HOURS_PER_DAY * MINUTES_PER_HOUR\n\nprint(num_days, &#39;days is&#39;, num_minutes, &#39;minutes&#39;)</snippet-file></snippet><paragraph>Note that just with any other variable, it is <italic>possible</italic> to change the value of a constant - it is up to the programmer to ensure that variables that are intended to be constants do not change after they are defined.</paragraph><heading level=\"2\">Complex expressions</heading><paragraph>A <bold>complex expression</bold> is an expression that contains subexpressions, combined using arithmetical and other kinds of operators (you will be learning about various kinds of operators).</paragraph><paragraph>For example, <code>10 * 2</code>. This is an expression, because it refers to an object - the number 20. And it is a complex expression, because it contains a subexpression - the literal <code>10</code>. Actually, it contains another subexpression too - the literal <code>2</code>. But it only needs to contain one subexpression to count as complex. These two subexpressions are combined using the <code>*</code> operator.</paragraph><paragraph>You will see many examples of complex expressions as we proceed.</paragraph></document>"
    },
    {
      "id": 361920,
      "original_id": 331536,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Working with numbers",
      "index": 88,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Python has 3 built-in types for numbers: </paragraph><list style=\"unordered\"><list-item><paragraph><code>int</code> - representing whole numbers (positive and negative integers) with unlimited precision (i.e. there is no <italic>a priori</italic> maximum or minimum value an <code>int</code> object can have)</paragraph></list-item><list-item><paragraph><code>float</code> - representing <link href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic\">floating point numbers</link> (non-whole numbers) with a limited precision (i.e. a <code>float</code> object is limited to a certain number of significant figures)</paragraph></list-item><list-item><paragraph><code>complex</code> - representing complex numbers. A complex number is a number with two distinct components: a <bold>real</bold> part and an <bold>imaginary</bold> part.</paragraph></list-item></list><paragraph>While numeric types are largely interchangeable (for example you can add an <code>int</code> to a <code>float</code>), a common source of runtime errors is when objects of the wrong type are being used (for example using a <code>float</code> when an <code>int</code> was expected or vice versa).</paragraph><heading level=\"2\">Operating on numbers</heading><paragraph>You can add, subtract, multiply, and divide numbers by using the <bold>operators</bold> <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, respectively, and combinations of them:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(1 + 2)\nprint(10 - 5)\nprint(3 * 4)\nprint(20/4)\nprint((1 + 2)*(3 + 4))\nprint(10/(3-1)) </snippet-file></snippet><paragraph>Complex numbers examples:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">n = 1 + 2j\nprint(n)\nprint(n.real)\nprint(n.imag)\na = 1 + 2j\nb = 3 - 4j\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)</snippet-file></snippet><paragraph></paragraph><paragraph>You can raise one number to the power of another number by using the <bold>exponentiation operator</bold><italic>,</italic> <code>**</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(10 ** 2) # 10 to the power 2\nprint(2 ** 3)  # 2 to the power 3</snippet-file></snippet><paragraph>You can divide one number by another number and round down to the nearest whole number by using the <bold>integer division operator</bold>, <code>//</code>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(10 // 3) # 10 divided by 3 and rounded down</snippet-file></snippet><paragraph>Note the effect of using <code>//</code> on negative numbers:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(-10 // 3) # -10 divided by 3 and rounded down</snippet-file></snippet><paragraph>You can divide one number by another number and get the remainder by using the <bold>modulus operator</bold>, <code>%</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(10 % 3) # The remainder when 10 is divided by 3</snippet-file></snippet><heading level=\"2\">Order of operations</heading><paragraph>Unless you specify the order in which operations are to be performed, by using brackets, Python performs them in a very particular order:</paragraph><list style=\"bullet\"><list-item><paragraph>First, <code>**</code> is performed, from right to left</paragraph></list-item><list-item><paragraph>Next,  <code>*</code>, <code>/</code>, <code>//</code>, and <code>%</code> are performed, from left to right.</paragraph></list-item><list-item><paragraph>Next,  <code>+</code> and <code>-</code> are performed, from left to right.</paragraph></list-item></list><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(1 + 2 * 3) # Same as 1 + (2*3) \nprint(2 ** 3 * 4) # Same as (2**3) * 4\nprint(24 / 6 * 2) # Same as (24/6) * 2\nprint(24 / 6 / 2) # Same as (24/6) / 2\nprint(2 ** 2 ** 3) # Same as 2**(2**3)</snippet-file></snippet><heading level=\"2\">Augmented assignment operators</heading><paragraph>You will often find yourself wanting to operate on a variable and then re-assign the result to that same variable. Python provides <bold>augmented assignment operators</bold> to allow for more concise code: <code>+=</code>, <code>-=,</code> ,<code>*=</code>, <code>/=</code>, <code>//=</code>, and <code>%=</code> .</paragraph><list style=\"bullet\"><list-item><paragraph><code>x += 2</code> is equivalent to <code>x = x + 2</code></paragraph></list-item><list-item><paragraph><code>x -= 2</code> is equivalent to <code>x = x - 2</code></paragraph></list-item><list-item><paragraph><code>x *= 2</code> is equivalent to <code>x = x * 2</code></paragraph></list-item><list-item><paragraph><code>x /= 2</code> is equivalent to <code>x = x / 2</code></paragraph></list-item><list-item><paragraph><code>x //= 2</code> is equivalent to <code>x = x // 2</code></paragraph></list-item><list-item><paragraph><code>x %= 2</code> is equivalent to <code>x = x % 2</code></paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 12\nx += 2 # Equivalent to x = x + 2 (assign to x the result of x + 2)\nprint(x)</snippet-file></snippet><heading level=\"2\">Comparing numbers</heading><paragraph>Python has a number of <bold>comparison operators</bold> which you can use to compare numbers:</paragraph><list style=\"bullet\"><list-item><paragraph><code>num1 == num2</code> is <code>True</code> if the value of <code>num1</code> <bold>equals</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 is num2</code> is <code>True</code> if the value of <code>num1</code> <bold>equals</bold> the value of <code>num2</code>, and <code>num1</code> and <code>num2</code> <bold>have the same type</bold>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 != num2</code> is <code>True</code> if the value of <code>num1</code> <bold>does not equal</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 is not num2</code> is <code>True</code> if the value of <code>num1</code> <bold>does not</bold> <bold>equal</bold> the value of <code>num2</code>, or <code>num1</code> and <code>num2</code> <bold>have different types</bold>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &lt; num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is less than</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &lt;= num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is less than or equal to</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &gt; num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is greater than</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>num1 &gt;= num2</code> is <code>True</code> if the value of <code>num1</code> <bold>is greater than or equal to</bold> the value of <code>num2</code>, otherwise it is <code>False</code></paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 1\ny = 1.0\nprint(1 == 1.0)\nprint(x is y)</snippet-file></snippet><heading level=\"2\">Floating-point numbers and <code>==</code></heading><paragraph>Because floating point numbers are stored with limited precision you might experience strange results when attempting to compare them with <code>==</code>. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(0.1 + 0.2 == 0.3)</snippet-file></snippet><paragraph>Why does this comparison return <code>False</code>? Because <code>0.1 + 0.2</code> is not what you would expect:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(0.1 + 0.2)</snippet-file></snippet><paragraph>When you compare floating point numbers using <code>==</code> or <code>!=</code> you should always round them float to a specified precision, using the <code>round</code> function: <code>round(x, n)</code> rounds the value of <code>x</code> to n decimal places.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(round(0.1 + 0.2, 1))\nprint(round(0.3, 1))\nprint(round(0.1 + 0.2, 1) == round(0.3, 1))</snippet-file></snippet><paragraph>Note: the <code>round</code> function implements <link href=\"https://en.wikipedia.org/wiki/Rounding#Round_half_to_even\">round half to even</link>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(round(4.5, 0))\nprint(round(5.5, 0))\nprint(round(-4.5, 0))\nprint(round(-5.5, 0))</snippet-file></snippet><heading level=\"2\">Applying functions</heading><paragraph>Python has the functions <code>int</code>, <code>float</code>,  <code>abs</code>, <code>pow</code>, <code>round</code> that you can use to manipulate numbers:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(int(&#39;3&#39;) + float(&#39;2.0&#39;)) # Convert strings to numbers and add them\nprint(abs(-5)) # Absolute value of -5\nprint(pow(2, 4)) # 2 to the power of 4.  This is the same as 2**4\nprint(round(3.567, 2)) # Round 3.567 to 2 decimal places</snippet-file></snippet><heading level=\"2\">Generating random numbers</heading><paragraph>It can be very useful to generate random numbers. You can do this by importing the functions <code>random</code> and <code>randint</code> from the <code>random</code> module.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">from random import random, randint\nprint(random()) # Random float between 0 and 1\nprint(randint(10, 20)) # Random integer between 10 and 20 (inclusive)</snippet-file></snippet><heading level=\"2\">Other mathematical functions</heading><paragraph>A lot of other mathematical functions that you might need are in in <code>math</code> module:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\nprint(math.sin(0.5)) # Degrees are in radians\nprint(math.cos(0.5))\nprint(math.tan(0.5))\nprint(math.sqrt(225)) # Square root\nprint(math.log(10)) # Natural logarithm, base e\nprint(math.ceil(2.05)) # Round up to nearest integer\nprint(math.floor(2.95)) # Round down to nearest integer</snippet-file></snippet><paragraph></paragraph></document>"
    },
    {
      "id": 361921,
      "original_id": 331537,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Working with strings",
      "index": 89,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>A string is a sequence of characters. The characters might be ones you can type on your keyboard, or any of the hundreds of thousands of other <bold>unicode characters</bold>, including symbols and foreign language letters.</paragraph><heading level=\"2\">String literals</heading><paragraph>As you have seen, string literals have the characters between quotes, either single quotes or double quotes.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">literal_one = 'A string' # You can use single quotes\nliteral_two = \"A string\" # Or double quotes\nprint(literal_one)\nprint(literal_two)</snippet-file></snippet><heading level=\"2\">The empty string</heading><paragraph>One of the most useful strings is the <bold>empty string</bold> - a string with no characters. The literal for an empty string is <code>''</code>, or <code>\"\"</code>.</paragraph><paragraph>Note that the empty string is not the same thing as <code>None</code> - they are different objects:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">empty_string = ''\nprint(empty_string)\nprint(None)\nprint(empty_string is None)</snippet-file></snippet><heading level=\"2\">Escaping special characters</heading><paragraph>Sometimes you will need to use a string literal that contains quote marks or other characters that have special meaning in Python. You can do this by <bold>escaping</bold> those special characters, which means prefixing them with a backslash <code>\\</code>.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Backslash used to escape a quote mark\nprint('Penny\\'s dog')\nprint(\"Penny's dog is called \\\"Mac\\\".\")\n\n# Backslash used to escape a new line symbol\nprint('This is one line.\\nThis is a second line')\n\n# Backslash used to escape a tab symbol\nprint('Here\\tThere')</snippet-file></snippet><paragraph>This means that the backslash itself has a special meaning in strings, so to include it you must escape it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(\"You can have tea neither\\nor coffee\")\nprint(\"You can have tea neither\\\\nor coffee\")</snippet-file></snippet><paragraph>If you have a lot of backslashes and no special characters then you can tell Python to ignore the special meaning of the backslash by preceding the string with <code>r</code> (for \"raw\"):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(r\"You can have tea neither\\nor coffee\")</snippet-file></snippet><paragraph>You can avoid having to escape single quote marks by enclosing the whole string in double quotes. Similarly, you can avoid having to escape double quote marks by enclosing the whole string in single quotes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(\"Penny's dog\")\nprint('Penny said, \"This is my dog\".')</snippet-file></snippet><paragraph>If you like to include line breaks in a string then you can either use <code>\\n</code>, as in the example above, or you can use triple quotes around the string:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Using \\n\ntext = 'This is one line.\\nThis is a second line'\nprint(text)\n\n# Using triple single quotes\ntext = '''This is one line.\nThis is a second line.'''\nprint(text)\n\n# Using triple double quotes\ntext = \"\"\"This is one line.\nThis is a second line.\"\"\"\nprint(text)\n\ntext = \"\"\"\\\nThis is one line.\nThis is a second line.\"\"\"\nprint(text)</snippet-file></snippet><paragraph>You can also use triple quotes around a string that contains both single and double quotes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">text = '''She said, \"I don't know how you do it!\"'''\nprint(text)\ntext = \"\"\"She said, 'I don't know what \"\" means'\"\"\"\nprint(text)</snippet-file></snippet><paragraph>You'll get an error if you end up with four quotes in a row.</paragraph><heading level=\"2\">Concatenating strings</heading><paragraph>You can <bold>concatenate</bold> strings (i.e. join them) using the  <code>+</code> operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">first_name = 'Leo'\nlast_name = 'Tolstoy'\nfull_name = first_name + ' ' + last_name\nprint(full_name)</snippet-file></snippet><paragraph> You can also use the <code>+=</code> augmented assignment operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">name = 'Leo'\nname += ' '\nname += 'Tolstoy'\nprint(name)</snippet-file></snippet><paragraph>You can duplicate a string a given number of times by using the <code>*</code> operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('a' * 10)</snippet-file></snippet><heading level=\"2\">Comparing strings</heading><paragraph>Just as with numbers, you can use Python's comparison operators to compare strings:</paragraph><list style=\"bullet\"><list-item><paragraph><code>str1 == str2</code> is <code>True</code> if <code>str1</code> and <code>str2</code> are the same sequence of characters, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 != str2</code> is <code>True</code>  if <code>str1</code> and <code>str2</code> are not the same sequence of characters, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 in str2</code> is <code>True</code> if <code>str1</code> appears as a substring in <code>str2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 not in str2</code> is <code>True</code> if <code>str1</code> does not appear as a substring in <code>str2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph><code>str1 &lt; str2</code> is <code>True</code> if <code>str1</code> <bold>is lexicographically less than</bold> (i.e. would appear earlier in the dictionary than) <code>str2</code>, otherwise it is <code>False</code></paragraph></list-item><list-item><paragraph>Similarly we have <code>str1 &lt;= str2</code>, <code>str1 &gt; str2</code>, and <code>str1 &gt;= str2</code></paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('A' == 'A')\nprint('A' == \"A\") # Whether you define literals with ' or \" does not matter</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('fish' in 'selfishness')\nprint('fine' in 'selfishness') # Substrings have to be contiguous</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print('A' &lt; 'B')\nprint('AA' &lt; 'AB')\nprint('A' &lt; 'AA')</snippet-file></snippet><heading level=\"2\">Applying functions to strings</heading><paragraph>You can use the <code>len</code> function to find the length of a string:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(len('abcde'))</snippet-file></snippet><heading level=\"2\">Calling string methods</heading><paragraph>String objects have many useful methods. For example, they have a method <code>upper</code> which returns a string with the same characters but all in upper case.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">s = 'hello'\nprint(s.upper())</snippet-file></snippet><paragraph>None of a string's methods <bold>modify the string in place</bold> - they all <bold>return a new string</bold>. So, if you want to modify a string by using one of the methods you have to assign the result of the method back to the string. To illustrate: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">s = 'hello'\nprint(s)\n\ns.upper() # Returns a new string - does not change s\nprint(s)\n\ns = s.upper() # Assign the new string back to s - changes s\nprint(s)</snippet-file></snippet><paragraph>Some of the most useful string methods are listed below.</paragraph><list style=\"bullet\"><list-item><paragraph><code>str.isupper()</code> - Returns true if all characters in <code>str</code> are upper case</paragraph></list-item><list-item><paragraph><code>str.islower()</code> - Returns true if all characters in <code>str</code> are lower case</paragraph></list-item><list-item><paragraph><code>str.isalpha()</code> - Returns true if all characters in <code>str</code> are from the alphabet</paragraph></list-item><list-item><paragraph><code>str.isdigit()</code> - Returns true if all characters in <code>str</code> are digits</paragraph></list-item><list-item><paragraph><code>str.isnumeric()</code> - Returns true if all characters in <code>str</code> are numeric</paragraph></list-item><list-item><paragraph><code>str.isspace()</code> - Returns true if all characters in <code>str</code>are whitespace characters (i.e. space, tab, or new line)</paragraph></list-item><list-item><paragraph><code>str.startswith()</code> - Returns true if <code>str</code> starts with the specified value</paragraph></list-item><list-item><paragraph><code>str.endswith()</code> - Returns true if <code>str</code> ends with the specified value</paragraph></list-item><list-item><paragraph><code>str.upper()</code> - Returns <code>str</code> with every character in upper case</paragraph></list-item><list-item><paragraph><code>str.lower()</code> - Returns <code>str</code> with every character in lower case</paragraph></list-item><list-item><paragraph><code>str.title()</code> - Returns <code>str</code> with the first character of each word in upper case</paragraph></list-item><list-item><paragraph><code>str.capitalize()</code> - Returns <code>str</code> with the first character uppercase and the rest lowercase</paragraph></list-item><list-item><paragraph><code>str.format()</code> - Returns <code>str</code> formatted as specified</paragraph></list-item><list-item><paragraph><code>str.find()</code> - Searches <code>str</code> for a specified value and returns the index at which it is first found (or -1 if it was not found)</paragraph></list-item><list-item><paragraph><code>str.index()</code> - like <code>str.find</code> but raises an error if the value is not found</paragraph></list-item><list-item><paragraph><code>str.rfind()</code> - Searches <code>str</code> for a specified value and returns the index at which it is last found (or -1 if it was not found)</paragraph></list-item><list-item><paragraph><code>str.count()</code> - Returns the number of times a specified value occurs in <code>str</code></paragraph></list-item><list-item><paragraph><code>str.split()</code> - Splits the string at the specified separator, and returns a list</paragraph></list-item><list-item><paragraph><code>str.strip()</code> - Returns <code>str</code> with whitespace stripped from both ends</paragraph></list-item><list-item><paragraph><code>str.lstrip()</code> - Returns <code>str</code> with whitespace stripped from the left end </paragraph></list-item><list-item><paragraph><code>str.rstrip()</code> - Returns <code>str</code> with whitespace stripped from the right end </paragraph></list-item><list-item><paragraph><code>str.replace()</code> - Returns <code>str</code> with a specified value replaced by a specified value</paragraph></list-item></list><paragraph/></document>"
    },
    {
      "id": 361922,
      "original_id": 331538,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Working with booleans",
      "index": 90,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Boolean objects are the simplest type of objects in Python, but often they play the most significant role in determining the path that a program takes (as you will see).</paragraph><paragraph>There are two boolean objects: <code>True</code> and <code>False</code>.  They most commonly appear as the result of the comparison operations we have seen for the other types, for example <code>3 &lt; 5</code> will evaluate to <code>True</code>; and <code>1 + 1 == 3</code> will evaluate to <code>False</code>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(3 &lt; 5) # True\nprint(1 + 1 == 3) # False</snippet-file></snippet><heading level=\"2\">Operating on booleans</heading><paragraph>You can build complex boolean expressions by combining simple boolean expressions with the logical operators <code>not</code>, <code>and</code>, and <code>or</code>:</paragraph><list style=\"bullet\"><list-item><paragraph><code>not x</code> is true if <code>x</code> is false, otherwise it is false.</paragraph></list-item><list-item><paragraph><code>x and y</code> is true if <code>x</code> is true and <code>y</code> is true, otherwise it is false.</paragraph></list-item><list-item><paragraph><code>x or y</code> is true if <code>x</code> is true or <code>y</code> is true or both, otherwise it is false</paragraph></list-item></list><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(not True) # False\nprint(not False) # True\nprint(not 3 &lt; 5) # False</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(True and True) # True\nprint(True and False) # False\nprint(False and True) # False\nprint(False and False) # False\nprint((3 &lt; 5) and (1 + 1 == 3)) # False</snippet-file></snippet><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(True or True) # True\nprint(True or False) # True\nprint(False or True) # True\nprint(False or False) # False\nprint((3 &lt; 5) or (1 + 1 == 3)) # True</snippet-file></snippet><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">guess = int(input(&#39;Enter a number: &#39;))\nprint(&#39;Your number is between 2 and 5?&#39;)\nprint(guess &gt; 2 and guess &lt; 5)</snippet-file></snippet><heading level=\"2\">Chaining comparisons</heading><paragraph>It is possible to combine comparisons into a chain:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 12\n# Rather than this\nprint(5 &lt; x and x &lt; 15)\n# You can use this\nprint(5 &lt; x &lt; 15)</snippet-file></snippet><heading level=\"2\">Short circuiting</heading><paragraph>The operators <code>or</code> and <code>and</code> are said to be <bold>short circuiting</bold> operators, because they only evaluate their second expression if they need to.</paragraph><paragraph>To illustrate, the program below does not generate an error, even though the variable <code>var</code> has not been defined. That&#39;s because Python doesn&#39;t even look at that variable. It doesn&#39;t need to, because the first <code>True</code> is enough to make the whole expression true.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(True or var)</snippet-file></snippet><paragraph>Similarly, the program below does not generate an error, even though the variable <code>var</code> has not been defined. That&#39;s because Python doesn&#39;t need to look at it - the first <code>False</code> is enough to make the whole expression false.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(False and var)</snippet-file></snippet><paragraph>If you swap the order in either case, you get an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(var and False)</snippet-file></snippet></document>"
    },
    {
      "id": 361923,
      "original_id": 331539,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Controlling program flow",
      "index": 91,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>In a simple program, Python executes the statements of the program one-by-one in <bold>sequence</bold>, from start to finish. However, you will often want your program to deviate from this:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Conditional execution</bold>. You might want to execute a certain statement only if a certain condition is true.</paragraph></list-item><list-item><paragraph><bold>Loops</bold>. You might want to loop through a block of code multiple times.</paragraph></list-item><list-item><paragraph><bold>Handling exceptions</bold>. You might want to run a block of code in a \"cautious\" way, so that if an error arises you can deal with it without your whole program stopping. </paragraph></list-item></list><paragraph>We will look at these one-by-one in the next few slides.</paragraph></document>"
    },
    {
      "id": 361924,
      "original_id": 331540,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "If statements",
      "index": 92,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You will often want Python to execute a certain statement only if a certain condition is true. For this you can use an <code>if</code> statement.</paragraph><paragraph>The following program uses an <code>if</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42:\n    print('That is my favourite number too!')\nprint('Good bye')</snippet-file></snippet><paragraph>If the user enters the number 42 then Python executes line 3, otherwise it skips line 3 and goes straight to line 4.</paragraph><heading level=\"2\">Syntax</heading><paragraph>The syntax for an if statement is:</paragraph><pre>if &lt;expression&gt;:\n    &lt;statement(s)&gt;\n</pre><paragraph>There are two parts to this statement - the part between <code>if</code> and <code>:</code> is called the <bold>header</bold> of the statement; the rest is called the <bold>body</bold> of the statement. The body of the statement is a <bold>block</bold> of statements.</paragraph><paragraph>Notice that the body contains one or more statements (as many as you like), so an <code>if</code> statement contains other statements as part of it. Because of this we call it a <bold>compound statement</bold>. </paragraph><paragraph>Also notice that the body is <bold>indented</bold>. This is required - if you don't use indentation then Python will issue an error: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\nprint('Hello')</snippet-file></snippet><paragraph>You can use either the tab character or the space character to create the indentation, but you must use the same character for each line, and the same number of those characters, otherwise Python will issue an error. Each of the following will cause an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n\tprint('Hello') # Indentation using a tab\n    print('Hello') # Indentation using 4 spaces - Error</snippet-file></snippet><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n    print('Hello') # Indentation using 4 spaces\n     print('Hello') # Indentation using 5 spaces - Error</snippet-file></snippet><callout type=\"info\">It is standard to use 4 spaces for indentation.  You can set this to be the default behaviour in the code editor for ed by selecting \"Soft tabs\" under the settings menu (icon: ⚙) in the top right of an editor window.</callout><paragraph>The statement block after <code>if</code> must contain at least one statement. It is common use the <code>pass</code> statement as a placeholder for unfinished code - it is a statement that does nothing:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n\tpass # There must be at least one statement in the body</snippet-file></snippet><heading level=\"2\">Conditions</heading><paragraph>Any boolean expression can be used between the <code>if</code> and the <code>:</code> :</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if True:\n    print('The condition is true')\nif 2 &gt; 1:\n    print('The condition is true')\nif 2 &gt; 1 and 2 &lt; 3:\n    print('The condition is true')\nif 1 &gt; 2 or 2 &gt; 1:\n    print('The condition is true')\nif 'cat' == 'cat':\n    print('The condition is true')</snippet-file></snippet><heading level=\"2\">Be careful with variables</heading><paragraph>If you introduce a variable inside the block of an if statement then that variable will only be defined if the block is executed. This might cause you some unexpected errors. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">if False:\n    x = 1\nprint(x) # Error - x does not have a value</snippet-file></snippet><paragraph>Since line 2 is not executed the variable <code>x</code> does not get assigned a value, so when it is used in line 3 Python issues an error.</paragraph><heading level=\"2\">Else clauses</heading><paragraph>You can add an <code>else</code> <bold>clause</bold> to an <code>if</code> statement, to tell Python what to do if the condition of the <code>if</code> statement is false:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42:\n    print('That is my favourite number too!')\nelse:\n\tprint('That is not my favourite number.')</snippet-file></snippet><heading level=\"2\">Grade example with multiple conditions</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># we assume the user gives a valid mark between 0 and 100 inclusive\nmark = float(input(\"Please give your mark: \"))\nif mark &lt; 50:\n    print(\"FL\")\nelse: # we know that mark is &gt;= 50\n    if mark &lt; 65:\n        print(\"PS\")\n    else: # we know that mark &gt;= 65\n        if mark &lt; 75:\n            print(\"CR\")\n        else: # we know that mark is &gt;=75\n            if mark &lt; 85:\n                print(\"DN\")\n            else: # mark is &gt;=85\n                print('HD')</snippet-file></snippet><heading level=\"2\">Elif clauses</heading><paragraph>You can add <code>elif</code> clauses (short for 'else if') to chain together multiple conditions:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42:\n    print('That is my favourite number too!')\nelif number == 21:\n    print('That is my second favourite number')\nelse:\n    print('That is neither of my favourite numbers.')</snippet-file></snippet><heading level=\"2\">Grade example with elif</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># we assume the user gives a valid mark between 0 and 100 inclusive\nmark = float(input(\"Please give your mark: \"))\nif mark &lt; 50:\n    print(\"FL\")\nelif mark &lt; 65: # we know that mark is &gt;= 50\n    print(\"PS\")\nelif mark &lt; 75: # we know that mark &gt;= 65\n    print(\"CR\")\nelif mark &lt; 85: # we know that mark is &gt;=75\n    print(\"DN\")\nelse: # mark is &gt;=85\n    print('HD')</snippet-file></snippet><heading level=\"2\">Abbreviations</heading><paragraph>If you only have one statement in an <code>if</code> body then you can put it on the same line as the header. The same applies to <code>elif</code> and <code>else</code>. Note that you still need the colon:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number == 42: print('That is my favourite number too!')\nelif number == 21: print('That is my second favourite number')\nelse: print('That is neither of my favourite numbers.')</snippet-file></snippet><heading level=\"2\">Nesting</heading><paragraph>Inside the block of an <code>if</code> statement you can have other <code>if</code> statements. These other <code>if</code> statements are said to be <bold>nested</bold>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">number = int(input('What is your favourite number? '))\nif number &gt; 10:\n    print('That is a big number')\n    if number &gt; 100: # This if statement is nested\n        print('It is bigger than 100')\nprint('Good bye')</snippet-file></snippet><heading level=\"2\">Breaking up complex expressions</heading><paragraph>Do not try to do too much in one go by building overly complex expressions; code should not be concise at the expense of readability.  Consider the following two pieces of code:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">if (is_admin and not admin_expired) or (is_person and (has_override or special_override)):\n    call_security()\nelse:\n    activate_launch()</snippet-file></snippet><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">if is_admin and not admin_expired:\n    call_security()\nelif is_person and has_override:\n    call_security()\nelif is_person and special_override:\n    call_security()\nelse:\n    activate_launch()</snippet-file></snippet><paragraph>The second piece of code is vastly more clear on the conditions required for a launch.</paragraph><heading level=\"2\">Ternary expression</heading><paragraph>Python has an expression whose value depends upon a condition.</paragraph><pre>&lt;expression&gt; if &lt;expression&gt; else &lt;expression&gt;\n</pre><paragraph>It is called a <bold>ternary</bold> expression, because it combines three expressions into one.</paragraph><paragraph>Here is an example of it being used to assign a value to a variable:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nparity = \"even\" if x % 2 == 0 else \"odd\"\nprint(parity)</snippet-file></snippet><paragraph>This is equivalent to using the following if statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nif x % 2 == 0:\n    parity = \"even\"\nelse:\n    parity = \"odd\"\nprint(parity)</snippet-file></snippet><paragraph>Notice that the ternary expression is an <italic>expression</italic>, not a statement. This means that it returns a value, which you can assign to variables or print:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nprint(\"even\" if x % 2 == 0 else \"odd\")</snippet-file></snippet><paragraph>An if statement is not an expression, so it doesn't return a value that you can assign to variables or print.:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 23\nprint(if x % 2 == 0: \"even\") # Error</snippet-file></snippet><paragraph>Be careful when using this ternary operator that your code does not become difficult to read. It is usually best to put parentheses around it.</paragraph><heading level=\"2\">Match Case statement</heading><paragraph>The Match Case is the Switch Case (from languages such as Java and C/C++) of Python which was introduced in Python <bold>3.10</bold>.</paragraph><paragraph>We have to first pass a parameter and then try to check with which case the parameter is getting satisfied. If we find a <bold>match</bold> we will execute some code and if there is no match, a <bold>default</bold> action will take place.</paragraph><paragraph>The Match Case statement is initialized with the <bold>match</bold> keyword followed by the parameter to be matched. Then various cases are defined using the <bold>case</bold> keyword and the value to match the parameter. The \"<bold>_</bold>\" is the <bold>wildcard</bold> character that runs when all the cases fail to match the parameter value.</paragraph><heading level=\"2\">Syntax</heading><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">match parameter:\n    case value1:\n        # code for value 1\n    case value2:\n        # code for value 2\n    .\n    .\n    .\n    case valueN:\n        # code for value N\n    case _:\n        # default code block</snippet-file></snippet><heading level=\"2\">Example</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># new from Python 3.10\n# The program asks for the day number and displays the corresponding day name\ndayNumber = int(input(\"Give a day number: \")) \nmatch dayNumber:\n    case 1:\n        print(\"Sunday\")\n    case 2:\n        print(\"Monday\")\n    case 3:\n        print(\"Tuesday\")\n    case 4:\n        print(\"Wednesday\")\n    case 5:\n        print(\"Thursday\")\n    case 6:\n        print(\"Friday\")\n    case 7:\n        print(\"Saturday\")\n    case _:\n        print(\"Error. You provided an incorrect day number\")</snippet-file></snippet></document>"
    },
    {
      "id": 361925,
      "original_id": 331541,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "While statements",
      "index": 93,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Sometimes you might want to repeat a set of statements for as long as a certain condition is true. For this you can use a <code>while</code> statement.</paragraph><paragraph>Here's a program that uses a <code>while</code> statement to print the first 10 positive integers:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">n = 1\nwhile n &lt;= 10:\n    print(n)\n    n = n + 1\nprint('Finished')</snippet-file></snippet><paragraph>When Python gets to line 2 it evaluates the condition after <code>while</code>. If the condition is true then it executes the statement block below, in lines 3-4, and then returns to line 2 again. If the condition is false then it skips the block and goes straight to line 5.</paragraph><paragraph>You could achieve the same effect by using 10 different <code>print</code> statements, but using a <code>while</code> statement is more elegant and less repetitive. And if you don't know in advance how many integers to print, for example if you want to ask the user, then it might be impossible to use just <code>print</code> statements.</paragraph><heading level=\"2\">The while block</heading><paragraph>The <code>while</code> block can contain any statement(s) you like, including <code>if</code> statements and other <code>while</code> statements. For example, here's a program that prints the even numbers between 1 and 10. It uses an <code>if</code> statement inside the <code>while</code> loop:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">n = 1\nwhile n &lt;= 10:\n    if n % 2 == 0:\n        print(n)\n    n = n + 1\nprint('Finished')</snippet-file></snippet><paragraph>Here is an example of a <code>while</code> loop used to iterate through a string, counting the number of times <code>'e'</code> occurs in it.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">string = 'The quick brown fox jumped over the lazy dog'\noccurrences = 0\ni = 0\nwhile i &lt; len(string):\n    if string[i] == 'e':\n        occurrences += 1\n    i += 1\nprint(\"The letter 'e' occurs\", occurrences, \"times\")</snippet-file></snippet><heading level=\"2\">Continuing</heading><paragraph>You can use a <code>continue</code> statement to skip to the next iteration of a loop:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">i = 0\nwhile i &lt; 10:\n    i += 1\n    if i == 5:\n\t    continue\n    print(i)\nprint('Finished')</snippet-file></snippet><paragraph>When the value of <code>i</code> gets to 5 the <code>continue</code> statement is executed, and Python jumps directly back to line 2 and continues. The number 5 does not get printed, but 6 - 10 do.</paragraph><paragraph>Why might you use <code>continue</code>? It can help to keep your code from getting to many levels of indentation. We will see examples of this.</paragraph><heading level=\"2\">Breaking</heading><paragraph>You can use a <code>break</code> statement to break out of a loop entirely:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">i = 0\nwhile i &lt; 10:\n    i += 1\n    if i == 5:\n\t    break\n    print(i)\nprint('Finished')</snippet-file></snippet><paragraph>When the value of <code>i</code> gets to 5 the <code>break</code> statement is executed, and Python jumps directly to line 7. The number 5 does not get printed, and nor do 6 - 10.</paragraph><paragraph>Note that if the loop is nested inside another loop, the <code>break</code> statement terminates only the inner loop.</paragraph><heading level=\"2\">Keeping a program running</heading><paragraph>When you run the program below is stops after it gets and prints a name. To run it again you have to click 'Run' again:  </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">name = input('What is your name? ')\nprint('Hello', name)</snippet-file></snippet><paragraph>It can be convenient to have the program keep running - getting it to start again automatically after it does its thing. You can get it to do this by adding a <code>while</code> loop, with a condition that always evaluates to true:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">while True:\n    name = input('What is your name? ')\n    print('Hello', name)</snippet-file></snippet><paragraph>Now the program will keep running, until you click 'Stop'.</paragraph><paragraph>If you want to get a bit fancier, you could get your program to stop when the user enters a certain value, such as 'q'. Remember to let the user know that they can do this:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">while True:\n    name = input('What is your name? (Enter q to quit) ')\n    if name == 'q':\n        break\n    print('Hello', name)</snippet-file></snippet><heading level=\"2\">Nested while loops example</heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Write a program to display the following:\r\n# * * * * * \r\n# * * * * *\r\n# * * * * *\r\n\r\ni = 1\r\nwhile i &lt;= 3:\r\n    j = 1\r\n    while j &lt;= 5:\r\n        print('*',end=' ')\r\n        j = j + 1\r\n    print()\r\n    i = i + 1</snippet-file></snippet></document>"
    },
    {
      "id": 361926,
      "original_id": 331542,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Handling exceptions",
      "index": 94,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>If your code interacts with the outside world, you may encounter unexpected circumstances. Perhaps a file that you are trying to open doesn't exist, or when you try to save the user's data you find that the disk is full, or perhaps the user enters a non integer value when you are expecting an integer, or maybe you divided by zero.</paragraph><paragraph><bold>Exceptions</bold> are a mechanism for dealing with the unwanted or unexpected situations.</paragraph><paragraph>The approach in Python is known as <bold>structured exception handling</bold>. This means that if Python encounters an exception in a block of code, it will search for an exception handler enclosing that block. If none exists, it will look for an exception handler enclosing that outer block, and so on.</paragraph><paragraph>It is important to understand that exception handling should be used to handle exceptions that are recoverable. If your program cannot handle the exception or recover from it, it should not even try. Instead it should let the exception terminate your program so the user can deal with it instead. For many cases of exceptions, there is no remedy.</paragraph><heading level=\"2\">Try and except</heading><paragraph>You can handle exceptions by using a <code>try</code> statement.</paragraph><paragraph>Consider the following program, which asks the user to enter a number and then returns the square of that number:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">num = input(\"Please enter a number: \")\nresult = float(num) ** 2\nprint(\"The square of the number is\", result)</snippet-file></snippet><paragraph>If the user enters a string of letters instead of a number then an error occurs and the program very ungracefully ends.</paragraph><paragraph>Python complained with a <code>ValueError</code>. To handle this, we'd write a <code>try ...except ...</code> block around the code that could potentially raise an exception.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">num = input(\"Please enter a number: \")\ntry:\n    result = float(num) ** 2\n    print(\"The square of the number is\", result)\nexcept:\n    print(\"You did not enter a number.\")</snippet-file></snippet><paragraph>In the above code, when control reaches line 2, an exception is raised. Python finds the nearest exception handler and moves control to line 3, which proceeds into the block at line 4. If there was no exception on line 2, then the code in the <code>except</code> block would not be executed.</paragraph><paragraph>If you don't want to do anything with the exception then you can use the <code>pass</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">num = input(\"Please enter a number: \")\ntry:\n    result = float(num) ** 2\n    print(\"The square of the number is\", result)\nexcept:\n    pass</snippet-file></snippet><paragraph>When an exception occurs, there is information about the exception contained in a special Exception object. You can assign that object to a variable and then display that information to the user:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">try:\n\tint('string')\nexcept Exception as err:\n\tprint('Exeption:', err)</snippet-file></snippet><heading level=\"2\">Else</heading><paragraph>If you have some code that you want to execute only if the <code>try</code> block succeeds then you can add an <code>else</code> clause:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = 'Hello'\ntry:\n    x = int(x)\nexcept:\n    print('The conversion was not successful.')\nelse:\n    print('The conversion was successful.')</snippet-file></snippet><paragraph/></document>"
    },
    {
      "id": 361927,
      "original_id": 331543,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Working with files",
      "index": 95,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>So far we have seen programs that interact with the external environment via the <code>input()</code> and <code>print()</code> functions. Another way they can interact is by reading from and writing to files. This is very simple in Python, which is why Python is a popular tool for working with files.</paragraph><paragraph>This is what you will typically want to do:</paragraph><list style=\"bullet\"><list-item><paragraph>Open the file</paragraph></list-item><list-item><paragraph>Read from the file, or write to the file</paragraph></list-item><list-item><paragraph>Close the file</paragraph></list-item></list><heading level=\"2\">Opening a file</heading><paragraph>To work with a file you must first open it. You do so using the <code>open()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">f = open('MyData', 'w')</snippet-file></snippet><paragraph>The function expects a <bold>file</bold> as the first argument. This can be given as an absolute or relative filename. If given as a relative filename, it is relative to the directory that Python was executed from - in Ed this is always the same directory as the program.</paragraph><paragraph>You can also supply a <bold>mode</bold> as the second argument. This indicates whether the file is to be opened for reading (i.e. input) or writing (i.e. output). If you don't specify the mode, Python assumes that you want to open the file for reading. </paragraph><paragraph>The available options for the mode are:</paragraph><list style=\"bullet\"><list-item><paragraph><code>'r'</code> -  Open the file for <bold>reading</bold>. <code>open</code> will throw an exception if the file does not exist.</paragraph></list-item><list-item><paragraph><code>'w'</code> - Open the file for <bold>writing</bold>. If the file <bold>exists</bold>, the contents are completely <bold>overwritten</bold>. If the file does not exist, it will be created.</paragraph></list-item><list-item><paragraph><code>'x'</code> - Open the file for <bold>writing</bold>. If the file already <bold>exists</bold> this will <bold>throw an exception</bold>. If the file does not exist, it will be created.</paragraph></list-item><list-item><paragraph><code>'a'</code> - Open the file for <bold>appending</bold>. The file is opened at the end and any writes to the file will append to the end. If the file does not exist it is created.  This option is  useful for adding information to a file - for example a log file.</paragraph></list-item></list><paragraph>The <code>open()</code> function returns a file object (also called a <bold>file handle</bold>) that represents the file that you have opened. It is this object that allows you to perform operations on the underlying file itself.</paragraph><heading level=\"2\">Reading from and writing to a file</heading><paragraph>The <code>read()</code> method of a file object returns a string that contains the entire contents of the file. The <code>write()</code> method takes a string and adds it to the file.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Open a file for writing\nfile = open('myfile', 'w')\n\n# Write to the file\n# If you want a newline anywhere you have to add it, using \\n\nfile.write('Line 1: Some text.\\n')\n\n# Write some more to the file\nfile.write('Line 2: Some more text.')\n\n# Now open the file for reading\nfile = open('myfile', 'r')\n\n# Print the contents\nprint(file.read())</snippet-file></snippet><heading level=\"2\">Closing a file</heading><paragraph>You can close a file by using its <code>close()</code> method. It is important to close a file after you are done working with it, to free up resources back to the system. A program can only have a limited number of files open while it is running. If a running program reaches this limit, it will receive a \"Too many open files\" error when it attempts to open more files. </paragraph><paragraph>So the program above should look like this instead:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">file = open('myfile', 'w')\nfile.write('Line 1: Some text.\\n')\nfile.write('Line 2: Some more text.')\nfile.close()\n\nfile = open('myfile', 'r')\nprint(file.read())\nfile.close()</snippet-file></snippet><heading level=\"2\">Using a <code>with</code> block</heading><paragraph>It's a good idea to work with a file inside a <code>with</code> statement. This ensures that the file is always closed after use, even if an error occurs inside your program. As soon as control exits the <code>with</code> statement the file will be automatically closed.</paragraph><paragraph>Here is the previous example written with <code>with</code> statements:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Open a file for writing\n# The file is automatically closed after the with statement\nwith open('myfile', 'w') as file:\n    file.write('Line 1: Some text.\\n')\n    file.write('Line 2: Some more text.')\n\n# Open the file again for reading\n# The file is automatically closed after the with statement\nwith open('myfile', 'r') as file:\n    print(file.read())</snippet-file></snippet><heading level=\"2\">See <link href=\"https://edstem.org/au/courses/16645/workspaces/psHaYvoThIO0nXiOK4VZEqEtMqpCcqvP\">Files Example</link> in Ed Workspaces</heading></document>"
    },
    {
      "id": 361928,
      "original_id": 326083,
      "lesson_id": 53299,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Further reading",
      "index": 97,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:36.564438+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com<break/></paragraph></list-item><list-item><paragraph>Numbers in Python<break/><link href=\"https://realpython.com/python-numbers/\">https://realpython.com/python-numbers/</link></paragraph></list-item></list></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "attempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 1 - Python Programming Fundamentals",
  "tutorial_regex": "",
  "type": "general",
  "updated_at": null,
  "user_id": 93339
}