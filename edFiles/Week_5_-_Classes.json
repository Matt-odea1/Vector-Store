{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:39.241589+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53316,
  "index": 11,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11528,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 50768,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": false,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 15,
  "slide_marks_summary": [
    {
      "id": 362001,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 374419,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 374426,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362002,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362003,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362004,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362006,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362005,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 374763,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362007,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 374437,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 374438,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362008,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362009,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362010,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 362001,
      "original_id": 343297,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Classes",
      "index": 8,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>There is an important and powerful technique, and another cornerstone of good programming - defining and using <bold>classes</bold>.</paragraph><paragraph>You have learned about Python objects and their attributes, and you have been working with them a lot. You have also learned that objects are of different types, and that the type of an object determines what attributes it has, and thus what you can do with it.</paragraph><paragraph>You might already have found yourself wishing there were other types. Wouldn&#39;t it be nice, for example, to have a &#34;<bold>passage</bold>&#34; type, for large slabs of text, with <bold>methods</bold> such as <code>num_paragraphs()</code>, <code>num_sentences()</code>, <code>num_words()</code>, <code>average_word_length()</code>, and so on?</paragraph><paragraph>Well, you can actually define your <bold>own</bold> types of objects, and give them whatever methods you like. Brilliant!</paragraph><paragraph>You will learn how to do this this week.</paragraph></document>"
    },
    {
      "id": 374419,
      "original_id": null,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "What is OOP?",
      "index": 69,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-25T14:10:32.199272+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>OOP stands for <bold>O</bold>bject-<bold>O</bold>riented <bold>P</bold>rogramming.</paragraph><paragraph><bold>Procedural</bold> programming is about writing <bold>functions</bold> that perform operations on the data, while <bold>object-oriented programming</bold> is about creating <bold>objects</bold> that contain both <bold>data</bold> and <bold>methods</bold>.</paragraph><paragraph>Object-oriented programming (OOP) has several advantages over procedural programming:</paragraph><list style=\"unordered\"><list-item><paragraph>OOP provides a clear structure of the programs</paragraph></list-item><list-item><paragraph>OOP makes the code easier to maintain and modify</paragraph></list-item><list-item><paragraph>OOP makes it possible to create full reusable applications with less code and shorter development time</paragraph></list-item></list><paragraph>Python is an object oriented programming language.</paragraph></document>"
    },
    {
      "id": 374426,
      "original_id": null,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "What are Classes and Objects?",
      "index": 70,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-25T16:00:12.484269+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Classes and objects are the two main aspects of object-oriented programming.</paragraph><paragraph>Look at the following two examples to see the difference between <bold>class</bold> and <bold>objects</bold>:</paragraph><figure><image src=\"https://static.au.edusercontent.com/files/MXjl0SlnYymRM9QGoWwsUnLL\" width=\"332\" height=\"158\"/></figure><figure><image src=\"https://static.au.edusercontent.com/files/tR5095chz053o4szFHwIhcs3\" width=\"334\" height=\"160\"/></figure><paragraph>Therefore, a <bold>class</bold> is a <bold>template</bold> for objects, and an <bold>object</bold> is an <bold>instance</bold> of a class.</paragraph><paragraph>When the individual objects are created, they <bold>inherit</bold> all the <bold>data variables</bold> and <bold>methods</bold> from the class.</paragraph></document>"
    },
    {
      "id": 362002,
      "original_id": 343305,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Defining classes and objects",
      "index": 71,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You have been working extensively with objects of various types: integers, strings, lists, functions, and so on. Here are some examples:</paragraph><list style=\"bullet\"><list-item><paragraph>The integer <code>10</code> is an object of type <code>int</code></paragraph></list-item><list-item><paragraph>The string <code>'Hello'</code> is an object of type <code>str</code></paragraph></list-item><list-item><paragraph>The list <code>[1, 2, 3]</code> is an object of type <code>list</code></paragraph></list-item><list-item><paragraph>The function <code>lambda x: x + 10</code> is an object of type <code>function</code></paragraph></list-item></list><paragraph>You can confirm these for yourself using the <code>type()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(type(10))\nprint(type('Hello'))\nprint(type([1, 2, 3]))\nprint(type(lambda x: x + 10))</snippet-file></snippet><paragraph><bold>Types</bold> are also called <bold>classes</bold>. That is why you see the word \"<bold>class</bold>\" in the results when you run the code above. And <bold>objects</bold> are also called <bold>instances</bold> - they are instances of the class that is their type. So we have two equivalent ways of saying the same thing:</paragraph><list style=\"bullet\"><list-item><paragraph>The integer <code>10</code> is an <bold>object of type</bold> <code>int</code></paragraph></list-item><list-item><paragraph>The integer <code>10</code> is an <bold>instance of the class</bold> <code>int</code></paragraph></list-item></list><paragraph>You can actually define your <bold>own classes</bold>, and create instances of those classes, and this is a very useful thing to do. You specify the <bold>attributes</bold> (that is, <bold>data</bold> and <bold>methods</bold>) that each object of that class should have.</paragraph><paragraph>A <bold>class</bold> is a \"<bold>blueprint</bold>\" for creating <bold>objects</bold>.</paragraph><heading level=\"2\">Defining a class</heading><paragraph>You can define a class using a <code>class</code> statement, which has the following form:</paragraph><pre>class &lt;name&gt;:\n    &lt;statements&gt;</pre><paragraph>For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass</snippet-file></snippet><paragraph>It is conventional to use CapitalCase when naming classes (sometimes called PascalCase). You need to have at least one statement in the body of the class definition - we have just used <code>pass</code> above.</paragraph><paragraph/><heading level=\"2\">Creating instances</heading><paragraph>Once you have defined a class you can create instances of it. You do so by calling the class as if it were a function. In the following code we create two instances of the class Person and assign them to variables <code>p1</code> and <code>p2</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass\n\np1 = Person()\np2 = Person()</snippet-file></snippet><paragraph>You can confirm that p1 and p2 are instances of this class by using <code>type()</code> or <code>isinstance()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass\n\np1 = Person()\np2 = Person()\nprint(type(p1), type(p2))\nprint(isinstance(p1, Person), isinstance(p2, Person))</snippet-file></snippet><paragraph/><heading level=\"2\">Setting and getting attributes</heading><paragraph>Having created these instances you can give them attributes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    pass\n\np1 = Person()\np2 = Person()\n\np1.first_name = 'Brad'\np1.last_name = 'Pitt'\np1.full_name = 'Brad Pitt'\np2.first_name = 'Angelina'\np2.last_name = 'Jolie'\np2.full_name = 'Angelina Jolie'\n\nprint(p1.first_name, p1.last_name, p1.full_name)\nprint(p2.first_name, p2.last_name, p2.full_name)</snippet-file></snippet><paragraph>The examples above are classes and objects in their simplest form, and are not really useful in real life applications.</paragraph><paragraph>You will typically want to set attributes of an object as soon as you create it, so there is a special way to do this, using an <code>__init__()</code> method (called <bold>constructor</bold>).</paragraph><paragraph/><heading level=\"2\">Defining an <code>__init__()</code> method</heading><paragraph>You can specify what happens when an instance is created by defining a special method <code>__init__()</code> in the class definition. The first parameter must always be named <code>self</code> and represents the <bold>newly created object</bold>. Any other parameters to the method can be added in the usual way.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.full_name = first_name + ' ' + last_name\n\np1 = Person('Brad', 'Pitt')\np2 = Person('Angelina', 'Jolie')\nprint(p1.first_name, p1.last_name, p1.full_name)\nprint(p2.first_name, p2.last_name, p2.full_name)</snippet-file></snippet><paragraph>In the code above, arguments are passed to the class's <code>__init__()</code> method. The <code>self</code> argument is automatically provided by Python. The code in the method adds attributes (<code>first_name</code>, <code>last_name</code>, and <code>full_name</code>) to the newly created object.</paragraph><paragraph/><heading level=\"2\">Defining other methods</heading><paragraph>You can also define methods in the class block, which can then be called on an object created from the class, as methods of the object. The functions you define must have <code>self</code> as the first parameter and Python will automatically set it to the object on which the method is called.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n    \n    def full_name(self): # Define a method called \"full_name\"\n        return self.first_name + ' ' + self.last_name\n    \n    def reverse_name(self): # Define a method called \"reverse_name\"\n        return self.last_name + ', ' + self.first_name\n\nperson = Person('Brad', 'Pitt')\nprint(person.full_name())\nprint(person.reverse_name())</snippet-file></snippet><paragraph/><heading level=\"2\">Examples of class definitions</heading><heading level=\"2\">Class <code>Dog</code></heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Dog():\n    def __init__(self, b, n, w):\n        self.breed = b\n        self.name = n\n        self.weight = w\n    \n    def speak(self):\n        print(\"Woof! woof!\")\n\ngood_dog = Dog(\"Boxer\",\"Jemma\",8.9)\ngood_dog.speak()</snippet-file></snippet><paragraph/><heading level=\"2\">Class <code>Cup</code></heading><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Cup():\n    def __init__(self, own, con):\n        self.owner = own\n        self.content = con\n        \n    def displayCup(self):\n        print(f'Owner: {self.owner}')\n        print(f'Content: {self.content}')\n    \n    def emptyCup(self):\n        self.content = \"Empty\"\n\n    def changeOwner(self,newOwner):\n        self.owner=newOwner\n\nc1 = Cup(\"Rchid\",\"Milk\")\nc2 = Cup(\"John\",\"Tea\")\n\nc1.displayCup()\nc2.displayCup()\n\nc1.emptyCup()\nc1.displayCup()\n\nc2.changeOwner(\"Helen\")\nc2.displayCup()</snippet-file></snippet></document>"
    },
    {
      "id": 362003,
      "original_id": 343306,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Other special methods",
      "index": 72,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>The <code>__init__()</code> method is an example of a <bold>special instance method.</bold> It is also called a <bold>dunder method</bold> (<bold>d</bold>ouble <bold>under</bold>score <bold>method</bold>). </paragraph><paragraph>You do not need to call it explicitly on an object, because Python calls it automatically whenever it needs to create the object, that is, an instance of the class.</paragraph><paragraph>There are many other special instance methods that you can define. We will look at some examples of the most helpful ones.</paragraph><paragraph/><heading level=\"2\"><code>__str__()</code></heading><paragraph>Consider what happens when you print an instance of the Person class:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n        \nperson = Person('Brad', 'Pitt')\nprint(person.__str__())\n# print(person) # same effect as print(person.__str__())</snippet-file></snippet><paragraph>It is not very informative - when Python prints the instance, it converts the instance into a string, and the default way it does so is just to give some general information.</paragraph><paragraph>You can override this default behaviour and specify what string to produce. You do this by adding another special method, <code>__str__()</code>.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n        \n    def __str__(self):\n\t    return 'Person: ' + self.first_name + ' ' + self.last_name\n        \nperson = Person('Brad', 'Pitt')\nprint(person)</snippet-file></snippet><paragraph>Now you get a more informative result when you print a person.</paragraph><paragraph/><heading level=\"2\"><code>__eq__()</code></heading><paragraph>You can define how to compare two instances of your class for equality.</paragraph><paragraph>Let's add <code>age</code> to the class <code>Person</code> and add an <code>__eq__()</code> special method, which checks whether two people are <bold>equal</bold> if they have the <bold>same</bold> age:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    \n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __eq__(self, other):\n        if isinstance(other, Person):\n            return self.age == other.age\n        return False\n        \njohn = Person('John', 'Citizen', 25)\njane = Person('Jane', 'Doe', 25)\nmary = Person('Mary', 'Smith', 27)\nprint(john == mary)  # False\nprint(john == jane)  # True</snippet-file></snippet><paragraph/><paragraph>Let's switch the example to a \"<bold>Square</bold>\" class. Let's define a class of squares, with a <code>side</code> attribute and an <code>area()</code> method.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n        \n    def area(self):\n        return self.side ** 2\n\nsq = Square(10)\nprint(sq.area())</snippet-file></snippet><paragraph>Let's add an <code>__eq__()</code> special method, which checks whether two squares are equal. Let's consider them equal when they have the same side length. Notice that we need to have a second parameter for the method, to represent the object being compared with.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n\n    def __eq__(self, other):\n        return self.side == other.side\n\n    def area(self):\n        return self.side ** 2\n\nsq1 = Square(10)\nsq2 = Square(11)\nsq3 = Square(10)\nprint(sq1 == sq2) # False\nprint(sq1 != sq3) # False\nprint(sq1 == sq3) # True</snippet-file></snippet><paragraph/><heading level=\"2\"><code>__ne__()</code>, <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, and <code>__ge__()</code> </heading><paragraph>Similarly, we can specify how to compare two squares using <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n    def __eq__(self, other):\n        return self.side == other.side\n    def __ne__(self, other):\n        return self.side != other.side\t\n    def __lt__(self, other):\n        return self.side &lt; other.side\n    def __le__(self, other):\n        return self.side &lt;= other.side\n    def __gt__(self, other):\n        return self.side &gt; other.side\n    def __ge__(self, other):\n        return self.side &gt;= other.side\n\nsq1 = Square(10)\nsq2 = Square(11)\nprint(sq1 != sq2) # True\nprint(sq1 &lt; sq2)  # True \nprint(sq1 &lt;= sq2) # True\nprint(sq1 &gt; sq2)  # False\nprint(sq1 &gt;= sq2) # False</snippet-file></snippet><paragraph/><heading level=\"2\">Others</heading><paragraph>There are many other special methods that you can define, to specify how the objects of your class should behave when operated on, including:</paragraph><pre><underline>Operator</underline>      <underline>Method</underline>\n+             object.__add__(self, other)\n-             object.__sub__(self, other)\n*             object.__mul__(self, other)\n/             object.__div__(self, other)\n%             object.__mod__(self, other)\n**            object.__pow__(self, other)\n&amp;             object.__and__(self, other)\n^             object.__xor__(self, other)\n|             object.__or__(self, other)\n+=            object.__iadd__(self, other) (\"i\" for in place)\n-=            object.__isub__(self, other)\n*=            object.__imul__(self, other)\n/=            object.__idiv__(self, other)\n%=            object.__imod__(self, other)\n**=           object.__ipow__(self, other)\n-             object.__neg__(self)\n+             object.__pos__(self)\nabs()         object.__abs__(self)\nint()         object.__int__(self)\nfloat()       object.__float__(self)\n</pre></document>"
    },
    {
      "id": 362004,
      "original_id": 343307,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Class attributes",
      "index": 158,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph/><paragraph>The attributes you have defined so far are called <bold>instance attributes</bold> - they are attributes of instances of the class, not of the class itself.</paragraph><paragraph>Sometimes you might want to add attributes to a class itself, rather than to instances of the class. These are called <bold>class attributes</bold>.</paragraph><paragraph>If the attribute is a <bold>method</bold> then you can make it a <bold>class method</bold> by omitting the <code><bold>self</bold></code> parameter from the method definition.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n    def __init__(self, side):\n        self.side = side\n\n    def area(self): # self parameter - this is an instance method\n        return self.side ** 2\n\n    def calculate_area(side): # No self parameter - this is a class method \n        return side ** 2\n\nsq = Square(10) # Create an instance\nprint(sq.area()) # Invoke an instance method\nprint(Square.calculate_area(20)) # Invoke a class method</snippet-file></snippet><paragraph>The method can be invoked by using the <bold>class name</bold> and the method name. It provides a way of organising methods that are related to the class, but do not belong on the instances themselves.</paragraph><paragraph>If the attribute is a <bold>data</bold> then you can make it a <bold>class data</bold> by defining it outside the constructor. It will be then shared by all class instances. it represents a characteristic of the entire class rather than individual objects. Class fields have a single value shared by all instances. Hence changing the value impacts all instances equally as shown in the example below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Square:\n\n    nbSquares = 0\n    \n    def __init__(self, side):\n        self.side = side\n        Square.nbSquares += 1\n\n    def area(self): # self parameter - this is an instance method\n        return self.side ** 2\n\n    def calculate_area(side): # No self parameter - this is a class method \n        return side ** 2\n\nsq = Square(10) # Create an instance\nprint(sq.area()) # Invoke an instance method\nprint(Square.calculate_area(20)) # Invoke a class method\nprint(Square.nbSquares) # Outputs 1\nprint(sq.nbSquares) # Outputs 1\nsq2 = Square(10) # Create another instance\nprint(Square.nbSquares) # Outputs 2</snippet-file></snippet></document>"
    },
    {
      "id": 362006,
      "original_id": 343331,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Illustrative example 1 - Length class",
      "index": 159,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You might find yourself working with lengths. There are many different units in which lengths are measured, including:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>SI (Système International) units</bold>: mm, cm, m, km</paragraph></list-item><list-item><paragraph><bold>Imperial/US Customary units</bold>: in, ft, yd, mi</paragraph></list-item></list><paragraph>Let&#39;s define a class <code>Length</code> to help us work with lengths of various units. Let&#39;s define it so that:</paragraph><list style=\"bullet\"><list-item><paragraph>We can create a <code>Length</code> object by supplying a number and a unit (let&#39;s stick to the units above).</paragraph></list-item><list-item><paragraph>We can get the length of a length object in whatever units we like.</paragraph></list-item><list-item><paragraph>We can add a length object to another.</paragraph></list-item><list-item><paragraph>We can print a length object in an informative way.</paragraph></list-item></list><paragraph>We&#39;ll need the following conversions:</paragraph><list style=\"bullet\"><list-item><paragraph>1mm = 1/000m</paragraph></list-item><list-item><paragraph>1cm = 1/100m</paragraph></list-item><list-item><paragraph>1km = 1000m</paragraph></list-item><list-item><paragraph>1yd = 0.9144m</paragraph></list-item><list-item><paragraph>1 ft = 1/3yd </paragraph></list-item><list-item><paragraph>1 in = 1/12ft</paragraph></list-item><list-item><paragraph>1 mi = 1760yd</paragraph></list-item></list><paragraph>Here&#39;s one way to define the class:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">class Length:\n    &#34;&#34;&#34;A class to help work with lengths in various units&#34;&#34;&#34;\n    \n    def __init__(self, number, unit=&#39;m&#39;):\n        # Convert and store length as self.metres\n        # SI units\n        if unit == &#39;mm&#39;: self.metres = number/1000\n        elif unit == &#39;cm&#39;: self.metres = number/100\n        elif unit == &#39;m&#39;: self.metres = number\n        elif unit == &#39;km&#39;: self.metres = number*1000\n        # Imperial/US Customary units\n        elif unit == &#39;in&#39;: self.metres = (number/36)*0.9144\n        elif unit == &#39;ft&#39;: self.metres = (number/3)*0.9144\n        elif unit == &#39;yd&#39;: self.metres = (number)*0.9144\n        elif unit == &#39;mi&#39;: self.metres = (number*1760)*0.9144\n        # Unit not recognised\n        else: raise Exception(&#34;Unit not recognised&#34;)\n    \n    def to(self, unit, dp=None):\n        # Convert self.metres to unit\n        # SI units\n        if unit == &#39;mm&#39;: number = self.metres*1000\n        elif unit == &#39;cm&#39;: number = self.metres*100\n        elif unit == &#39;m&#39;: number = self.metres\n        elif unit == &#39;km&#39;: number = self.metres/1000\n        # Imperial/US Customary units\n        elif unit == &#39;in&#39;: number = (self.metres*36)/0.9144\n        elif unit == &#39;ft&#39;: number = (self.metres*3)/0.9144\n        elif unit == &#39;yd&#39;: number = (self.metres)/0.9144\n        elif unit == &#39;mi&#39;: number = (self.metres/1760)/0.9144\n        else: raise Exception(&#34;Unit not recognised&#34;)\n        if dp is not None: number = round(number, dp)\n        return f&#34;{number}{unit}&#34;\n    \n    def __str__(self):\n        return f&#34;Length: {self.metres}m&#34;\n    \n    def __add__(self, other):\n        return Length(self.metres + other.metres)\n\n# Try it out\nprint(Length(6, &#39;ft&#39;).to(&#39;cm&#39;))\nprint(Length(6, &#39;ft&#39;).to(&#39;cm&#39;, 1))\nprint(Length(6, &#39;ft&#39;).to(&#39;cm&#39;, 0))\nprint(Length(172.5, &#39;cm&#39;).to(&#39;ft&#39;))\nprint(Length(6, &#39;ft&#39;) + Length(2.5, &#39;m&#39;))\nprint((Length(6, &#39;ft&#39;) + Length(2.5, &#39;m&#39;)).to(&#39;yd&#39;))</snippet-file></snippet></document>"
    },
    {
      "id": 362005,
      "original_id": 343308,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Attributes can be class instances",
      "index": 160,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>There is nothing stopping you from having an attribute of an object being an instance of another class, or perhaps even the same class.</paragraph><paragraph>Consider the following modified definition of the <code>Person</code> class:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name, boss = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.boss = boss\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n        \n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name</snippet-file></snippet><paragraph>We have added a new attribute, <code>boss</code>, which is set when a person is created. It can be set to any object. That means it can be set to a person. </paragraph><paragraph>Here is an example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name, boss = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.boss = boss\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nbasil = Person('Basil', 'Fawlty')\npolly = Person('Polly', 'Sherman', basil) # Set Polly's boss to the Person object basil\nprint(polly.boss.full_name())</snippet-file></snippet><paragraph>Notice that we can print the full name of polly's boss using the expression <code>polly.boss.full_name()</code>.</paragraph><paragraph>You can also write the <code>__str__()</code> special method to cater for that as shown below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name, boss = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.boss = boss\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\n    def __str__(self):\n        if self.boss == None:\n            return self.first_name + \" \" + self.last_name\n        return self.first_name + \" \" + self.last_name + \" \" + str(self.boss)\n   # or return self.first_name + \" \" + self.last_name + \" \" + self.boss.__str__()\n\nbasil = Person('Basil', 'Fawlty')\npolly = Person('Polly', 'Sherman', basil) # Set Polly's boss to the Person object basil\nprint(basil) # outputs Basil Fawlty\nprint(polly) # outputs Polly Sherman Basil Fawlty</snippet-file></snippet></document>"
    },
    {
      "id": 374763,
      "original_id": null,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Illustrative example 2 - Course class",
      "index": 161,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-26T16:19:45.160803+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Here is another example of a <bold>Course</bold> class that has <bold>Textbook</bold> and <bold>Instructor</bold> as instance attributes:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Textbook:\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\n    def __str__(self):\n        return f\"{self.title} by {self.author}\"\n\nclass Instructor:\n    def __init__(self, name, department):\n        self.name = name\n        self.department = department\n\n    def __str__(self):\n        return f\"{self.name} from {self.department} department\"\n\nclass Course:\n    def __init__(self, course_code, course_name, textbook, instructor):\n        self.course_code = course_code\n        self.course_name = course_name\n        self.textbook = textbook\n        self.instructor = instructor\n\n    def __str__(self):\n        return f\"Course Code: {self.course_code}\\nCourse Name: {self.course_name}\\nTextbook: {self.textbook}\\nInstructor: {self.instructor}\"\n\n# Example usage:\n\n# Creating instances of Textbook and Instructor\ntextbook1 = Textbook(\"Python Programming\", \"John Smith\", \"978-0134852045\")\ninstructor1 = Instructor(\"Jane Doe\", \"Computer Science\")\n\n# Creating a Course instance using the Textbook and Instructor instances\ncourse1 = Course(\"COMP1001\", \"Introduction to Python\", textbook1, instructor1)\n# Printing out information about the course\nprint(course1)\n</snippet-file></snippet><paragraph>The code will output the following:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"false\"><snippet-file id=\"code\">Course Code: COMP1001\nCourse Name: Introduction to Python\nTextbook: Python Programming by John Smith\nInstructor: Jane Doe from Computer Science department</snippet-file></snippet></document>"
    },
    {
      "id": 362007,
      "original_id": 343309,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Class inheritance",
      "index": 162,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Sometimes you might want to define a class as a <bold>subclass</bold> of another class.</paragraph><paragraph>Suppose you've defined a <code>Person</code> class as before:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n        \n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name</snippet-file></snippet><paragraph>Suppose you are especially interested in a certain type of person - your employees. You have special data about them that you'd like to keep, and special methods that you'd like to use to manipulate that data.</paragraph><paragraph>Suppose you decide to create an <code>Employee</code> class for them. The <code>full_name()</code> and <code>reverse_name()</code> methods of the <code>Person</code> class are quite handy, and they apply equally well to employees. So you would probably want to add them to the definition of the <code>Employee</code> class. But then you would just be duplicating code, which is a bad idea. Fortunately, you do not have to. You can specify, as part of your definition of <code>Employee</code>, that it is a <bold>subclass</bold> of <code>Person</code> meaning that instances of <code>Employee</code> class are also instances of <code>Person</code> class (an employee is just a special kind of person). When you do that, every instance of <code>Employee</code> automatically <bold>inherits</bold> all of the attributes defined in <code>Person</code>.  </paragraph><paragraph>To make <code>Employee</code> a subclass (or <bold>child class</bold>) of <code>Person</code> (which is then called the <bold>parent class</bold>, or <bold>superclass</bold>), you just add <code>Person</code> in brackets after the class name. Then you can start creating instances of <code>Employee</code>, which have all the attributes (including the methods), of instances of <code>Person</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n        \n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nclass Employee(Person): # Add Person in brackets, to make it a subclass of Person\n    pass\n\nx = Employee('John', 'Smith')\nprint(x.full_name())</snippet-file></snippet><paragraph>Now you can start adding your special attributes to the <code>Employee</code> class. Instances of <code>Employee</code> will get these attributes, in addition to the attributes they get from <code>Person</code>.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nclass Employee(Person):\n\n    role = None\n    \n    def full_name(self):\n        return self.first_name + ' ' + self.last_name + ', ' + self.role\n\nx = Employee('John', 'Smith')\nx.role = 'Director'\nprint(x.full_name())\nprint(x.reverse_name())</snippet-file></snippet><paragraph>Notice that we can <bold>override</bold> methods of the parent class in the child class. We've overridden <code>full_name()</code> method, by defining a different version of it in the child class, in which it includes the employees role. But we've not overridden <code>reverse_name()</code>.</paragraph><paragraph>We usually define data attributes using the constructor method, as we did for the class <code>Person</code> previously,  as shown in the improved example below:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n    def __str__(self):\n        return self.first_name + ' ' + self.last_name\n\n    def reverse_name(self):\n        return self.last_name + ', ' + self.first_name\n\nclass Employee(Person):\n    def __init__(self, first_name, last_name, role):\n        super().__init__(first_name,last_name)\n        self.role = role\n    \n    def full_name(self):\n        return self.first_name + ' ' + self.last_name + ', ' + self.role\n    def __str__(self):\n        return self.first_name + ' ' + self.last_name + ', ' + self.role\n\nx = Employee('John', 'Smith', 'Director')\nprint(x)#.full_name())\nprint(x.reverse_name())\ny = Person('Jane', 'Doe')\nprint(y)#.full_name())</snippet-file></snippet><paragraph>Note the use of the <code>super()</code> function to access methods of the <bold>parent</bold> class.</paragraph></document>"
    },
    {
      "id": 374437,
      "original_id": null,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Class Polymorphism",
      "index": 165,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-25T17:42:27.800009+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Polymorphism means <bold>many forms</bold>, and in programming it refers to <bold>functions/methods</bold>/<bold>operators</bold> with the <bold>same name</bold> that can be executed on <bold>many objects or classes</bold>.</paragraph><paragraph>Polymorphism is often used in class methods, where we can have multiple classes with the same method name.</paragraph><paragraph>For example, say we have three classes: <code>Car</code>, <code>Boat</code>, and <code>Plane</code>, and they all have a method called <code>move()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Car:\r\n  def __init__(self, brand, model):\r\n    self.brand = brand\r\n    self.model = model\r\n\r\n  def move(self):\r\n    print(\"Drive!\")\r\n\r\nclass Boat:\r\n  def __init__(self, brand, model):\r\n    self.brand = brand\r\n    self.model = model\r\n\r\n  def move(self):\r\n    print(\"Sail!\")\r\n\r\nclass Plane:\r\n  def __init__(self, brand, model):\r\n    self.brand = brand\r\n    self.model = model\r\n\r\n  def move(self):\r\n    print(\"Fly!\")\r\n\r\ncar1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\r\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\r\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\r\n\r\nfor x in (car1, boat1, plane1):\r\n  x.move()</snippet-file></snippet><paragraph>Note the <code>for</code> loop at the end. Because of polymorphism, we can execute the same method for all three classes.</paragraph></document>"
    },
    {
      "id": 374438,
      "original_id": null,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Inheritance Class Polymorphism",
      "index": 166,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-25T17:52:45.358596+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>What about <bold>classes</bold> with <bold>child classes</bold> with the <bold>same name</bold>? Can we use <bold>polymorphism</bold> there?</paragraph><paragraph>Yes. If we use the example from the previous slide (Class Polymorphism) and make a parent class called <code>Vehicle</code>, and make <code>Car</code>, <code>Boat</code>, and <code>Plane</code> child classes of <code>Vehicle</code>, the child classes inherits the <code>Vehicle</code> methods, but can override them:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Vehicle:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n\n  def move(self):\n    print(\"Move!\")\n\nclass Car(Vehicle):\n  pass\n\nclass Boat(Vehicle):\n  def move(self):\n    print(\"Sail!\")\n\nclass Plane(Vehicle):\n  def move(self):\n    print(\"Fly!\")\n\ncar1 = Car(\"Ford\", \"Mustang\") #Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = Plane(\"Boeing\", \"747\") #Create a Plane object\n\nfor x in (car1, boat1, plane1):\n  print(x.brand)\n  print(x.model)\n  x.move()\n  print()</snippet-file></snippet><paragraph>Child classes inherits the <bold>attributes</bold> and <bold>methods</bold> from the parent class.</paragraph><paragraph>In the example above you can see that the <code>Car</code> class is empty, but it inherits <code>brand</code>, <code>model</code>, and <code>move()</code> from <code>Vehicle</code>.</paragraph><paragraph>The <code>Boat</code> and <code>Plane</code> classes also inherit <code>brand</code>, <code>model</code>, and <code>move()</code> from <code>Vehicle</code>, but they both <bold>override</bold> the <code>move()</code> method.</paragraph><paragraph>Because of polymorphism, we can execute the same method for all classes.</paragraph></document>"
    },
    {
      "id": 362008,
      "original_id": 343311,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Documenting your functions, classes, and modules",
      "index": 167,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>When you define a function, or define a class, or create a module, there is a special kind of comment that you can add, called a <bold>docstring</bold>.</paragraph><paragraph/><heading level=\"2\">Functions</heading><paragraph>Here is an example of a docstring being used in a function definition:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def full_name(first_name, last_name):\n    \"\"\"Returns 'first_name last_name'\"\"\"\n    return (first_name + ' ' + last_name).strip()</snippet-file></snippet><paragraph>A function docstring is just a string literal, but:</paragraph><list style=\"bullet\"><list-item><paragraph>It must be <bold>triple quoted</bold> (triple-single or triple-double) (PEP8 style guide recommends triple-double)</paragraph></list-item><list-item><paragraph>It must be the <bold>first line</bold> of the function body</paragraph></list-item></list><paragraph>Why use a docstring? Why not just comments, as usual? Because Python recognises docstrings and uses them to help document your code. Notice what happens when you ask Python for help about the function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">def full_name(first_name, last_name):\n    \"\"\"Returns 'first_name last_name'\"\"\"\n    return (first_name + ' ' + last_name).strip()\n\nhelp(full_name)</snippet-file></snippet><paragraph/><heading level=\"2\">Classes</heading><paragraph>Here is an example of docstrings being used inside a class definition:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    \"\"\"Represents a person\"\"\"\n    def __init__(self, first_name, last_name):\n        \"\"\"This is a constructor\"\"\"\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        \"\"\"Returns 'first_name last_name'\"\"\"\n        return self.first_name + ' ' + self.last_name\n    def reverse_name(self):\n        \"\"\"Returns 'last_name, first_name'\"\"\"\n        return self.last_name + ', ' + self.first_name</snippet-file></snippet><paragraph>Each function definition inside the class definition can have a docstring, as per functions in general. In addition, the class definition itself can have a docstring. The rules are the same:</paragraph><list style=\"bullet\"><list-item><paragraph>It must be triple quoted (triple-single or triple-double)</paragraph></list-item><list-item><paragraph>It must be the first line of the class body</paragraph></list-item></list><paragraph>And the purpose is the same:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">class Person:\n    \"\"\"Represents a person\"\"\"\n    def __init__(self, first_name, last_name):\n        \"\"\"This is a constructor\"\"\"\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        \"\"\"Returns 'first_name last_name'\"\"\"\n        return self.first_name + ' ' + self.last_name\n    def reverse_name(self):\n        \"\"\"Returns 'last_name, first_name'\"\"\"\n        return self.last_name + ', ' + self.first_name\n\nhelp(Person)</snippet-file></snippet><paragraph/><heading level=\"2\">Modules</heading><paragraph>You can add a docstring to any module that you create, too. The rules are the same, and the purpose is the same.</paragraph><paragraph>Suppose you have a module called \"<bold>people.py</bold>\" in which you have a bunch of function and class definitions to help work with people. Here's how the start of your module might look:</paragraph><snippet language=\"py\" runnable=\"false\" line-numbers=\"true\"><snippet-file id=\"code\">\"\"\"A collection of functions and classes to help work with people\"\"\"\n\nclass Person:\n    \"\"\"Represents a person\"\"\"\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        \"\"\"Returns 'first_name last_name'\"\"\"\n        return self.first_name + ' ' + self.last_name\n    def reverse_name(self):\n        \"\"\"Returns 'last_name, first_name'\"\"\"\n        return self.last_name + ', ' + self.first_name\n\n\ndef add_two_numbers(num1, num2):\n    \"\"\"Returns the sum of two given numbers\"\"\"\n    return num1 + num2</snippet-file></snippet><paragraph>Anyone who imports your module and runs <code>help(people)</code> (assuming they haven't given it an alias) will see the information in your docstring.</paragraph><paragraph>You can try it with one of the modules we have been importing. Rather than running <code>help(math)</code>, which will give us a lot of information, we can run <code>print(math.__doc__)</code> - this will show us just the docstring of the module:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import math\n\nprint(math.__doc__)\ninput(\"Press &lt;Enter&gt; to see the help about the module\")\nhelp(math)</snippet-file></snippet></document>"
    },
    {
      "id": 362009,
      "original_id": 343319,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Documenting your modules - Example",
      "index": 169,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "challenge_id": 119337,
      "content": ""
    },
    {
      "id": 362010,
      "original_id": 343312,
      "lesson_id": 53316,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Further reading",
      "index": 170,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:39.241589+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com</paragraph></list-item></list><paragraph></paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 5 - Classes",
  "tutorial_regex": "",
  "type": "general",
  "updated_at": null,
  "user_id": 93339
}