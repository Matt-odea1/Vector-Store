{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:37.330126+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53304,
  "index": 4,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11528,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47893,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": false,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 17,
  "slide_marks_summary": [
    {
      "id": 361940,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361941,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361942,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361943,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361951,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361953,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361944,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361945,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361946,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361947,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361948,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361949,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361950,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361952,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361954,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361955,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 361956,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 361940,
      "original_id": 336223,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Collections",
      "index": 112,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>So far we have worked mostly with individual objects - individual numbers, individual strings, and so on. But it is very common, when programming, to work with whole <bold>collections</bold> of objects - collections of numbers, collections of strings, even mixed collections of objects of different types.</paragraph><paragraph>As programming languages have developed, collections have proven to be a cornerstone of working with data, and Python has some of the most powerful techniques for manipulating collections among modern programming languages.</paragraph><paragraph>Python provides four built-in types of collection, each useful in their own way:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Lists</bold></paragraph></list-item><list-item><paragraph><bold>Tuples</bold></paragraph></list-item><list-item><paragraph><bold>Sets</bold></paragraph></list-item><list-item><paragraph><bold>Dictionaries</bold></paragraph></list-item></list><heading level=\"2\">Lists</heading><paragraph>A list is an <bold>ordered</bold> collection of objects (possibly empty). The objects can be of any type, and they <bold>can be repeated</bold>.</paragraph><list style=\"bullet\"/><heading level=\"2\">Tuples</heading><paragraph>A tuple is like a list except that it is <italic><bold>immutable</bold></italic>, which means that objects cannot be added to a tuple, they cannot be removed from a tuple, and they cannot be reordered within a tuple.</paragraph><list style=\"bullet\"/><paragraph>If it is important that the collection does not change then you should use a tuple, even if the careful use of a list would achieve the same thing. By using a tuple you guarantee that it won't change, and you also signal your intentions more clearly to anyone who reads your code.</paragraph><heading level=\"2\">Sets</heading><paragraph>A set is an <italic><bold>unordered</bold></italic> collection of objects (possibly empty), each of which is <italic><bold>unique</bold></italic> (cannot be repeated).</paragraph><list style=\"bullet\"/><paragraph>If it is important that the collection does not contain the same object twice then you should use a set, even if the careful use of a list would achieve the same thing. By using a set you guarantee that there won't be duplicates, and you also signal your intentions more clearly to anyone who reads your code.</paragraph><heading level=\"2\">Dictionaries</heading><paragraph>A dictionary is an <italic><bold>ordered</bold></italic> collection of <italic><bold>key-value pairs</bold></italic>. In addition, the <bold>keys must be unique</bold>. You can think of a dictionary as a <italic><bold>mapping</bold></italic> from a set of <bold>keys</bold> to some <bold>values</bold>.  You will learn more about what this means as you work your way through this week's slides.</paragraph><callout type=\"info\">In earlier versions of Python dictionaries were not ordered. They have been ordered since version 3.7.</callout></document>"
    },
    {
      "id": 361941,
      "original_id": 336224,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Creating a collection",
      "index": 113,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You can create a collection in a variety of ways.</paragraph><heading level=\"2\">List literals</heading><paragraph>A list literal is a sequence of literals, each of which refers to an object, separated by commas, and surrounded by square brackets. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [2, 4, 6, 8]\nx = [&#39;cat&#39;, &#39;mouse&#39;, &#39;cat&#39;, &#39;mouse&#39;]\nx = [1, 3.14, &#39;a&#39;, True]\nx = []</snippet-file></snippet><list style=\"bullet\"></list><paragraph>Note the last literal above - it is the literal for the <bold>empty list</bold>. Also note that the same object can be included more than once in a list.</paragraph><paragraph>The expressions that you use within square brackets need not be literals - they could be variables or other complex expressions. For example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">y = 45\nx = [2*23, 4-1, abs(-6), y]\nprint(x)</snippet-file></snippet><paragraph>But, strictly speaking, if they are not literals then the whole thing does not count as a list literal - it&#39;s only a list literal if all of the expressions in the square brackets are themselves literals. </paragraph><heading level=\"2\">Tuple literals</heading><paragraph>A tuple literal is like a list literal, except you use round brackets rather than square brackets:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (2, 4, 6, 8)\nx = (&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;)\nx = (1, 3.14, &#39;a&#39;, True)\nx = ()</snippet-file></snippet><list style=\"bullet\"></list><paragraph>Note the last literal again - it is the literal for the <bold>empty tuple</bold>.</paragraph><paragraph>In some contexts you can drop the round brackets around a tuple. We have already seen an example of this - variable unpacking. For example, line 1 below is just shorthand for line 2: </paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x, y = 1, 2\n(x, y) = (1, 2)</snippet-file></snippet><paragraph>You should be careful when doing this, because it sometimes causes errors, and it can make your code less readable.</paragraph><heading level=\"2\">Set literals</heading><paragraph>A set literal is also like a list literal, except you use curly brackets rather than square brackets:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {2, 4, 6, 8}\nx = {&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;}\nx = {1, 3.14, &#39;a&#39;, True}</snippet-file></snippet><paragraph>What about the empty set? You might expect that you could use <code>{}</code>,  but unfortunately that refers to the empty <italic>dictionary</italic> (see below). If you want an empty set you have to use <code>set()</code> (more on this below).</paragraph><paragraph>The items in a set are <italic>unique</italic>, so what happens if you try to include an object more than once? Try it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;}\nprint(x)</snippet-file></snippet><paragraph>As you can see, Python silently ignores all but one occurrence of the object.</paragraph><heading level=\"2\">Dictionary literals</heading><paragraph>A dictionary literal uses curly brackets, like set literals, but with key-value pairs separated by commas, and each key and value separated by a colon.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1: &#39;cat&#39;, 2: &#39;dog&#39;, 3: &#39;mouse&#39;}\nx = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;E&#39;: 2, &#39;M&#39;: 3}\nx = {}</snippet-file></snippet><paragraph>Note the last literal again - it is the literal for the <bold>empty dictionary</bold>.</paragraph><paragraph>Although you&#39;ll mostly use integers, floats, and strings for the keys of a dictionary, they can also be booleans or tuples:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {True: 1, False: 0}\nprint(x)\nx = {(0, 0): &#39;bottom left&#39;, (1, 1): &#39;top right&#39;}\nprint(x)</snippet-file></snippet><paragraph>They cannot be lists or sets or dictionaries. Try it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">try: x = {[1, 2]: &#39;First list&#39;, [3, 4]: &#39;Second list&#39;}\nexcept Exception as e: print(e)\ntry: x = {{1, 2}: &#39;First set&#39;, {3, 4}: &#39;Second set&#39;}\nexcept Exception as e: print(e)  \ntry: x = {{1: 2}: &#39;First dictionary&#39;, {3: 4}: &#39;Second dictionary&#39;}\nexcept Exception as e: print(e)  </snippet-file></snippet><paragraph>The problem with lists, sets and dictionaries is that they are mutable, which means that Python cannot <bold>hash</bold> them (which means, roughly, giving them a unique unchanging value).</paragraph><paragraph>The keys do not all have to be the same type, and neither do the values:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1: &#39;one&#39;, &#39;two&#39;: 2, 3.176: False}\nprint(x)</snippet-file></snippet><paragraph>However, mixing types can lead to confusion, and it is good programming practice to keep the types the same.</paragraph><paragraph>In a dictionary, the values can be duplicated but the keys must be unique. So what happens if you use the same key twice? Try it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;A&#39;: 2, &#39;B&#39;: 3}\nprint(x)</snippet-file></snippet><paragraph>As you can see, if there are multiple items with the same key then Python silently ignores all but the last one.</paragraph><heading level=\"2\">Collections of collections</heading><paragraph>The items in a collection can be objects of any type. In particular, they can be collections. So it&#39;s possible to create collections of collections. For example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># A list of lists\nx = [[1, 2, 3], [3, 4, 5], [6, 7, 8]]\nprint(x)\n\n# A set of tuples\nx = {(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;), (4, &#39;d&#39;)}\nprint(x)</snippet-file></snippet><heading level=\"2\">Using other collections</heading><paragraph>You can also use the <code>list()</code>, <code>tuple()</code>, <code>set()</code>, and <code>dict()</code> functions to create a collection of one type from a collection of another type.</paragraph><heading level=\"2\">Using <code>list()</code></heading><paragraph>You can create a list from a tuple, set, or dictionary: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = list((1, 2, 3)) # From a tuple\nprint(x)\nx = list({1, 2, 3}) # From a set\nprint(x)\nx = list({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # From a dictionary\nprint(x)</snippet-file></snippet><paragraph>Notice that when you create a list from a dictionary you get a list of the <italic>keys</italic>.</paragraph><heading level=\"2\">Using <code>tuple()</code></heading><paragraph>You can create a tuple from a list, set, or dictionary:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = tuple([1, 2, 3]) # From a list\nprint(x)\nx = tuple({1, 2, 3}) # From a set\nprint(x)\nx = tuple({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # From a dictionary\nprint(x)</snippet-file></snippet><heading level=\"2\">Using <code>set()</code></heading><paragraph>You can create a set from a list, tuple, or dictionary:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = set([1, 2, 3]) # From a list\nprint(x)\nx = set((1, 2, 3)) # From a tuple\nprint(x)\nx = set({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # From a dictionary\nprint(x)</snippet-file></snippet><paragraph>Creating a set from a list can be a good way to remove duplicate items from the list:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [1, 2, 2, 1, 3, 3, 2, 3, 1]\nprint(x)\nx = set(x)\nprint(x)</snippet-file></snippet><paragraph>If you want the result as a list then you can simply apply the <code>list</code> function after applying the <code>set</code> function:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [1, 2, 2, 1, 3, 3, 2, 3, 1]\nx = list(set(x))\nprint(x)</snippet-file></snippet><heading level=\"2\">Using <code>dict()</code></heading><paragraph>Since a dictionary is a collection of key-value <italic>pairs</italic>, you can&#39;t create a dictionary from a list, tuple, or set unless the items are pairs. But when they are you have quite a bit of flexibility. Any of the following will work:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = dict([[1, &#39;a&#39;], [2, &#39;b&#39;]]) # From a list of lists\nprint(x)\nx = dict([(1, &#39;a&#39;), (2, &#39;b&#39;)]) # From a list of tuples\nprint(x)\nx = dict(([1, &#39;a&#39;], [2, &#39;b&#39;])) # From a tuple of lists\nprint(x)\nx = dict(((1, &#39;a&#39;), (2, &#39;b&#39;))) # From a tuple of tuples\nprint(x)\nx = dict({(1, &#39;a&#39;), (2, &#39;b&#39;)}) # From a set of tuples\nprint(x)</snippet-file></snippet><paragraph>Be careful when retrieving the items of a set, because you can&#39;t always tell in what order Python will give them to you. For example, the following is risky, because you can&#39;t tell in advance what the keys will be and what the values will be:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = dict([{1, &#39;a&#39;}, {2, &#39;b&#39;}])\nprint(x)</snippet-file></snippet><paragraph>You should avoid using sets in this way.</paragraph></document>"
    },
    {
      "id": 361942,
      "original_id": 336225,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Inspecting a collection",
      "index": 114,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>There are a variety of ways in which you can inspect a collection.</paragraph><heading level=\"2\">Number of items</heading><paragraph>You can get the number of items in a collection using Python&#39;s <code>len()</code> function:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(len([1, 2, 3])) # List\nprint(len((1, 2, 3))) # Tuple\nprint(len({1, 2, 3})) # Set\nprint(len({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})) # Dictionary\nprint(len([])) # Empty list</snippet-file></snippet><paragraph>Notice that if you have a collection of collections, <code>len()</code> only counts the number of items at the top level:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">numbers = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\nprint(len(numbers))</snippet-file></snippet><heading level=\"2\">Existence of an item</heading><paragraph>You can check whether a collection contains an item using the <code>in</code> keyword. Note that in the case of dictionaries it is the keys that are checked.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(1 in [1, 2, 3]) # True\nprint(&#39;a&#39; in [1, 2, 3]) # False\n\nprint(1 in (1, 2, 3)) # True\nprint(&#39;a&#39; in (1, 2, 3)) # False\n\nprint(1 in {1, 2, 3}) # True\nprint(&#39;a&#39; in {1, 2, 3}) # False\n\nprint(1 in {1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # True - keys are checked\nprint(&#39;a&#39; in {1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}) # False - keys are checked</snippet-file></snippet><paragraph>You can check whether an item is <italic>not</italic> in a collection either by using <code>in</code> and checking whether <code>False</code> is returned, or by using <code>not in</code> and checking whether <code>True</code> is returned:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(&#39;a&#39; in [1, 2, 3]) # False\nprint(&#39;a&#39; not in [1, 2, 3]) # True</snippet-file></snippet><paragraph>You can use the <code>index()</code> method to find the index of the first occurrence of a value in a list or tuple. If the value is not found then Python raises an error.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 3, 7, 8, 7, 5, 4, 6, 8, 5, 7]\nprint(x.index(7)) # Only the first occurrence is found</snippet-file></snippet><heading level=\"2\">Frequency of an item</heading><paragraph>If you want to know how many times an item occurs in a list or tuple you can use the <code>count()</code> method (sets and dictionaries do not have this method):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 1, 2, 2, 2]\nprint(x.count(1))\nx = (1, 1, 2, 2, 2)\nprint(x.count(1))\nprint(x.count(&#39;a&#39;))</snippet-file></snippet><paragraph>You could also use this to check whether a list or tuple contains a certain item (if not, the count will be zero).</paragraph><heading level=\"2\">Minimum item</heading><paragraph>You can find the minimum item in a collection by using the <code>min()</code> function. In the case of dictionaries it compares their <italic>keys</italic>, rather than their values.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(min([1, 2, 3])) # List\nprint(min((1, 2, 3))) # Tuple\nprint(min({1, 2, 3})) # Set\nprint(min({&#39;a&#39;: 10, &#39;b&#39;: 5, &#39;c&#39;: 1})) # Dictionary - compares the keys</snippet-file></snippet><heading level=\"2\">Maximum item</heading><paragraph>You can find the maximum item in a collection by using the <code>max()</code> function. Again, in the case of dictionaries it compares their keys.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(max([1, 2, 3])) # List\nprint(max((1, 2, 3))) # Tuple\nprint(max({1, 2, 3})) # Set\nprint(max({&#39;a&#39;: 10, &#39;b&#39;: 5, &#39;c&#39;: 1})) # Dictionary - compares the keys</snippet-file></snippet><heading level=\"2\">Sum of the items</heading><paragraph>You can find the sum of the items in a collection by using the <code>sum()</code> function. In the case of dictionaries it sums their keys (so there will be an error if the keys cannot be summed, such as when they are letters).</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">print(sum([1, 2, 3])) # List\nprint(sum((1, 2, 3))) # Tuple\nprint(sum({1, 2, 3})) # Set\nprint(sum({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;})) # Dictionary - sums the keys</snippet-file></snippet><heading level=\"2\">Checking if all items are true</heading><paragraph>You can check whether <italic>all</italic> the items in a collection evaluate to <code>True</code> using the <code>all</code> function. As you probably expect by now, in the case of dictionaries it checks the keys, not the values.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">print(all([True, True]))\nprint(all([True, False]))\nprint(all((&#39;a&#39;, &#39;b&#39;)))\nprint(all((&#39;&#39;, &#39;b&#39;)))\nprint(all({1, 2}))\nprint(all({0, 1}))\nprint(all({1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;}))\nprint(all({0: &#39;a&#39;, 1: &#39;b&#39;, 1: &#39;c&#39;}))</snippet-file></snippet><heading level=\"2\">Checking if any items are true</heading><paragraph>You can check whether <italic>any</italic> of the items in a collection evaluate to <code>True</code> using the <code>any</code> function. Again, in the case of dictionaries it checks the keys, not the values.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(any([True, False]))\nprint(any([False, False]))\nprint(any((&#39;&#39;, &#39;b&#39;)))\nprint(any((&#39;&#39;, 0)))\nprint(any({1, 0}))\nprint(any({0, 0}))\nprint(any({0: &#39;a&#39;, 1: &#39;b&#39;, 2: &#39;c&#39;}))\nprint(any({0: &#39;a&#39;, &#39;&#39;: &#39;b&#39;, False: &#39;c&#39;}))</snippet-file></snippet><paragraph></paragraph></document>"
    },
    {
      "id": 361943,
      "original_id": 336226,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Selecting elements",
      "index": 115,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Lists and tuples</heading><paragraph>The items of a list or tuple are ordered, so each one has a position in the list. An item&#39;s position is also called its <bold>index</bold>. The indexes are integers, <bold>starting from 0</bold>. So, the first item has index 0, the second item has index 1, and so on.</paragraph><paragraph>You can select items in a list or tuples by using the <bold>indexing operator</bold> <code>[]</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[0])\nprint(x[3])</snippet-file></snippet><paragraph>Indexes can also be negative. The last item has index -1, the second last item has index -2, and so on.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[-1])\nprint(x[-2])</snippet-file></snippet><paragraph>You can also use the indexing operator to get a <bold>slice</bold> of a list or tuple. The syntax for slicing is <code>[start:end]</code>, where <code>start</code> is the start index and <code>end</code> is the end index. The cuts are made just <italic>before</italic> the items at the start and end indexes, so the slice includes the start item but not the end item.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[0:3]) # Prints items with indexes 0, 1, 2</snippet-file></snippet><paragraph>Notice that <code>x[0:3]</code> returns items with index 0 to 2, rather than 0 to 3 as you might expect - this can be very confusing!</paragraph><paragraph>You can also use negative indices when slicing:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[1:-1])</snippet-file></snippet><paragraph>If you don&#39;t specify a start index then it is assumed to be zero. If you don&#39;t specify an end index then it is assumed to be the length of the list (an invalid index, but as it is excluded - this is fine and is the way to include the last element of the list). If you don&#39;t specify either then the whole list is returned.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[:3])\nprint(x[1:])\nprint(x[:])</snippet-file></snippet><paragraph>Python allows you to add a third parameter to the slice to control the <bold>step</bold>. This parameter allows you to easily extract every nth element from the list. The syntax for slicing with a step is <code>[start:end:step]</code>, where <code>step</code> is an integer.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x[::2]) # Every second element\nprint(x[::3]) # Every third element\nprint(x[::-1]) # Every element in reverse\nprint(x[::-2]) # Every second element in reverse</snippet-file></snippet><heading level=\"2\">Getting a random item</heading><paragraph>It can be useful to get a random item of a collection. For lists and tuples you can use the <code>choice()</code> function of the <code>random</code> module:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">import random\nprint(random.choice([1, 2, 3, 4, 5]))\nprint(random.choice((1, 2, 3, 4, 5)))</snippet-file></snippet><heading level=\"2\">Sets</heading><paragraph>The items in a set are <italic>unordered</italic>, which means that they have no index. If you try to refer to an item in a set by using the indexing operator (square brackets notation) you will get an error:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {&#39;cat&#39;, &#39;mouse&#39;, &#39;dog&#39;}\nprint(x[0]) # Error</snippet-file></snippet><heading level=\"2\">Dictionaries</heading><paragraph>You can access the elements of a dictionary also using the indexing operator, but in this case the indices are the <italic>keys</italic> of the dictionary, which are not necessarily integers.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nprint(scores[&#39;Alice&#39;])</snippet-file></snippet><paragraph>If there is no element with the given index then an error will occur:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nprint(scores[&#39;Steve&#39;])</snippet-file></snippet><paragraph>To allow for this you can use the <code>get()</code> method instead, which allows you to specify a default value in case there is no matching index:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nprint(scores.get(&#39;Steve&#39;, &#39;There is no such index&#39;))</snippet-file></snippet><paragraph>Note that lists and tuples do not have a <code>get()</code> method.</paragraph></document>"
    },
    {
      "id": 361951,
      "original_id": 336234,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Looping through a collection",
      "index": 116,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">For loops</heading><paragraph>It is very common to loop through the items in a collection one-by-one. A good way to do so is to use a <code>for</code> loop, which is custom-made for this kind of thing:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = ['a', 'e', 'i', 'o', 'u']\nfor v in vowels:\n    print(v)</snippet-file></snippet><paragraph>You can use this technique not just with lists but with tuples, sets and dictionaries too:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for x in (1, 2, 3): # Tuple\n    print(x) \nfor x in {1, 2, 3}: # Set\n    print(x)\nfor x in {1:'a', 2:'b', 3:'c'}: # Dictionary\n    print(x)</snippet-file></snippet><paragraph>Keep in mind that because sets are not ordered there is no guarantee in what order their items will be looped through. Try running the following piece of code a few times:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for x in {'a', 'e', 'i', 'o', 'u'}:\n    print(x)</snippet-file></snippet><paragraph>Also notice that when you loop through a dictionary it is the <italic>keys</italic> that get looped through:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for x in {1: 'a', 2: 'e', 3: 'i', 4: 'o', 5: 'u'}:\n    print(x)</snippet-file></snippet><heading level=\"2\">Variations</heading><paragraph>Sometimes when you loop through a list you will want to use the index of an item as well as its value. You can do this by using the <code>enumerate()</code> function, which returns a collection of key-value pairs for you to loop through:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = ['a', 'e', 'i', 'o', 'u']\nfor index, vowel in enumerate(vowels):\n\tprint('The vowel at index', index, 'is', vowel)</snippet-file></snippet><paragraph>You can do a similar thing with dictionaries by using the <code>items()</code> method of a dictionary:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {'Alice': 0, 'Bob': 1, 'Eve': 2, 'Mallory': 3}\nfor key, value in scores.items():\n\tprint(f'{key} scored {value}')</snippet-file></snippet><paragraph>If you want to loop through just the values of a dictionary you can use the <code>values()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {'Alice': 0, 'Bob': 1, 'Eve': 2, 'Mallory': 3}\nfor x in scores.values():\n\tprint(x)</snippet-file></snippet><heading level=\"2\">Break and continue</heading><paragraph>In Week 1 you learned about using <code>break</code> and <code>continue</code> in a while loop. They can also be used in <code>for</code> loops.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = ['a', 'e', 'i', 'o', 'u']\n\nprint('Everything before o:')\nfor v in vowels:\n    if v == 'o':\n        break\n    print(v)\nprint()\nprint('Everything except o:')\nfor v in vowels:\n    if v == 'o':\n        continue\n    print(v)</snippet-file></snippet><heading level=\"2\">Nested loops</heading><paragraph>If you are looping through a collection whose items are themselves collections then you might want to use <bold>nested</bold> loops.</paragraph><paragraph>Suppose that you have a list of lists of numbers, and you want to add up all the numbers. You could do this using nested loops:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">lists = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\ntotal = 0\nfor lst in lists:\n    for num in lst:\n        total += num\nprint(total)</snippet-file></snippet><paragraph/></document>"
    },
    {
      "id": 361953,
      "original_id": 336236,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "The range function",
      "index": 117,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>A very common thing to do when programming is to loop through a sequence of numbers. Python&#39;s <code>range()</code> function is a very useful way of creating the numbers to loop through.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for i in range(10):\n&#x9;print(i)</snippet-file></snippet><paragraph>Note that <code>range(n)</code> returns <code>n</code> integers, from <code>0</code> to  <code>n-1</code>. The number n is not included.</paragraph><paragraph>Here&#39;s how you might use it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;]\nfor i in range(len(vowels)):\n    print(&#39;The vowel at index&#39;, i, &#39;is&#39;, vowels[i])</snippet-file></snippet><paragraph>Although, you might find it more convenient in this case to use the <code>enumerate()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;]\nfor i, value in enumerate(vowels):\n&#x9;print(&#39;The vowel at index&#39;, i, &#39;is&#39;, value)</snippet-file></snippet><heading level=\"2\">What range returns</heading><paragraph>It might seem like the range function returns these numbers as a list, the list <code>[0, 1, .... , 10]</code>. But actually it doesn&#39;t. It returns a special type of object called a <bold>range</bold>. You see this by checking its type:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = range(10)\nprint(type(x))</snippet-file></snippet><paragraph>A range object is a method for generating each number as required, but not until it is required.</paragraph><paragraph>If you&#39;d like to use <code>range()</code> to get a list of numbers, you can just apply the <code>list()</code> function to it:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = list(range(10))\nprint(type(x))\nprint(x)</snippet-file></snippet><paragraph>In a similar way, you could get a tuple or set of numbers.</paragraph><heading level=\"2\">Customising range</heading><paragraph>You can specify a starting value:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">for i in range(3, 10):\n&#x9;print(i)</snippet-file></snippet><paragraph>You can specify a step:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">for i in range(0, 10, 2):\n&#x9;print(i)</snippet-file></snippet><paragraph>You can work backwards by making the step negative:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for i in range(10, 0, -2):\n&#x9;print(i)</snippet-file></snippet><heading level=\"2\">Nesting ranges</heading><paragraph>You might find yourself using <code>range</code> in nested for loops:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">for i in range(1, 11):\n    for j in range(1, 11):\n        print(f&#39;{i} times {j} is {i*j}&#39;)</snippet-file></snippet><paragraph>It has become conventional to use <code>i</code>, <code>j</code>, and <code>k</code> as loop counters.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">for i in range(2):\n&#x9;for j in range(2):\n&#x9;&#x9;for k in range(2):\n&#x9;&#x9;&#x9;print(i, j, k)</snippet-file></snippet><paragraph></paragraph></document>"
    },
    {
      "id": 361944,
      "original_id": 336227,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Adding elements",
      "index": 118,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Adding to a list</heading><paragraph>You can add an item to the end of a list by using the <code>append()</code> method:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx.append(&#39;f&#39;)\nprint(x)</snippet-file></snippet><paragraph>Notice that the <code>append()</code> method modifies the list <bold>in-place</bold> - you do not have to assign the result back to the variable. This is different from the string methods we saw last week, which do not modify strings in place, but return new values:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = &#34;Hello&#34;\nx.upper() # x not changed\nprint(x)\nx = x.upper() # x changed\nprint(x)</snippet-file></snippet><paragraph>You can insert an item at a specified index by using the <code>insert()</code> method:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx.insert(2, &#39;x&#39;) # Insert at index 2\nprint(x)</snippet-file></snippet><paragraph>You can achieve the same thing by replacing the empty slice from 2 to 2:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[2:2] = &#39;x&#39; # Insert at index 2\nprint(x)</snippet-file></snippet><paragraph>You can extend a list with the items from another list by using the <code>extend()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ny = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nx.extend(y)\nprint(x)</snippet-file></snippet><paragraph>Notice that the <code>extend()</code> method also modifies the list in-place - you do not have to assign the result back to the variable.</paragraph><paragraph>Also notice that <underline>extending by</underline> a list is different from <underline>appending</underline> a list. Compare the result of extending (above) with the result of appending (below):</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ny = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nx.append(y)\nprint(x)</snippet-file></snippet><paragraph>You can also extend a list with the items from another list using the <code>+</code> operator:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ny = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nx = x + y\nprint(x)</snippet-file></snippet><paragraph>Notice that the + operator does <underline>not</underline> modify the list in-place - you have to assign the result back to the variable.</paragraph><heading level=\"2\">Adding to a tuple</heading><paragraph>Because tuples are immutable you cannot add items to them.</paragraph><heading level=\"2\">Adding to a set</heading><paragraph>You can add a single item to a set by using the set&#39;s <code>add()</code> method. If the item is already in the set, Python quietly ignores the request.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">letters = {&#39;a&#39;, &#39;b&#39;}\nletters.add(&#39;c&#39;)\nprint(letters)\nletters.add(&#39;c&#39;) # No error, just not added\nprint(letters)</snippet-file></snippet><paragraph>You can add multiple items to a set by using the set&#39;s <code>update()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = set()\nvowels.update(&#39;a&#39;, &#39;e&#39;)\nprint(vowels)</snippet-file></snippet><heading level=\"2\">Adding to a dictionary</heading><paragraph>You can add an item to a dictionary by specifying a value for a new key. If the key already exists, the value for that key will be updated.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1: &#39;a&#39;, 2: &#39;b&#39;}\nx[3] = &#39;c&#39; # Item added\nprint(x)\nx[3] = &#39;d&#39; # Item updated\nprint(x)</snippet-file></snippet></document>"
    },
    {
      "id": 361945,
      "original_id": 336228,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Removing elements",
      "index": 119,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Removing from a list</heading><paragraph>You can remove an item at a specific index using a <code>del</code> statement:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ndel x[1]\nprint(x)</snippet-file></snippet><paragraph>You can do the same with a slice of the list:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ndel x[1:3]\nprint(x)</snippet-file></snippet><paragraph>You can also remove a slice by setting it to the empty list:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[1:3] = [] # Items removed\nprint(x)</snippet-file></snippet><paragraph>This doesn&#39;t work for individual items:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[0] = [] # Item not removed - replaced by the empty list\nprint(x)</snippet-file></snippet><paragraph>You can also remove an item at a specific index using the <code>pop()</code> method. If <code>pop()</code> isn&#39;t given an index then the last item will be removed. The removed element is returned.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(x.pop(2)) # Removes and returns item at index 2\nprint(x)\nprint(x.pop()) # Removes and returns the last item\nprint(x)</snippet-file></snippet><paragraph>You can remove the first item with a given value by using the <code>remove()</code> method:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;c&#39;]\nx.remove(&#39;c&#39;) # Only first occurrence is removed\nprint(x)</snippet-file></snippet><paragraph>You can remove all items from a list by using the <code>clear()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx.clear() # All items removed\nprint(x)</snippet-file></snippet><heading level=\"2\">Removing from a tuple</heading><paragraph>Because tuples are immutable you cannot remove items from them.</paragraph><heading level=\"2\">Removing from a set</heading><paragraph>Because a set is not ordered you cannot remove elements by index, but you can remove them by value, using the set&#39;s <code>remove()</code> or <code>discard()</code> methods. If the item is not in the set then using <code>remove()</code> will cause an error, but using <code>discard()</code> will not:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">vowels = {&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;}\nvowels.remove(&#39;a&#39;) # Removes &#39;a&#39;\nprint(vowels)\nvowels.discard(&#39;f&#39;) # No error\nprint(vowels)\nvowels.remove(&#39;f&#39;) # Error</snippet-file></snippet><paragraph>You can remove all items from a set by using the set&#39;s <code>clear()</code> method:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">vowels = {&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;}\nvowels.clear() # Remove all items\nprint(vowels)</snippet-file></snippet><heading level=\"2\">Removing from a dictionary</heading><paragraph>You can remove an element of a dictionary by key using <code>del</code> or <code>pop()</code>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">scores = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;E&#39;: 2, &#39;M&#39;: 3}\ndel scores[&#39;B&#39;] # Remove item whose key is &#39;B&#39;\nprint(scores)\nscores.pop(&#39;M&#39;) # Remove item whose key is &#39;M&#39;, and return its value\nprint(scores)</snippet-file></snippet><paragraph>You can remove all elements using <code>clear()</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {&#39;A&#39;: 0, &#39;B&#39;: 1, &#39;E&#39;: 2, &#39;M&#39;: 3}\nscores.clear() # Remove all items\nprint(scores)</snippet-file></snippet></document>"
    },
    {
      "id": 361946,
      "original_id": 336229,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Modifying elements",
      "index": 120,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Modifying list elements</heading><paragraph>You can change the value of an item in a list by referring to it and then assigning it a new value:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[0] = &#39;z&#39; # Assign a new value\nprint(x)</snippet-file></snippet><paragraph>You can also assign to a slice with a sequence:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nx[0:1] = [&#39;x&#39;, &#39;y&#39;] # Assign new values\nprint(x)</snippet-file></snippet><heading level=\"2\">Modifying tuple elements</heading><paragraph>Since tuples are immutable, you cannot change which objects are in the tuple:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (0, 2, 3)\nx[0] = 1 # Error - cannot change which objects are in the tuple</snippet-file></snippet><paragraph>But if one of those objects is itself mutable, then you can change the nature of that object. Suppose the first element of a tuple is a list, for example. You can change the elements of this list, even though the list is part of a tuple. That&#39;s because you&#39;re not changing <italic>which</italic> objects are in the tuple - you&#39;re just changing the nature of one of those objects. It&#39;s not a good idea to do this, though - it goes against the spirit of using tuples to signal that your data should not change.</paragraph><heading level=\"2\">Modifying set elements</heading><paragraph>You can&#39;t change an element of a set, but you remove it and then add a different element:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = {1, 2, 3}\nx.remove(3)\nx.add(4)\nprint(x)</snippet-file></snippet><heading level=\"2\">Modifying dictionary elements</heading><paragraph>Updating an item in a dictionary is similar to updating an item in a list.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">scores = {\n&#x9;&#39;Alice&#39;: 0,\n&#x9;&#39;Bob&#39;: 1,\n&#x9;&#39;Eve&#39;: 2,\n&#x9;&#39;Mallory&#39;: 3,\n}\nscores[&#39;Bob&#39;] = 900\nscores[&#39;Alice&#39;] += 1\nprint(scores)</snippet-file></snippet><heading level=\"2\"></heading></document>"
    },
    {
      "id": 361947,
      "original_id": 336230,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Sorting elements",
      "index": 121,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Sorting a list</heading><paragraph>You can sort the elements of a list by using the <code>sort()</code> method, which orders the items by comparing their values using the <code>&lt;</code> operator. Note that this method sorts the list <bold>in-place</bold> - it does not return a new list.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort()\nprint(x)\n\nx = [&#39;c&#39;, &#39;a&#39;, &#39;e&#39;, &#39;b&#39;, &#39;d&#39;]\nx.sort()\nprint(x)</snippet-file></snippet><paragraph>You can sort the elements in descending order by passing the keyword argument <code>reverse = True</code>:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort(reverse = True)\nprint(x)</snippet-file></snippet><paragraph>You could also achieve this by sorting them in ascending order and then reversing the list, using the <code>reverse()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort()\nx.reverse()\nprint(x)</snippet-file></snippet><paragraph>Note that reversing a list is not the same thing as sorting it in descending order:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [1, 5, 4, 2, 3]\nx.sort(reverse = True)\nprint(x)\nx = [1, 5, 4, 2, 3]\nx.reverse()\nprint(x)</snippet-file></snippet><paragraph>Also note that if you have a list of lists the <code>reverse()</code> method only reverses the topmost level of lists:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">numbers = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\nnumbers.reverse()\nprint(numbers)</snippet-file></snippet><heading level=\"2\">Sorting uppercase and lowercase</heading><paragraph>Somewhat surprisingly, Python sorts all uppercase characters before all lowercase characters. So &#39;B&#39; comes before &#39;a&#39;. Try it:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;A&#39;, &#39;b&#39;, &#39;B&#39;, &#39;c&#39;, &#39;C&#39;]\nx.sort()\nprint(x)</snippet-file></snippet><paragraph>The reason for this is that Python sorts characters according to their ASCII numeric value, and the ASCII values of uppercase characters are lower than the ASCII values of lowercase characters. You can see this, by using the <code>ord()</code> function:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">print(ord(&#39;a&#39;))\nprint(ord(&#39;A&#39;))\nprint(ord(&#39;b&#39;))\nprint(ord(&#39;B&#39;))\nprint(ord(&#39;c&#39;))\nprint(ord(&#39;C&#39;))</snippet-file></snippet><heading level=\"2\">Sorting with a function</heading><paragraph>Suppose you have a list of words and you want to sort them by length. If you use the bare <code>sort()</code> method then you will get the wrong result - it will sort them alphabetically:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;dog&#39;, &#39;chicken&#39;, &#39;mouse&#39;, &#39;horse&#39;, &#39;goat&#39;, &#39;donkey&#39;]\nx.sort()\nprint(x)</snippet-file></snippet><paragraph>In this case you need to specify a <code>key</code>, which is a function that returns, for each item in the list, the value that you&#39;d like to sort the item by. In this case we&#39;d like to sort items by length, so we can use the <code>len()</code> function:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = [&#39;dog&#39;, &#39;chicken&#39;, &#39;mouse&#39;, &#39;horse&#39;, &#39;goat&#39;, &#39;donkey&#39;]\nx.sort(key = len)\nprint(x)</snippet-file></snippet><paragraph>Later you will learn how to define your own functions. This will allow you to do even more sophisticated sorting.</paragraph><heading level=\"2\">What about tuples, sets and dictionaries?</heading><paragraph>Since tuples are immutable they cannot be sorted, so tuples do not have a <code>sort()</code> method.</paragraph><paragraph>Since the elements in a set are not ordered it doesn&#39;t make sense to sort them (you cannot be guaranteed of getting them back in any particular order), so sets do not have a <code>sort()</code> method.</paragraph><paragraph>Although the elements of a dictionary are ordered, they are always in <bold>insertion order</bold> - the order in which they were inserted into the dictionary. So it doesn&#39;t make sense to sort a dictionary, and dictionaries do not have a <code>sort()</code> method. </paragraph><paragraph>You can, however, create a sorted <italic>list</italic> from these things, using Python&#39;s <code>sorted()</code> function.</paragraph><heading level=\"2\">The sorted function</heading><paragraph>The <code>sorted()</code> function takes a collection and returns a list of its items sorted in ascending order. It leaves the original collection unchanged (so it can be used on tuples). Note that in the case of a dictionary it returns the keys of the dictionary, sorted.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (1, 5, 4, 2, 3) # Tuple\nprint(sorted(x)) # Returns a new list, sorted\n\nx = {1, 5, 4, 2, 3} # Set\nprint(sorted(x)) # Returns a new list, sorted\n\nx = {1:&#39;f&#39;, 5:&#39;a&#39;, 4:&#39;b&#39;, 2:&#39;d&#39;, 3:&#39;c&#39;} # Dictionary\nprint(sorted(x)) # Returns a new list, from the keys, sorted\n</snippet-file></snippet><paragraph>If you want the resulting list in descending order, pass the argument <code>reverse = True</code>:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = (1, 5, 4, 2, 3)\nprint(sorted(x, reverse = True))\n\nx = {1, 5, 4, 2, 3} # Set\nprint(sorted(x, reverse = True))\n\nx = {1:&#39;f&#39;, 5:&#39;a&#39;, 4:&#39;b&#39;, 2:&#39;d&#39;, 3:&#39;c&#39;}\nprint(sorted(x, reverse = True))\n</snippet-file></snippet></document>"
    },
    {
      "id": 361948,
      "original_id": 336231,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Joining elements",
      "index": 122,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You can join the elements of a collection into a string, as long as they are themselves strings. The method by which you do this is somewhat counterintuitive: </paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\ns = &#39;,&#39;.join(x)\nprint(s)</snippet-file></snippet><paragraph>To join the elements of the list into a string using commas to separate the items, you call the <code>join()</code> method on the comma string, and supply the list as an argument.</paragraph><paragraph>You can use whatever separator you want:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">x = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(&#39;, &#39;.join(x))\nprint(&#39; &#39;.join(x))\nprint(&#39;--&#39;.join(x))\nprint(&#39; then &#39;.join(x))</snippet-file></snippet><paragraph>This technique works for tuples, sets and dictionaries too (in the case of dictionaries it is the keys that get joined, and they must be strings):</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) # Tuple\nprint(&#39;-&#39;.join(x))\n\nx = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;} # Set\nprint(&#39;-&#39;.join(x))\n\nx = {&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3, &#39;d&#39;:4, &#39;e&#39;:5} # Dictionary\nprint(&#39;-&#39;.join(x))</snippet-file></snippet></document>"
    },
    {
      "id": 361949,
      "original_id": 336232,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Special string operations",
      "index": 123,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">Strings as tuples</heading><paragraph>In Python we can think of a string as <bold>a tuple of characters</bold>.</paragraph><paragraph>This means that you can access the characters in a string in the same ways that you can access the items in a tuple, using the <code>[]</code> indexing operator. You can select individual characters this way, and you can select slices of characters, which are substrings:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">x = &#39;Hello&#39;\nprint(x[1]) # Individual character\nprint(x[1:3]) # Slice\nprint(x[2:-1]) # Slice</snippet-file></snippet><paragraph>But you cannot reassign individual characters:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">x = &#39;Hello&#39;\nx[1] = &#39;J&#39;\nprint(x) # Error</snippet-file></snippet><heading level=\"2\">Splitting strings</heading><paragraph>One of the most useful methods available for string objects is the <code>split()</code> method. This breaks a string into a <bold>list of substrings</bold> that are separated by a delimiter.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">y = &#39;The cat sat on the mat&#39;\nprint(y.split(&#39; &#39;)) # Split using &#39; &#39; as the delimiter \n\nz = &#39;12:30:45&#39;\nprint(z.split(&#39;:&#39;)) # Split using &#39;:&#39; as the delimiter</snippet-file></snippet><paragraph>Note that the delimiter is not included in the substrings.</paragraph></document>"
    },
    {
      "id": 361950,
      "original_id": 336233,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Special set operations",
      "index": 124,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>There are special operations that you can perform on sets.</paragraph><heading level=\"2\">Union</heading><paragraph>The <bold>union</bold> of two sets is the set of items that belong to <italic>either or both</italic> sets:</paragraph><figure><image height=\"194\" src=\"https://static.edusercontent.com/files/y6pqKcqjeZZlRV0pHIdRafBh\" width=\"300\"></image></figure><paragraph>You can get the union of two sets using either the <code>|</code> operator or the <code>union()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens | primes)\nprint(evens.union(primes))\nprint(primes.union(evens))</snippet-file></snippet><heading level=\"2\">Intersection</heading><paragraph>The <bold>intersection</bold> of two sets is the set of items that belong to <italic>both</italic> sets:</paragraph><figure><image src=\"https://static.edusercontent.com/files/nCFjgUjjfBrZrp8qNiu5dvSR\" width=\"320\" height=\"207\"></image></figure><paragraph>You can get the intersection of two sets using either the <code>&amp;</code> operator or the <code>intersection()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens &amp; primes)\nprint(evens.intersection(primes))\nprint(primes.intersection(evens))</snippet-file></snippet><heading level=\"2\">Difference</heading><paragraph>The <bold>difference</bold> between set A and set B is the set of items that belong to A but not B:</paragraph><figure><image src=\"https://static.edusercontent.com/files/hb7n06ncCOn6e0BZTWevn589\" width=\"330\" height=\"214\"></image></figure><paragraph>You can get the difference between two sets using either the <code>-</code> operator or the <code>difference()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens - primes)\nprint(evens.difference(primes))\nprint(primes - evens)\nprint(primes.difference(evens))</snippet-file></snippet><heading level=\"2\">Symmetric difference</heading><paragraph>The <bold>symmetric difference</bold> between set A and set B is the set of items that belong to A but not B, or to B but not A.</paragraph><paragraph>You can get the symmetric difference between two sets using the <code>symmetric_difference()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens.symmetric_difference(primes))\nprint(primes.symmetric_difference(evens))</snippet-file></snippet><heading level=\"2\">Comparing sets</heading><paragraph>Two sets are <bold>disjoint</bold> when they have no elements in common.</paragraph><paragraph>You can check whether two sets are disjoint using the <code>isdisjoint()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">evens = {2, 4, 6, 8}\nprimes = {2, 3, 5, 7}\nprint(evens.isdisjoint(primes))\nprint(primes.isdisjoint(evens))</snippet-file></snippet><paragraph>A set A is a <bold>subset</bold> of a set B when every element of A is also an element of B. We also say, in this case, that B is a <bold>superset</bold> of A.</paragraph><paragraph>You can check whether one set is a subset of another using either the <code>&lt;=</code> operator or the <code>issubset()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">A = {2, 3}\nB = {2, 3, 6, 7}\nC = {4, 5, 6, 7}\nprint(A.issubset(B))\nprint(A &lt;= B)\nprint(A.issubset(C))\nprint(A &lt;= C)</snippet-file></snippet><paragraph>Similarly, you can check whether one set is a superset of another using either the <code>&gt;=</code> operator or the <code>issuperset()</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">A = {2, 3}\nB = {2, 3, 6, 7}\nC = {4, 5, 6, 7}\nprint(B.issuperset(A))\nprint(B &gt;= A)\nprint(C.issuperset(A))\nprint(C &gt;= A)</snippet-file></snippet><paragraph></paragraph></document>"
    },
    {
      "id": 361952,
      "original_id": 336235,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Comprehensions",
      "index": 125,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><heading level=\"2\">List comprehensions</heading><paragraph>Suppose you have a list of words and you&#39;d like a list of their lengths. You could get it by using a <code>for</code> loop:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = []\nfor word in words:\n    lengths.append(len(word))\nprint(lengths)</snippet-file></snippet><paragraph>Python provides a more elegant way to do this - a <bold>list comprehension</bold>:</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = [len(word) for word in words]\nprint(lengths)</snippet-file></snippet><paragraph>The expression <code>[len(word) for word in words]</code> is the <bold>list</bold> comprehension. Note that it is an expression, rather than a block of statements.</paragraph><paragraph>You can add a condition to the comprehension. Suppose you only want to include words that are more than three letters long. Then you could use the following:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = [len(word) for word in words if len(word) &gt; 3]\nprint(lengths)</snippet-file></snippet><paragraph>This is a very useful way of filtering out elements from a list. Here is another example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">nums = [2, 12, 4, 2, 9, 10, 11, 1, 15, 23]\nnums = [x for x in nums if x &gt;= 10]\nprint(nums)</snippet-file></snippet><paragraph>In a previous example we used nested <code>for</code> loops to sum the numbers in a list of lists of numbers. We can do it using list comprehensions:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">lists = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\ntotal = sum([sum(x) for x in lists])\nprint(total)</snippet-file></snippet><heading level=\"2\">Set comprehensions</heading><paragraph>If you would like a <italic>set</italic> of lengths rather than a list of lengths then you could use a <bold>set comprehension</bold>, which is just the same but with curly brackets:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nunique_lengths = {len(word) for word in words}\nprint(unique_lengths)</snippet-file></snippet><paragraph>Note that duplicate values are automatically removed from the set.</paragraph><heading level=\"2\">Dictionary comprehensions</heading><paragraph>You can also create a dictionary using a <bold>dictionary comprehension</bold>. Here is a slightly different example:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nwords_with_lengths = {word: len(word) for word in words}\nprint(words_with_lengths)</snippet-file></snippet><heading level=\"2\">What about a tuple comprehension?</heading><paragraph>Alas, there is no tuple comprehension. You can use the same sort of construction, but it will give you a <bold>generator</bold>, not a tuple (more about generators next week).</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">words = [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumped&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;]\nlengths = (len(word) for word in words)\nprint(lengths)</snippet-file></snippet></document>"
    },
    {
      "id": 361954,
      "original_id": 336237,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Files as lists",
      "index": 126,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>Just as we can think of a string as a tuple of characters, we can think of a file as <bold>a list of lines</bold>. Python provides two useful methods that take advantage of this.</paragraph><heading level=\"2\">Readlines</heading><paragraph>We saw in Week 1 that you can read the content of a text file into a string, using the <code>read()</code> method.  The <code>readlines()</code> method allows you to read the contents into a list of lines instead. This allows you to use a <code>for</code> statement to loop through the lines of a file one-by-one.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\"># Add some lines to a file\nwith open(&#39;myfile&#39;, &#39;w&#39;) as file:\n    file.write(&#39;This is the first line\\n&#39;)\n    file.write(&#39;This is the second line\\n&#39;)\n    file.write(&#39;This is the third line&#39;)\n\n# Inspect the results\nwith open(&#39;myfile&#39;, &#39;r&#39;) as file:\n    lines = file.readlines()\n    print(f&#39;The file contains {len(lines)} lines.&#39;)\n    for line in lines:\n        print(f&#39;Line: {line}&#39;)</snippet-file></snippet><paragraph>Notice the newline character is included in each line. You will typically want to remove that using the <code>strip()</code> method of a string. </paragraph><heading level=\"2\">Writelines</heading><paragraph>The <code>writelines()</code> method lets you write multiple lines to a file, given as a list of strings. Note that each line in the list should be terminated with a newline character (&#39;\\n&#39;) otherwise <code>writelines()</code> will concatenate the content onto a single line.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">LINES = [\n    &#39;This is the first line\\n&#39;,\n    &#39;This is the second line\\n&#39;,\n    &#39;This is the third line&#39;\n]\n\n# Write these lines to a file\nwith open(&#39;myfile&#39;, &#39;w&#39;) as file:\n    file.writelines(LINES)\n\n# Inspect the results\nwith open(&#39;myfile&#39;, &#39;r&#39;) as file:\n    print(file.read())</snippet-file></snippet><heading level=\"2\">Reading CSV files</heading><paragraph>You might sometimes want to read a CSV file. Python provides a convenient way of reading a CSV file and parsing it into a list of lists. You need to import the <code>csv</code> module to use this feature of Python.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">import csv\n\n# Create a CSV file to experiment with\nwith open(&#39;myfile&#39;, &#39;w&#39;) as file:\n    file.write(&#39;a,b,c\\n&#39;)\n    file.write(&#39;d,e,f\\n&#39;)\n    file.write(&#39;g,h,i\\n&#39;)\n\n# Read the CSV file\nwith open(&#39;myfile&#39;, &#39;r&#39;) as file:\n    lst = list(csv.reader(file))\n    print(lst)</snippet-file></snippet></document>"
    },
    {
      "id": 361955,
      "original_id": 336238,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Dates and times",
      "index": 127,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>This is not related to collections, but now is a good time to talk about Python&#39;s facilities for working with dates and times.</paragraph><paragraph>When working with real-world data you often have to deal with dates and times. Date and times can be tricky to work with, because people format and present them in different ways. Consider, for example, a date written as &#34;02-03-1998&#34;. Does this represent 2nd March 1998, or 3rd February 1998? In Australia it would be the former, but in the US it would be the latter.</paragraph><paragraph>Python has a <code>datetime</code> library that defines <code>datetime</code> , <code>date</code>, and <code>time</code> types. These provide a uniform and comprehensive way to handle dates and times. The <code>datetime</code> type is the most flexible and thus the most commonly used. There is also a <code>timedelta</code> type, which is used to work with durations (i.e., time intervals).</paragraph><paragraph>To use these you need to import them:</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">from datetime import datetime, date, time, timedelta</snippet-file></snippet><paragraph>You don&#39;t need to import them all - just the ones you will be using.</paragraph><paragraph>Usually your goal will be to convert a string or integer representation of a date or time into a <code>datetime</code> object, apply whatever processing you need to the object, and then use a formatting function to convert it back to a traditional format.</paragraph><heading level=\"2\">Creating a datetime object</heading><paragraph>There are several ways to create a datetime object.</paragraph><paragraph>You can directly construct it by providing the year, month, and day, and, optionally, the time and timezone.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt)</snippet-file></snippet><paragraph>You can also construct it from a string. In this case you need to tell Python what format the string uses:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime.strptime(&#39;24-06-1968, 05:30:00&#39;, &#39;%d-%m-%Y, %H:%M:%S&#39;)\nprint(dt)</snippet-file></snippet><paragraph>The trickiest part about this is remembering what the formatting codes are. You&#39;ll probably find yourself looking them up quite often. Here are the main ones:</paragraph><pre>%Y Four-digit year (1968)\n%y Two-digit year (68)\n\n%B Full month name (June)\n%b Abbreviated month name (Jun)\n%m Two-digit month number (01-12)\n\n%A Full day name (Monday)\n%a Abbreviated day name (Mon)\n%d Two-digit day number (01-31)\n\n%H Two-digit hour (00-23)\n%I Two-digit hour (00-12)\n\n%M Two-digit minute (00-59)\n%S Two-digit second (00-59)\n\n%p AM/PM</pre><paragraph>If you want a datetime object that represents the current date and time you can use the <code>now</code> method:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime.now()\nprint(dt)</snippet-file></snippet><heading level=\"2\">Unix timestamp</heading><paragraph>You can also construct a datetime object from a Unix timestamp. This is one of the most common representations of time.  It represents the time as a numerical value - the number of seconds since the Unix epoch, which was at 00:00:00 on Thursday, 1 January 1970 UTC. You can get the current Unix timestamp using the <code>time.time</code> function.</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from time import time\nprint(time())</snippet-file></snippet><paragraph>To create a datetime object from a Unix timestamp you can use use <code>datetime.fromtimestamp()</code>.</paragraph><snippet line-numbers=\"true\" language=\"py\" runnable=\"true\"><snippet-file id=\"code\">from datetime import datetime\nx = datetime.fromtimestamp(1565315907)\nprint(x)</snippet-file></snippet><heading level=\"2\">Extracting the components of a datetime object</heading><paragraph>Once you have a datetime object you can extract its individual components:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt.year)\nprint(dt.month)\nprint(dt.day)\nprint(dt.hour)\nprint(dt.minute)\nprint(dt.second)</snippet-file></snippet><paragraph>You can also extract a date object or a time object from a datetime object:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt.date())\nprint(dt.time())</snippet-file></snippet><heading level=\"2\">Formatting a datetime object as a string</heading><paragraph>A very common thing to do is to present a datetime object in a certain format. You can use the <code>strftime</code> method, to do this. You need to specify the format you would like, using the same formatting codes as listed above.</paragraph><snippet runnable=\"true\" line-numbers=\"true\" language=\"py\"><snippet-file id=\"code\">from datetime import datetime\ndt = datetime(\n    year = 1968, month = 6, day = 24,\n    hour = 5, minute = 30, second = 0\n)\nprint(dt.strftime(&#39;%d %B %Y, at %I:%M %p&#39;))</snippet-file></snippet><heading level=\"2\">Operating on datetime objects</heading><paragraph>One of the most useful features of datetime objects is that you can very easily calculate new dates and times. The datetime module is so nicely designed that the following examples should be self-explanatory:</paragraph><paragraph>First example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime, timedelta\n\nnow = datetime.now()\nprint(now + timedelta(hours=1))\nprint(now + timedelta(days=1))\nprint(now - timedelta(weeks=2))\nprint(now + timedelta(weeks=4, days=3, hours=2, seconds=45))</snippet-file></snippet><paragraph>Second example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime, timedelta\n\nnew_years_eve = datetime(year=2024, month=12, day=31)\nnow = datetime.now()\ntime_remaining = new_years_eve - now\nprint(time_remaining)</snippet-file></snippet><paragraph>Third example:</paragraph><snippet language=\"py\" runnable=\"true\" line-numbers=\"true\"><snippet-file id=\"code\">from datetime import datetime, timedelta\n\nmy_birthday = datetime(year=1988, month=6, day=24)\nnow = datetime.now()\nmy_age = now - my_birthday\nprint(my_age)</snippet-file></snippet><paragraph></paragraph></document>"
    },
    {
      "id": 361956,
      "original_id": 336239,
      "lesson_id": 53304,
      "user_id": 93339,
      "course_id": 16645,
      "type": "document",
      "title": "Further reading",
      "index": 128,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:37.330126+10:00",
      "updated_at": null,
      "content": "<document version=\"2.0\"><paragraph>You might find the following helpful:</paragraph><list style=\"bullet\"><list-item><paragraph>The <link href=\"https://www.w3schools.com/python\">Python Tutorial</link> at w3schools.com</paragraph></list-item></list><paragraph></paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 2 - Lists, Tuples, Sets, and Dictionaries",
  "tutorial_regex": "",
  "type": "general",
  "updated_at": null,
  "user_id": 93339
}