{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:48.687891+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53338,
  "index": 5,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11529,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47916,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": true,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 5,
  "slide_marks_summary": [
    {
      "id": 362124,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362125,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 5,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 378413,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 378419,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362127,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 362124,
      "original_id": 343333,
      "lesson_id": 53338,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 1: A circle class",
      "index": 92,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.687891+10:00",
      "updated_at": null,
      "challenge_id": 119412,
      "content": "<document version=\"2.0\"><paragraph>Write a program in which you define a class <code>Circle</code>, to facilitate working with circles, and then illustrate its use.</paragraph><paragraph>Your <code>Circle</code> class should:</paragraph><list style=\"bullet\"><list-item><paragraph>Have an <code>__init__</code> special method that allows you to create a <code>Circle</code> object by supplying a number which is the radius of the circle. This should be stored in an attribute <code>radius</code>. The method should check that the supplied value is a valid radius (i.e. a non-negative float), and deal with invalid values appropriately.</paragraph></list-item><list-item><paragraph>Have a <code>__str__</code> special method that allows you to print a <code>Circle</code> object in an informative way (for example, if the radius is 5 it returns <code>Circle of radius 5</code>).</paragraph></list-item><list-item><paragraph>Have an instance method called <code>circumference</code> that returns the circumference of a <code>Circle</code> object.</paragraph></list-item><list-item><paragraph>Have an instance method called <code>area</code> that returns the area of a <code>Circle</code> object.</paragraph></list-item><list-item><paragraph>Have <code>__eq__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code> special methods that allow you to compare two <code>Circle</code> objects. You should compare them by radius, so that two <code>Circle</code> objects are equal when they have the same radius; one <code>Circle</code> object is less than another <code>Circle</code> object when it has a smaller radius; and so on.</paragraph></list-item><list-item><paragraph>Make appropriate use of docstrings.</paragraph></list-item></list><paragraph>To illustrate the use of your class, here is the kind of code you might add to your program, after your class definition:</paragraph><pre># Inspect the documentation\nprint(Circle.__doc__) # Output: A class to facilitate working with circles\nprint(Circle.circumference.__doc__) # Output: Returns the circumference of the circle\nprint(Circle.area.__doc__) # Output: Returns the area of the circle\n\n# Create some Circle objects\ncircle_1 = Circle(4)\ncircle_2 = Circle(5.3)\ncircle_3 = Circle(-2) # Output: an appropriate error message\ncircle_4 = Circle('a') # Output: an appropriate error message\n\n# Print them\nprint(circle_1) # Output: Circle of radius 4\nprint(circle_2) # Output: Circle of radius 5.3\n\n# Get their circumference and area\nprint(circle_1.circumference()) # Output: 25.13\nprint(circle_1.area()) # Output: 50.27\nprint(circle_2.circumference()) # Output: 33.3\nprint(circle_2.area()) # Output: 88.25\n\n# Compare them\nprint(circle_1 &lt; circle_2) # Output: True\nprint(circle_1 &lt;= circle_2) # Output: True\nprint(circle_1 == circle_2) # Output: False\nprint(circle_1 &gt;= circle_2) # Output: False\nprint(circle_1 &gt; circle_2) # Output: False\n</pre><callout type=\"info\">As a guide, use the <code>Length</code> class that was defined in Week 5 content as an illustrative example.</callout></document>"
    },
    {
      "id": 362125,
      "original_id": 343334,
      "lesson_id": 53338,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 2: A text class",
      "index": 93,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.687891+10:00",
      "updated_at": null,
      "challenge_id": 119413,
      "content": "<document version=\"2.0\"><paragraph>Write a program in which you define a class <code>Text</code>, to facilitate working with pieces of text.</paragraph><paragraph>Define your class such that:</paragraph><list style=\"unordered\"><list-item><paragraph>Each instance of <code>Text</code> has an attribute <code>words</code> which holds the words of the text in an array, a method <code>num_words</code> which returns the number of words in the text, a method <code>num_chars</code> which returns the total number of characters in the words, and a method <code>word_length</code> which returns the average number of characters per word (as a float rounded to one decimal place).</paragraph></list-item></list><paragraph>Get your program to ask the user for a piece of text, and then, using the class you have defined, tell the user the number of words in the text, the number of characters in the text, and the average number of characters per word in the text.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>Please enter your text: The quick brown fox jumped over the lazy dog.\nNumber of words: 9\nNumber of characters: 36\nAverage word length: 4.0\n</pre><paragraph>Note: you might find it helpful to have your class clean the text before splitting it into words, in the way that you did in the Week 3 Exercise 1: Word frequency practice exercise.</paragraph></document>"
    },
    {
      "id": 378413,
      "original_id": null,
      "lesson_id": 53338,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 3: A location class",
      "index": 94,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-28T11:13:34.290943+10:00",
      "updated_at": null,
      "challenge_id": 124975,
      "content": "<document version=\"2.0\"><paragraph>Sometimes we work with data about things that have a <bold>location</bold>, given as a <bold>latitude</bold> and a <bold>longitude</bold>. </paragraph><paragraph>Define a class to help us work with locations.</paragraph><paragraph>Give a location two <bold>data</bold> attributes: <code>lat</code>, and <code>lon</code>. </paragraph><paragraph>Give also location the following three <bold>method</bold> attributes:</paragraph><list style=\"bullet\"><list-item><paragraph><code>hemisphere()</code>, which returns which <bold>hemisphere</bold> the location is in:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>Northern Hemisphere</bold> if lat &gt; 0</paragraph></list-item><list-item><paragraph><bold>Southern Hemisphere</bold> if lat &lt; 0</paragraph></list-item><list-item><paragraph><bold>Equator</bold> if lat = 0<break/></paragraph></list-item></list></list-item><list-item><paragraph><code>zone()</code>, which returns which <bold>zone</bold> the location is in, defined by the tropics and the arctic/antarctic circles:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>North Frigid Zone</bold> if lat &gt;= 66.57</paragraph></list-item><list-item><paragraph><bold>North Temperate Zone</bold> if lat &gt;= 23.43</paragraph></list-item><list-item><paragraph><bold>Tropical Zone</bold> if lat &gt;= -23.43</paragraph></list-item><list-item><paragraph><bold>South Temperate Zone</bold> if lat &gt;= -66.57</paragraph></list-item><list-item><paragraph><bold>South Frigid Zone</bold>  if lat &lt; -66.57<break/></paragraph></list-item></list></list-item><list-item><paragraph><code>direction_to()</code>, which returns the direction to another location:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>North</bold> if lat &lt; another lat</paragraph></list-item><list-item><paragraph><bold>South</bold> if lat &gt; another lat</paragraph></list-item><list-item><paragraph><bold>East</bold> if lon &lt; another lon</paragraph></list-item><list-item><paragraph><bold>West</bold> if lon &gt; another lon</paragraph></list-item></list></list-item></list><paragraph>Add some error checking. For instance, latitudes must be between -90 and 90, and longitudes must be between -180 and 180.</paragraph><paragraph>To illustrate the use of your class, here is the kind of code you might add to your program, after your class definition:</paragraph><pre>sydney = Location(-33.87, 151.21)\nwellington = Location(-41.28, 174.77)\nhobart = Location(-42.88, 147.33)\nstockholm = Location(59.33, 18.07)\n\nprint(f\"Sydney is in the {sydney.zone()}\") # Sydney is in the South Temperate Zone\nprint(f\"Stockholm is in the {stockholm.zone()}\") # Stockholm is in the North Temperate Zone\n\nprint(f\"To get from Sydney to Stockholm you need to travel {sydney.direction_to(stockholm)}\") # To get from Sydney to Stockholm you need to travel North West\nprint(f\"To get from Hobart to Wellington you need to travel {hobart.direction_to(wellington)}\") # To get from Hobart to Wellington you need to travel North East\n\nnowhere = Location(-200, 151.21) # The output is shown below\n# Traceback (most recent call last):\n#   File \"/home/main.py\", line 41, in &lt;module&gt;\n#     nowhere = Location(-200, 151.21)\n#               ^^^^^^^^^^^^^^^^^^^^^^\n#   File \"/home/main.py\", line 7, in __init__\n#     raise Exception(\"Invalid coordinates\")\n# Exception: Invalid coordinates\n\n</pre><paragraph/></document>"
    },
    {
      "id": 378419,
      "original_id": 328584,
      "lesson_id": 53338,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 4:  A temperature module",
      "index": 96,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-28T21:55:16.857234+10:00",
      "updated_at": null,
      "challenge_id": 124977,
      "content": "<document version=\"2.0\"><paragraph>There are many different units in which temperature can be measured. Three of the most common are Celsius,  Fahrenheit, and Kelvin (used a lot in science).</paragraph><paragraph>Your task is to define a Temperature class, which we can use to more easily convert temperatures from one scale to another, and to compare temperatures that are on different scales.</paragraph><paragraph>The conversions between the scales go as follows:</paragraph><pre>Converting to Celsius:\nCelsius = (Fahrenheit - 32) × 5/9\nCelsius = Kelvin - 273.15\n\nConverting from Celsius:\nFahrenheit = (9/5 x Celsius) + 32\nKelvin = Celsius + 273.15\n</pre><paragraph/><paragraph>Your <code>Temperature</code> class should:</paragraph><list style=\"bullet\"><list-item><paragraph>Have an <code>__init__</code> special method that allows you to create a <code>Temperature</code> object by supplying a number and a unit: either Celsius (C), Fahrenheit (F), or Kelvin (K).</paragraph></list-item><list-item><paragraph>Have a <code>__str__</code> special method that allows you to print a <code>Temperature</code> object in an informative way.</paragraph></list-item><list-item><paragraph>Have an instance method called <code>to</code> that has a parameter for a unit, an optional parameter for a number of decimal places, and returns the temperature of the instance in the given unit, rounded to the given number of decimal places, if any were given, otherwise not rounded.</paragraph></list-item><list-item><paragraph>Have <code>__eq__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code> special methods that allow you to compare two Temperature objects.</paragraph></list-item><list-item><paragraph>Make appropriate use of <bold>docstrings</bold>.</paragraph></list-item></list><paragraph>Save your class in a module called <code>temperature.py</code>. Import this module into <code>code.py</code>, and add some code to <code>code.py</code> that illustrates the use of your <code>Temperature</code> class.</paragraph><paragraph><bold>Example:</bold></paragraph><paragraph>Here is the kind of code you might use in <code>code.py</code> to illustrate your class:</paragraph><pre># Create Temperature objects\ntemp_1 = Temperature(32, 'C')\ntemp_2 = Temperature(100, 'F')\ntemp_3 = Temperature(324, 'K')\n\n# Print them\nprint(temp_1) # Outputs Temperature: 32C\nprint(temp_2) # Outputs Temperature: 100F\nprint(temp_3) # Outputs Temperature: 324K\n\n# Convert them\nprint(temp_1.to('F')) # Outputs 89.6\nprint(temp_2.to('K', 3)) # Outputs 310.928\nprint(temp_3.to('C', 1)) # Outputs 50.9\n\n# Compare them\nprint(temp_1 == temp_2) # Outputs False\nprint(temp_1 &lt; temp_2) # Outputs True\nprint(temp_1 &lt;= temp_2) # Outputs True\nprint(temp_1 &gt; temp_2) # Outputs False\nprint(temp_1 &gt;= temp_2) # Outputs False\n</pre><callout type=\"info\">As a guide, use the <code>Length</code> class that was defined in Week 5 content as an illustrative example.</callout></document>"
    },
    {
      "id": 362127,
      "original_id": 326249,
      "lesson_id": 53338,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 5: Mediants",
      "index": 103,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:48.687891+10:00",
      "updated_at": null,
      "challenge_id": 119415,
      "content": "<document version=\"2.0\"><paragraph>Let two distinct reduced positive fractions $F_1=\\frac{p_1}{q_1}$ and $F_2=\\frac{p_2}{q_2}$ be given, with the denominator set to 1 in case the fraction is 0. The mediant of $F_1$ and $F_2$ is defined as $\\frac{p_1+p_2}{q_1+q_2}$; it is also in reduced form, and sits between $F_1$ and $F_2$. Let a reduced fraction $F=\\frac{p}{q}$ in $(0,1)$ be given. It can be shown that starting with $\\frac{0}{1}$ and $\\frac{1}{1}$, one can compute a finite number of mediants and eventually generate $F$. More precisely, there exists $n\\in\\mathbf N$ and a sequence of pairs of fractions $(F_1^i,F_2^i)_{i\\leq n}$ such that:</paragraph><list style=\"bullet\"><list-item><paragraph>$F_1^0=\\frac{0}{1}$ and $F_2^0=\\frac{1}{1}$;</paragraph></list-item><list-item><paragraph>for all $i&lt; n$, either $F^{i+1}_1$ or $F^{i+1}_2$ is the mediant of $F^i_1$ and $F^i_2$, with $F^{i+1}_2$ equal to $F^i_2$ or $F^{i+1}_1$ equal to $F^i_1$, respectively, depending on whether that mediant is strictly smaller or strictly greater than $F$, respectively.</paragraph></list-item><list-item><paragraph>$F$ is the mediant of $F_1^n$ and $F_2^n$.<break/></paragraph></list-item></list><paragraph>The program <code><bold>mediants.py</bold></code> defines a function <code><bold>mediants_to()</bold></code> that given as arguments two strictly positive integers $p$ and $q$ with $p&lt;q$ and $\\gcd(p,q)=1$, computes the sequence $(F_1^i,F_2^i)_{i\\leq n}$ previously defined. The function returns None but displays that sequence, one pair per line, with the mediant of the pair in-between, and for all pairs except the last one, indicating with the * character whether $\\frac{p}{q}$ is between the first member of the pair and the mediant, or between the mediant and the second member of the pair. The numerators and denominators of all fractions are aligned and displayed in a field of width equal to the maximum of the number of digits in $p$ and the number of digits in $q$. Five spaces, or two spaces, the * character and two spaces, precede and follow the display of all mediants. Replace pass in the body of <code><bold>mediants_to()</bold></code> with your code, possibly defining other functions.</paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 7",
  "tutorial_regex": "",
  "type": "python",
  "updated_at": null,
  "user_id": 93339
}