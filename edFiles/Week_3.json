{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:46.425696+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53335,
  "index": 2,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11529,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47913,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": true,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 8,
  "slide_marks_summary": [
    {
      "id": 362102,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362104,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362105,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362107,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 8,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 367847,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 367848,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 367849,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362110,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 362102,
      "original_id": 336286,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 1: Word frequency",
      "index": 87,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:46.425696+10:00",
      "updated_at": null,
      "challenge_id": 119390,
      "content": "<document version=\"2.0\"><paragraph>In the workspace on the right is a file called \"text.txt\" which contains a piece of text (it's the opening passage of Charles Darwin's <italic>On the Origin of Species</italic>).</paragraph><paragraph>Write a program that reads the text in the file and lists each unique word, along with its frequency (i.e., how many times it occurs).</paragraph><paragraph><bold>Example:</bold> (These numbers might not be correct - they're just a guide to the sort of output you should generate.)</paragraph><pre>when: 3\nwe: 3\nlook: 1\nto: 9\nthe: 11\n... etc.</pre><paragraph>Your program should work not only for this file but also for variations. You may assume the following about the text in a file:</paragraph><paragraph><bold>First</bold>. Words are separated by whitespace. In the sample text given all of the whitespace is just a single space. But sometimes it might be multiple spaces, or tabs, or line breaks, etc. Make sure your program can handle all of these different kinds of whitespace. You will find the string method <code>split</code> very helpful. </paragraph><paragraph><bold>Second</bold>. The text might contain punctuation marks (as the sample text does). Make sure that you don't include punctuation marks in words. You could remove them from the text altogether. It will be good enough if your program can handle the following punctuation marks:</paragraph><pre>. ? ! , ; : ( ) [ ] { } \"\n</pre><paragraph>Don't worry about <bold>dashes</bold> and <bold>single quote</bold> marks:</paragraph><pre>- '\n</pre><paragraph>These are tricky, because sometimes they are used as parts of words (e.g., hyphenated words, such as \"sub-variety\", or contractions, such as \"aren't\") and sometimes they are used not as part of words (e.g., as dashes or quote marks). If you feel like a challenge then you could get your program to deal with them correctly, but you're not expected to.</paragraph><paragraph><bold>Third</bold>. Words might occur both with a capital first letter and without a capital first letter (e.g., the sample text contains both \"<bold>When</bold>\" and \"<bold>when</bold>\"). You should consider these to be the same word. You could make all words lowercase, turning \"When\" into \"when\". Or you could make them all upper case, turning both \"When\" and \"when\" into \"WHEN\". It's up to you.</paragraph><heading level=\"2\">Checking your work</heading><paragraph>Note that you can add your own files to the workspace on the right. So you could create your own text file, called, for example, \"<bold>my_text.txt</bold>\", put whatever text you like in that file, and then check your program by getting it to read that file instead of the sample file. You could add something like the following text, which contains things your program should be able to handle:</paragraph><pre>Hello,  world,  hello!\nWorld: hello?\n\nGOODBYE.\n</pre><paragraph>A nice thing about this is that you know what answers you should get: \"hello\" occurs three times, \"world\" occurs twice, and \"goodbye\" occurs once. So, if you're converting words to lowercase then your output should be something like this:</paragraph><pre>hello: 3\nworld: 2\ngoodbye: 1</pre><heading level=\"2\">Optional extra</heading><paragraph>If you're feeling up to it, get the words to appear in <bold>alphabetical</bold> <bold>order</bold>. Even better, get them to appear in <bold>order of frequency</bold>, from the most frequent down to the least frequent. Again, you're not expected to.</paragraph></document>"
    },
    {
      "id": 362104,
      "original_id": 336288,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 2: Vowel stripper",
      "index": 91,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:46.425696+10:00",
      "updated_at": null,
      "challenge_id": 119392,
      "content": "<document version=\"2.0\"><paragraph>It is sometimes said that English text is still fairly easy to read even if you remove all of the vowels. To test this, write a program that asks the user for a sentence, and then prints the sentence with all of the vowels removed.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>What is your sentence? The quick brown fox jumped over the lazy dog\nHere it is without vowels: Th qck brwn fx jmpd vr th lzy dg\n</pre><paragraph>It might work best if you only <bold>remove</bold> vowels from <italic><bold>inside</bold></italic> words (i.e., not from the beginnings or ends of words). Write an improved version that deals with that.</paragraph></document>"
    },
    {
      "id": 362105,
      "original_id": 336289,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 3: Fibonacci lister",
      "index": 92,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:46.425696+10:00",
      "updated_at": null,
      "challenge_id": 119393,
      "content": "<document version=\"2.0\"><paragraph>The Fibonacci numbers are a famous sequence of numbers that goes as follows:</paragraph><paragraph>0, 1, 1, 2, 3, 5, 8, 13, ...</paragraph><paragraph>The rule for generating the sequence is this:</paragraph><list style=\"unordered\"><list-item><paragraph>The sequence starts with 0, 1</paragraph></list-item><list-item><paragraph>The next number is the sum of the previous two numbers</paragraph></list-item></list><paragraph>Write a program that prints as many Fibonacci numbers as the user would like. Get the numbers to appear on the same line, separated by commas.</paragraph><paragraph><bold>Example:</bold></paragraph><pre>How many Fibonacci numbers would you like? 10\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34</pre></document>"
    },
    {
      "id": 362107,
      "original_id": 336290,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 4: ISBN validator",
      "index": 95,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:46.425696+10:00",
      "updated_at": null,
      "challenge_id": 119395,
      "content": "<document version=\"2.0\"><paragraph>An ISBN (International Standard Book Number) is a 10 character string assigned to every commercial book before 2007. Each character is a digit between 0 and 9, but the last character might also be 'X'.</paragraph><paragraph>Write a program that asks the user for an ISBN and determines whether it is valid or not.</paragraph><paragraph>The check for validity goes as follows:</paragraph><list style=\"bullet\"><list-item><paragraph>Multiply each of the first 9 digits by its position. The positions go from 1 to 9.</paragraph></list-item><list-item><paragraph>Add up the 9 resulting products.</paragraph></list-item><list-item><paragraph>Divide this sum by 11, and get the remainder, which is a number between 0 and 10.</paragraph></list-item><list-item><paragraph>If the remainder is 10, the last character should be the letter 'X'. Otherwise, the last character should be the remainder (a single digit).</paragraph></list-item></list><paragraph><bold>Examples:</bold></paragraph><pre>Enter ISBN: 1503290565\n1503290565 is valid</pre><pre>Enter ISBN: 938007834X\n938007834X is valid\n</pre><pre>Enter ISBN: 2222222224\n2222222224 is invalid</pre></document>"
    },
    {
      "id": 367847,
      "original_id": 362098,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 5: Max element and span in a list",
      "index": 102,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-31T18:02:29.554685+10:00",
      "updated_at": null,
      "challenge_id": 121724,
      "content": "<document version=\"2.0\"><paragraph>Study the program <bold>max_in_list.py</bold> and run it in the <bold>Terminal</bold> window, executing \"<bold>python max_in_list.py</bold>\". Then complete the program <bold>span.py</bold> that prompts the user for a seed for the random number generator, and for a strictly positive number, <bold>nb_of_elements</bold>, generates a list of nb_of_elements random integers between 0 and 99, prints out the list, computes the difference between the largest and smallest values in the list <bold>without using the built-ins min() and max()</bold>, prints it out, and check that the result is correct using the built-ins; run it and check your solution with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected outputs and sample inputs.</paragraph></document>"
    },
    {
      "id": 367848,
      "original_id": 362099,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 6: Classifying elements in a list",
      "index": 103,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-31T18:02:29.663767+10:00",
      "updated_at": null,
      "challenge_id": 121725,
      "content": "<document version=\"2.0\"><paragraph>The operators <bold>/</bold>, <bold>//</bold> and <bold>%</bold> are used for <bold>floating point division</bold>, <bold>integer division</bold>, and <bold>remainder</bold>, respectively.</paragraph><paragraph>Study the program  <bold>modulo_4.py</bold> and run it in the <bold>Terminal</bold> window, executing \"<bold>python modulo_4.py</bold>\". Then complete program <bold>intervals.py</bold> that prompts the user for a strictly positive integer, <bold>nb_of_elements</bold>, generates a <bold>list</bold> of nb_of_elements <bold>random integers</bold> between <bold>0</bold> and <bold>19</bold>, prints out the list, computes the number of elements strictly less than <bold>5</bold>, <bold>10</bold>, <bold>15</bold> and <bold>20</bold>, and <bold>prints</bold> those out; run it and check your solution with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected outputs and sample inputs.</paragraph></document>"
    },
    {
      "id": 367849,
      "original_id": 362100,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 7: Mean, median, and standard deviation",
      "index": 104,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-31T18:02:29.79262+10:00",
      "updated_at": null,
      "challenge_id": 121726,
      "content": "<document version=\"2.0\"><paragraph>Complete the program <bold>mean_median_standard_deviation.py</bold> that prompts the user for a strictly positive integer, <bold>nb_of_elements</bold>, generates a list of nb_of_elements random integers between -50 and 50, prints out the list, computes the <bold>mean</bold>, the <bold>median</bold> and the <bold>standard deviation</bold> in two ways, that is, <bold>using</bold> or <bold>not</bold> the <bold>functions</bold> from the <bold>statistics</bold> module, and prints them out.</paragraph><paragraph>To compute the <bold>median</bold>, the easiest way is to first sort the list with the <bold>built-in</bold> <bold>sort()</bold> method.</paragraph><paragraph>See <bold>commands_and_expected_outputs.txt</bold> for expected outputs and sample inputs.</paragraph></document>"
    },
    {
      "id": 362110,
      "original_id": 326238,
      "lesson_id": 53335,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 8: Perfect numbers",
      "index": 106,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:46.425696+10:00",
      "updated_at": null,
      "challenge_id": 119398,
      "content": "<document version=\"2.0\"><paragraph>A number is perfect if it is equal to the sum of its divisors, itself excluded. For instance, the divisors of 28 distinct from 28 are 1, 2, 4, 7 and 14, and 1+2+4+7+14=28, hence 28 is perfect.</paragraph><paragraph>Insert your code into <bold>perfect.py</bold>. The program prompts the user for an integer N. If the input is incorrect then the program outputs an error message and exits. Otherwise the program outputs all perfect numbers at most equal to N. Implement a naive solution, of quadratic complexity, so it can deal with small values of N only. Execute your program and check your outputs against the expected outputs with the <bold>Run</bold> and <bold>Mark</bold> (or <bold>Submit</bold>) buttons, respectively.</paragraph><paragraph>See <link href=\"https://en.wikipedia.org/wiki/Perfect_number\">Perfect number</link> and  <link href=\"https://en.wikipedia.org/wiki/List_of_perfect_numbers\">List of perfect numbers</link> (from Wikipedia) for more details.</paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 3",
  "tutorial_regex": "",
  "type": "python",
  "updated_at": null,
  "user_id": 93339
}