{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:50.518991+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53341,
  "index": 8,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11529,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47919,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": true,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 5,
  "slide_marks_summary": [
    {
      "id": 378433,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 378434,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 378435,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 378436,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 378437,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 378433,
      "original_id": null,
      "lesson_id": 53341,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 1: Word ladders",
      "index": 6,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-29T13:28:29.773206+10:00",
      "updated_at": null,
      "challenge_id": 124979,
      "content": "<document version=\"2.0\"><paragraph>Write a program <bold>word_ladder.py</bold> that computes all transformations of a word <bold>word_1</bold> into a word <bold>word_2</bold>, consisting of sequences of words of minimal length, starting with <bold>word_1</bold>, endingin <bold>word_2</bold>, and such that two consecutive words in the sequence differ by at most one letter.</paragraph><paragraph>All words have to occur in a dictionary with name <bold>dictionary.txt</bold>, stored in the working directory.</paragraph><paragraph>It is convenient and effective to first create a dictionary whose keys are all words in the dictionary <bold>dictionary.txt</bold> with one letter replaced by a “<bold>slot</bold>”, the value for a given key being the list of words that match the key with the “<bold>slot</bold>” being replaced by an appropriate letter. From this dictionary, one can then build a dictionary with words as keys, and as value for a given key the list of words that differ in only one letter from the key.</paragraph><paragraph>The program implements a function <bold>word_ladder(word_1, word_2)</bold> that returns the list of all solutions, a solution being as previously described.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from word_ladder import *\n&gt;&gt;&gt; for ladder in word_ladder('cold', 'warm'): print(ladder)\n...\n['COLD', 'CORD', 'CARD', 'WARD', 'WARM']\n['COLD', 'CORD', 'WORD', 'WORM', 'WARM']\n['COLD', 'CORD', 'WORD', 'WARD', 'WARM']\n\n&gt;&gt;&gt; for  ladder  in  word_ladder('three',  'seven'):  print(ladder)\n...\n['THREE', 'THREW', 'SHREW', 'SHRED', 'SIRED', 'SITED', 'SATED', 'SAVED', 'SAVER', 'SEVER', 'SEVEN']\n\n&gt;&gt;&gt; for ladder in word_ladder('train', 'bikes'): print(ladder)\n...\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'GRAIN', 'GROIN', 'GROWN', 'GROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DRAWS', 'DRAGS', 'BRAGS', 'BRATS', 'BEATS', 'BELTS', 'BELLS', 'BALLS', 'BALES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DRAWS', 'DRAGS', 'BRAGS', 'BRATS', 'BEATS', 'BESTS', 'BUSTS', 'BUSES', 'BASES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'DRAIN', 'DRAWN', 'DROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'BROWS', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'BORES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'BARES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'CARES', 'CAKES', 'BAKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'PORES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'POKES', 'PIKES', 'BIKES']\r\n['TRAIN', 'BRAIN', 'BRAWN', 'BROWN', 'CROWN', 'CROWS', 'CROPS', 'COOPS', 'CORPS', 'CORES', 'COKES', 'CAKES', 'BAKES', 'BIKES']\n\n</pre></document>"
    },
    {
      "id": 378434,
      "original_id": null,
      "lesson_id": 53341,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 2: Word search puzzle",
      "index": 7,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-29T13:30:14.45602+10:00",
      "updated_at": null,
      "challenge_id": 124980,
      "content": "<document version=\"2.0\"><paragraph>Word search puzzle consists of a grid of letters and a number of words, that have to be read <bold>horizontally</bold>, <bold>vertically</bold> or <bold>diagonally</bold>, in either direction. Write a program <bold>word_search.py</bold> that defines a class <bold>WordSearch</bold> with the following properties:</paragraph><list style=\"bullet\"><list-item><paragraph>To create a <bold>WordSearch</bold> object, the <bold>name of a file</bold> has to be provided. This file is meant to store a number of lines all with the same number of uppercase letters, those lines possibly containing spaces anywhere, and the file possibly containing extra blank lines.<break/></paragraph></list-item><list-item><paragraph><bold><code>__str__()</code></bold> is implemented.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>number_of_solutions()</bold> to display the number of solutions for each word length for which a solution exists.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>locate_word_in_grid()</bold> that takes a word as argument; it returns <bold>None</bold> if the word cannot be read in the grid, and otherwise returns the <italic>x</italic> and <italic>y</italic> coordinates of an occurrence of the first letter of the word in the grid and the direction to follow (N, NE, E, SE, S, SW, W, or NW) to read the whole word from that point onwards. Coordinates start from 0, with the <italic>x</italic>-axis pointing East, and the <italic>y</italic>-axis pointing South.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>locate_words_in_grid()</bold> that takes any number of words as arguments, and returns a dictionary whose keys are those words and whose values are <bold>None</bold> or the triple returned by <bold>locate_word_in_grid()</bold> when called with that word as argument.<break/></paragraph></list-item><list-item><paragraph>It has a method <bold>display_word_in_grid()</bold> that takes a word as argument and in case the word can be read from the grid, prints out the grid with all characters being displayed in lowercase, except for those that make up word, displayed in uppercase.</paragraph></list-item></list><paragraph>Here is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from word_search import *\n&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; ws = WordSearch('word_search_1.txt')\n&gt;&gt;&gt; print(ws)\nN D A O E L D L O G B M N E\nI T D C M E A I N R U T S L\nC L U U E I C G G G O L I I\nK M U I M U I D I R I A L T\nE U R T U N G S T E N B V H\nL I L S L T T U L R U O E I\nC M A T E T I U R D R C R U\nI D S C A M A G N E S I U M\nM A M P D M U I N A T I T I\nP C N P L A T I N U M D L L\nH Z E M A N G A N E S E I G\nM G I T I N R U N O R I T C\nR I A N N A M E R C U R Y N\nU O T C C R E P P O C E E R\n&gt;&gt;&gt; metal = 'PLATINUM'\n&gt;&gt;&gt; print(f'{metal}: {ws.locate_word_in_grid(metal)}')\nPLATINUM: (3, 9, 'E')\n&gt;&gt;&gt; metal = 'SODIUM'\n&gt;&gt;&gt; print(f'{metal}: {ws.locate_word_in_grid(metal)}')\nSODIUM: None\n&gt;&gt;&gt; metals = ('PLATINUM', 'COPPER', 'MERCURY', 'TUNGSTEN', 'MAGNESIUM', 'ZINC', 'MANGANESE',\n...               'TITANIUM', 'TIN', 'IRON', 'LITHIUM', 'CADMIUM', 'GOLD', 'COBALT', 'SILVER',\n...               'NICKEL', 'LEAD', 'IRIDIUM', 'URANIUM', 'SODIUM')\n&gt;&gt;&gt; located_metals = ws.locate_words_in_grid(*metals)\n&gt;&gt;&gt; pprint.pprint(located_metals)\n{'CADMIUM': (1, 9, 'N'),\n 'COBALT': (11, 6, 'N'),\n 'COPPER': (10, 13, 'W'),\n 'GOLD': (9, 0, 'W'),\n 'IRIDIUM': (10, 3, 'W'),\n 'IRON': (11, 11, 'W'),\n 'LEAD': (4, 5, 'S'),\n 'LITHIUM': (13, 1, 'S'),\n 'MAGNESIUM': (5, 7, 'E'),\n 'MANGANESE': (3, 10, 'E'),\n 'MERCURY': (6, 12, 'E'),\n 'NICKEL': (0, 0, 'S'),\n 'PLATINUM': (3, 9, 'E'),\n 'SILVER': (12, 1, 'S'),\n 'SODIUM': None,\n 'TIN': (6, 9, 'NE'),\n 'TITANIUM': (12, 8, 'W'),\n 'TUNGSTEN': (3, 4, 'E'),\n 'URANIUM': None,\n 'ZINC': (1, 10, 'SE')}\n&gt;&gt;&gt; for metal in metals:\n...         print(metal, end = ':\\n')\n...         ws.display_word_in_grid(metal)\n...         print()\n... \nPLATINUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n P L A T I N U M d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nCOPPER:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c R E P P O C e e r\n\nMERCURY:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a M E R C U R Y n\nu o t c c r e p p o c e e r\n\nTUNGSTEN:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r T U N G S T E N b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nMAGNESIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a M A G N E S I U M\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nZINC:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh Z e m a n g a n e s e i g\nm g I t i n r u n o r i t c\nr i a N n a m e r c u r y n\nu o t c C r e p p o c e e r\n\nMANGANESE:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e M A N G A N E S E i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nTITANIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d M U I N A T I T i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nTIN:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g N e s i u m\nm a m p d m u I n a t i t i\np c n p l a T i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nIRON:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u N O R I t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nLITHIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s L\nc l u u e i c g g g o l i I\nk m u i m u i d i r i a l T\ne u r t u n g s t e n b v H\nl i l s l t t u l r u o e I\nc m a t e t i u r d r c r U\ni d s c a m a g n e s i u M\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nCADMIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk M u i m u i d i r i a l t\ne U r t u n g s t e n b v h\nl I l s l t t u l r u o e i\nc M a t e t i u r d r c r u\ni D s c a m a g n e s i u m\nm A m p d m u i n a t i t i\np C n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nGOLD:\nn d a o e l D L O G b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nCOBALT:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u T s l\nc l u u e i c g g g o L i i\nk m u i m u i d i r i A l t\ne u r t u n g s t e n B v h\nl i l s l t t u l r u O e i\nc m a t e t i u r d r C r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nSILVER:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t S l\nc l u u e i c g g g o l I i\nk m u i m u i d i r i a L t\ne u r t u n g s t e n b V h\nl i l s l t t u l r u o E i\nc m a t e t i u r d r c R u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nNICKEL:\nN d a o e l d l o g b m n e\nI t d c m e a i n r u t s l\nC l u u e i c g g g o l i i\nK m u i m u i d i r i a l t\nE u r t u n g s t e n b v h\nL i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nLEAD:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i m u i d i r i a l t\ne u r t u n g s t e n b v h\nl i l s L t t u l r u o e i\nc m a t E t i u r d r c r u\ni d s c A m a g n e s i u m\nm a m p D m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nIRIDIUM:\nn d a o e l d l o g b m n e\ni t d c m e a i n r u t s l\nc l u u e i c g g g o l i i\nk m u i M U I D I R I a l t\ne u r t u n g s t e n b v h\nl i l s l t t u l r u o e i\nc m a t e t i u r d r c r u\ni d s c a m a g n e s i u m\nm a m p d m u i n a t i t i\np c n p l a t i n u m d l l\nh z e m a n g a n e s e i g\nm g i t i n r u n o r i t c\nr i a n n a m e r c u r y n\nu o t c c r e p p o c e e r\n\nURANIUM:\n\nSODIUM:\n\n&gt;&gt;&gt;\n</pre></document>"
    },
    {
      "id": 378435,
      "original_id": null,
      "lesson_id": 53341,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 3: Possible subtractions yielding a given sum",
      "index": 8,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-29T13:30:17.721295+10:00",
      "updated_at": null,
      "challenge_id": 124981,
      "content": "<document version=\"2.0\"><paragraph>Write a program <bold>subtractions.py</bold> that takes as input an <bold>iterable</bold> <bold>L</bold> of nonnegative integers and an <bold>integer</bold> <bold>N</bold>, and displays all ways of inserting <bold>minus</bold> signs and <bold>parentheses</bold> in <bold>L</bold>, resulting in an <bold>expression</bold> that <bold>evaluates</bold> to <bold>N</bold>. </paragraph><paragraph>You will make use  of <bold>eval()</bold> in this exercise.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from subtractions import *\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 1)\n1 - ((2 - 3) - (4 - 5))\n(1 - ((2 - 3) - 4)) - 5\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 2)\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 3)\n1 - (2 - (3 - (4 - 5)))\n1 - ((2 - (3 - 4)) - 5)\n(1 - (2 - 3)) - (4 - 5)\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 4)\n&gt;&gt;&gt; subtractions((1, 2, 3, 4, 5), 5)\n(1 - 2) - ((3 - 4) - 5)\n&gt;&gt;&gt; subtractions((1, 3, 2, 5, 11, 9, 10, 8, 4, 7, 6), 40)\n1 - ((((3 - 2) - 5) - 11) - (9 - ((((10 - 8) - 4) - 7) - 6)))\n1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - (4 - (7 - 6))))\n1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - ((8 - (4 - 7)) - 6))\n1 - (((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - 4)) - (7 - 6))\n1 - (((((3 - 2) - 5) - 11) - (9 - (((10 - 8) - 4) - 7))) - 6)\n1 - ((((((3 - 2) - 5) - 11) - (9 - ((10 - 8) - 4))) - 7) - 6)\n1 - (((((((3 - 2) - 5) - 11) - (9 - (10 - 8))) - 4) - 7) - 6)\n1 - ((((((((3 - 2) - 5) - 11) - (9 - 10)) - 8) - 4) - 7) - 6)\n(1 - 3) - ((((2 - 5) - 11) - 9) - (10 - (((8 - 4) - 7) - 6)))\n(1 - 3) - (((((2 - 5) - 11) - 9) - (10 - ((8 - 4) - 7))) - 6)\n(1 - 3) - ((((((2 - 5) - 11) - 9) - (10 - (8 - 4))) - 7) - 6)\n(1 - 3) - (((((((2 - 5) - 11) - 9) - (10 - 8)) - 4) - 7) - 6)\n(1 - ((((3 - 2) - 5) - 11) - 9)) - ((((10 - 8) - 4) - 7) - 6)\n((1 - 3) - ((((2 - 5) - 11) - 9) - 10)) - (((8 - 4) - 7) - 6)\n(1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - 8)) - (4 - (7 - 6))\n(1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - (4 - 7)))) - 6\n(1 - (((((((3 - 2) - 5) - 11) - 9) - 10) - (8 - 4)) - 7)) - 6\n((1 - ((((((3 - 2) - 5) - 11) - 9) - 10) - 8)) - (4 - 7)) - 6\n</pre></document>"
    },
    {
      "id": 378436,
      "original_id": null,
      "lesson_id": 53341,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 4: Voting systems",
      "index": 9,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-29T13:30:20.193152+10:00",
      "updated_at": null,
      "challenge_id": 124982,
      "content": "<document version=\"2.0\"><paragraph>Find out (e.g., in Wikipedia) about these <bold>voting systems</bold>: (a) <bold>one round</bold> method, (b) <bold>two round</bold> method, (c) <bold>elimination</bold> method, (d) <bold>De Borda</bold> count, and (e) <bold>De Condorcet</bold> count.</paragraph><paragraph>The <bold>elimination</bold> method works as follows. One adds up the tallies of all candidates who rank 1st and eliminate the candidate(s) who get the minimal number of votes (as ranked 1st candidates). For a given ordering, the candidates who remain and were ranked after the eliminated candidate(s) see their ranking go up so that the ordering is preserved, and rankings range from 1 up to the number of candidates that remain.</paragraph><paragraph>For instance, if to start with, there are 5 candidates, A, B, C, D, and E who are ranked 1, 2, 3, 4, and 5, respectively, and if B and D are eliminated because they get the least number of votes as 1st candidates across all rankings, then for that particular ranking, A remains ranked 1st, C becomes ranked 2nd, and E becomes ranked third.</paragraph><paragraph>The process is repeated until there is only one candidate left, or all candidates that remain get exactly the same number of votes as preferred candidates.</paragraph><paragraph>Then design a program <bold>election.py</bold> that defines a class <bold>Election</bold>, with objects of this class created from <bold>Excel files</bold> of the kind provided as examples, to which the <bold>methods</bold>:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>one_round_winners()</bold>,<break/></paragraph></list-item><list-item><paragraph><bold>two_round_winners()</bold>,<break/></paragraph></list-item><list-item><paragraph><bold>elimination_winner()</bold>,<break/></paragraph></list-item><list-item><paragraph><bold>de_borda_winners()</bold>, and<break/></paragraph></list-item><list-item><paragraph><bold>de_condorcet_winners()</bold></paragraph></list-item></list><paragraph>can be applied. Also, the <bold><code>__str__()</code></bold> method is implemented so as to display in textual form the election results recorded in the Excel file.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from election import *\n&gt;&gt;&gt; election = Election('election_1.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar   Maria    Max  \n     3273          1       5       4       2       3   \n     2182          5       1       4       3       2   \n     1818          5       2       1       4       3   \n     1636          5       4       2       1       3   \n      727          5       2       4       3       1   \n      364          5       4       2       3       1  \n&gt;&gt;&gt; election.one_round_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.two_round_winners()\nThe winner is Emily.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Oscar.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winner is Maria.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winner is Max.\n&gt;&gt;&gt; election = Election('election_2.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar   Maria    Max  \n     1000          1       2       3       4       5\n&gt;&gt;&gt; election.one_round_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.two_round_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Max.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winner is Albert.\n&gt;&gt;&gt; election = Election('election_3.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert\n     1000          1   \n     1000          1   \n     1000          1   \n     1000          1   \n     1000          1   \n     1000          1\n&gt;&gt;&gt; election.one_round_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.two_round_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.elimination_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.de_borda_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election.de_condorcet_winners()\nAll candidates are winners.\n&gt;&gt;&gt; election = Election('election_4.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar \n     1000          1       2       3   \n     1000          2       1       3\n&gt;&gt;&gt; election.one_round_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election.two_round_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Oscar.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winners is Albert and Emily.\n&gt;&gt;&gt; election = Election('election_5.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar   Maria \n     1000          1       2       3       4   \n     1000          2       3       1       4   \n     1000          3       1       2       4\n&gt;&gt;&gt; election.one_round_winners()\nThe winners are Albert, Emily and Oscar.\n&gt;&gt;&gt; election.two_round_winners()\nThe winners are Albert, Emily and Oscar.\n&gt;&gt;&gt; election.elimination_winners()\nThe winner is Maria.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winners are Albert, Emily and Oscar.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThere is no winner.\n&gt;&gt;&gt; election = Election('election_6.xlsx')\n&gt;&gt;&gt; print(election)\nNumber of votes  Albert  Emily   Oscar \n     1000          1       2       3   \n     1000          2       1       3   \n      250          2       3       1   \n      250          3       2       1\n&gt;&gt;&gt; election.one_round_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.two_round_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.elimination_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.de_borda_winners()\nThe winners are Albert and Emily.\n&gt;&gt;&gt; election.de_condorcet_winners()\nThe winners are Albert and Emily.\n</pre><paragraph/></document>"
    },
    {
      "id": 378437,
      "original_id": null,
      "lesson_id": 53341,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 5: Context free grammars",
      "index": 10,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-06-29T13:30:22.216955+10:00",
      "updated_at": null,
      "challenge_id": 124983,
      "content": "<document version=\"2.0\"><paragraph>A <italic>context free </italic>grammar is a set of <italic>production rules </italic>of the form:</paragraph><paragraph><bold>$symbol_0$ --&gt; $symbol_1$ ... $symbol_n$</bold></paragraph><paragraph>where <bold>$symbol_0$</bold>, . . . , <bold>$symbol_n$</bold> are either <italic>terminal </italic>or <italic>nonterminal symbols</italic>, with <bold>$symbol_0$</bold> being necessarily <italic>nonterminal</italic>.</paragraph><paragraph>A symbol is a <italic><bold>nonterminal</bold></italic> symbol iff it is denoted by a word built from underscores or uppercase letters.</paragraph><paragraph>A special <italic><bold>nonterminal</bold></italic> symbol is called the <italic><bold>start symbol</bold></italic>.</paragraph><paragraph>The language <italic><bold>generated</bold> </italic>by the grammar is the set of sequences of <italic><bold>terminal</bold></italic> symbols obtained by replacing a <italic><bold>nonterminal</bold></italic> symbol by the sequence on the right hand side of a rule having that <italic>nonterminal</italic> symbol on the left hand side, starting with the <italic>start symbol</italic>.</paragraph><paragraph>For instance, the following, where EXPRESSION is the start symbol, is a context free grammar for a set of arithmetic expressions:</paragraph><paragraph>EXPRESSION --&gt; EXPRESSION TERM_OPERATOR TERM<break/>EXPRESSION --&gt; TERM<break/>TERM --&gt; TERM FACTOR_OPERATOR FACTOR<break/>TERM --&gt; FACTOR<break/>FACTOR --&gt; NUMBER<break/>FACTOR --&gt; (EXPRESSION)<break/>NUMBER --&gt; DIGIT NUMBER | DIGIT<break/>DIGIT --&gt; 0<break/>...<break/>DIGIT --&gt; 9<break/>TERM_OPERATOR --&gt; +<break/>TERM_OPERATOR --&gt; -<break/>FACTOR_OPERATOR --&gt; *<break/>ACTOR_OPERATOR --&gt; /</paragraph><paragraph>Moreover, blank characters (spaces or tabs) can be inserted anywhere except inside a number. For instance, <bold>(2 + 3) * (10 - 2) - 12 * (1000 + 15)</bold> is an arithmetic expression generated by the grammar.</paragraph><paragraph>Note that operators associate to the left. The grammar is <italic>unambiguous</italic>, in the sense that every expression generated by the grammar has a unique evaluation.</paragraph><paragraph>Write down a program <bold>context_free_grammar.py</bold> that implements a function <bold>evaluate()</bold> which takes a string representing an expression as an argument, checks whether the expression can be generated by the grammar, and in case the answer is yes, returns the value of the expression, provided that no division by 0 is attempted; otherwise, the function returns <bold>None</bold>.</paragraph><paragraph>Below is a possible interaction:</paragraph><pre>$ python3\n...\n&gt;&gt;&gt; from context_free_grammar import *\n&gt;&gt;&gt; evaluate('100')\n100\n&gt;&gt;&gt; evaluate('(100)')\n100\n&gt;&gt;&gt; evaluate('1 - 20 + 300')\n281\n&gt;&gt;&gt; evaluate('(((((1))-((20))+((300)))))')\n281\n&gt;&gt;&gt; evaluate('20 * 4 / 5')\n16.0\n&gt;&gt;&gt; evaluate('(((((20))*((4))/((5)))))')\n16.0\n&gt;&gt;&gt; evaluate('1 + 20 * 30 - 400 / 500')\n600.2\n&gt;&gt;&gt; evaluate('1 + (20*30-400) / 500')\n1.4\n&gt;&gt;&gt; evaluate('1+(20 / 30 * 400)- 500')\n-232.33333333333337\n&gt;&gt;&gt; evaluate('1 + 2 * (3+4*5) / (6*7-8/9)')\n2.1189189189189186\n&gt;&gt;&gt; evaluate('100)')\n&gt;&gt;&gt; evaluate('100 + ')\n&gt;&gt;&gt; evaluate('100 + -3')\n&gt;&gt;&gt; evaluate('100 ÷ 50')\n&gt;&gt;&gt; evaluate('100 / 0')\n</pre><paragraph>Before you tackle the exercise, find out about <italic><bold>recursive descent parsers</bold></italic>. To easily tokenise the string, check out the <bold>findall()</bold> function from the <bold>re</bold> module.</paragraph><paragraph>See also related content <bold><link href=\"https://edstem.org/au/courses/16645/lessons/53331/slides/362072\">Week 10 - Notes 15 Context Free Grammars</link></bold> discussed in Week 10 Tuesday Lecture.</paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 10",
  "tutorial_regex": "",
  "type": "python",
  "updated_at": null,
  "user_id": 93339
}