{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:49.180409+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": null,
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53339,
  "index": 6,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": null,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11529,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47917,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": true,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 5,
  "slide_marks_summary": [
    {
      "id": 362128,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 4,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362129,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 7,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362130,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362132,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 381772,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 362128,
      "original_id": 326250,
      "lesson_id": 53339,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 1: Obtaining a sum from a subsequence of digits",
      "index": 2,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:49.180409+10:00",
      "updated_at": null,
      "challenge_id": 119416,
      "content": "<document version=\"2.0\"><paragraph>Write a program <code>sum_of_digits.py</code> that prompts the user for two natural numbers, say <code>available_digits</code> and <code>desired_sum</code>, and outputs the number of ways of selecting digits from <code>available_digits</code> that sum up to <code>desired_sum</code>. For instance, if <code>available_digits</code> is <code>12234</code> and sum is <code>5</code> then there are four (4) solutions:</paragraph><list style=\"bullet\"><list-item><paragraph>one solution is obtained by selecting 1 and both occurrences of 2 (1+2+2 = 5);</paragraph></list-item><list-item><paragraph>one solution is obtained by selecting 1 and 4 (1+4 = 5);</paragraph></list-item><list-item><paragraph>one solution is obtained by selecting the first occurrence of 2 and 3 (2+3 = 5);</paragraph></list-item><list-item><paragraph>one solution is obtained by selecting the second occurrence of 2 and 3 (2+3 = 5).</paragraph></list-item></list><paragraph>Here are possible interactions:</paragraph><pre>Input a number that we will use as available digits: 12234\nInput a number that represents the desired sum: 5\nThere are 4 solutions.\n</pre><pre>Input a number that we will use as available digits: 11111\nInput a number that represents the desired sum: 5\nThere is a unique solution.\n</pre><pre>Input a number that we will use as available digits: 11111\nInput a number that represents the desired sum: 6\nThere is no solution.\n</pre><pre>Input a number that we will use as available digits: 1234321\nInput a number that represents the desired sum: 5\nThere are 10 solutions. \n</pre><paragraph>Insert your code into <code>sum_of_digits.py</code></paragraph><paragraph>If you are stuck, but only when you are stuck, then use <code>sum_of_digits_scaffold.py</code>.</paragraph></document>"
    },
    {
      "id": 362129,
      "original_id": 326251,
      "lesson_id": 53339,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 2: Merging two strings into a third one",
      "index": 3,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:49.180409+10:00",
      "updated_at": null,
      "challenge_id": 119417,
      "content": "<document version=\"2.0\"><paragraph>Say that two strings <bold>s1</bold> and <bold>s2</bold> can be merged into a third string <bold>s3</bold> if <bold>s3</bold> is obtained from <bold>s1</bold> by inserting arbitrarily in <bold>s1</bold> the characters in <bold>s2</bold>, respecting their order. For instance, the two strings <bold>ab</bold> and <bold>cd</bold> can be merged into <bold>abcd</bold>, or <bold>cabd</bold>, or <bold>cdab</bold>, or <bold>acbd</bold>, or <bold>acdb</bold>, ..., but <bold>not</bold> into <bold>adbc</bold> nor into <bold>cbda</bold>. Write a program <code>merging_strings.py</code> that prompts the user for 3 strings and displays the output as follows:</paragraph><list style=\"bullet\"><list-item><paragraph>If no string can be obtained from the other two by merging, then the program outputs that there is no solution.</paragraph></list-item><list-item><paragraph>Otherwise, the program outputs which of the strings can be obtained from the other two by merging.</paragraph></list-item></list><paragraph>Here are possible interactions:</paragraph><pre>Please input the first string: ab\nPlease input the second string: cd\nPlease input the third string: abcd\nThe third string can be obtained by merging the other two.\n</pre><pre>Please input the first string: ab\nPlease input the second string: cdab\nPlease input the third string: cd\nThe second string can be obtained by merging the other two.\n</pre><pre>Please input the first string: abcd\nPlease input the second string: cd\nPlease input the third string: ab\nThe first string can be obtained by merging the other two.\n</pre><pre>Please input the first string: ab\nPlease input the second string: cd\nPlease input the third string: adcb\nNo string can be merged from the other two.\n</pre><pre>Please input the first string: aaaaa\nPlease input the second string: a\nPlease input the third string: aaaa\nThe first string can be obtained by merging the other two.\n</pre><pre>Please input the first string: aaab\nPlease input the second string: abcab\nPlease input the third string: aaabcaabb\nThe third string can be obtained by merging the other two.\n</pre><pre>Please input the first string: ??got\nPlease input the second string: ?it?go#t##\nPlease input the third string: it###\nThe second string can be obtained by merging the other two.\n</pre><paragraph>Insert your code into <code>merging_strings.py</code>.</paragraph><paragraph>If you are stuck, but only when you are stuck, then use <code>merging_strings_scaffold.py</code>.</paragraph></document>"
    },
    {
      "id": 362130,
      "original_id": 326252,
      "lesson_id": 53339,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 3: Eight puzzle",
      "index": 4,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:49.180409+10:00",
      "updated_at": null,
      "challenge_id": 119418,
      "content": "<document version=\"2.0\"><paragraph>Dispatch the integers from <bold>0</bold> to <bold>8</bold>, with 0 possibly changed to <bold>None</bold>, as a list of 3 lists of size 3, to represent a <bold>9 puzzle</bold>.</paragraph><paragraph>For instance, let  <bold>[[4, 0, 8], [1, 3, 7], [5, 2, 6]]</bold> or <bold>[[4, None ,8], [1, 3, 7], [5, 2, 6]]</bold> represent the <bold>9 puzzle</bold></paragraph><figure><image src=\"https://static.edusercontent.com/files/pYAfXY0ekf8yTcW1TJhjiENU\" width=\"128\" height=\"133\"/></figure><paragraph>with the 8 integers being printed on 8 tiles that are placed in a frame with one location being tile free.</paragraph><paragraph>The aim is to slide tiles horizontally or vertically so as to eventually reach the configuration</paragraph><figure><image src=\"https://static.edusercontent.com/files/5Tac0aJ1aFewEO0wSndb4JNk\" width=\"128\" height=\"135\"/></figure><paragraph>It can be shown that the puzzle is solvable iff the permutation of the integers 1, ..., 8, determined by reading those integers off the puzzle from top to bottom and from left to right, is even. This is clearly a necessary condition since:</paragraph><list style=\"bullet\"><list-item><paragraph>sliding a tile horizontally does not change the number of inversions;</paragraph></list-item><list-item><paragraph>sliding a tile vertically changes the number of inversions by -2, 0 or 2;</paragraph></list-item><list-item><paragraph>the parity of the identity is even. </paragraph></list-item></list><paragraph>Complete the program <code>eight_puzzle.py</code> so as to have the functionality of the two functions:</paragraph><list style=\"bullet\"><list-item><paragraph><code>validate_8_puzzle(grid)</code> that prints out whether or not grid is a valid representation of a solvable 8 puzzle;</paragraph></list-item></list><list style=\"bullet\"><list-item><paragraph><code>solve_8_puzzle(grid)</code> that, assuming that grid is a valid representation of a solvable 8 puzzle, outputs a solution to the puzzle characterised as follows:</paragraph></list-item></list><list style=\"bullet\"><list-item><list style=\"bullet\"><list-item><paragraph>the number of moves is minimal;</paragraph></list-item></list></list-item></list><list style=\"bullet\"><list-item><list style=\"bullet\"><list-item><paragraph>at every stage, the preferences of the tile to slide are, from most preferred to least preferred:</paragraph><list style=\"bullet\"><list-item><paragraph>the tile above the empty cell (provided the latter is not in the top row), then</paragraph></list-item><list-item><paragraph>the tile to the left of the empty cell (provided the latter is not in the left column), then</paragraph></list-item><list-item><paragraph>the tile to the right of the empty cell (provided the latter is not in the right column), then</paragraph></list-item><list-item><paragraph>the tile below the empty cell (provided the latter is not in the bottom row).</paragraph></list-item></list></list-item></list></list-item></list></document>"
    },
    {
      "id": 362132,
      "original_id": 326254,
      "lesson_id": 53339,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 4: Magic squares",
      "index": 6,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:49.180409+10:00",
      "updated_at": null,
      "challenge_id": 119420,
      "content": "<document version=\"2.0\"><paragraph>Given a positive integer $n$, a magic square of order $n$ is a matrix of size $n \\times n$ that stores all numbers from 1 up to $n^2$ and such that the sum of the $n$ rows, the sum of the $n$ columns, and the sum of the two diagonals is constant, hence equal to $n(n^2+1)/2$.</paragraph><paragraph>Implement in the file <code>magic_squares.py</code> the function <code>print_square(square)</code>, that prints a list of lists that represents a square, and the function <code>is_magic_square(square)</code>, that checks whether a list of lists is a magic square.</paragraph><heading level=\"2\">Examples of execution:</heading><pre># Examples of execution\nprint(is_magic_square([[2,7,6], [1,5,9], [4,3,8]])) # False\nprint(is_magic_square([[2,7,6], [9,5,1], [4,3,8]])) # True\nprint(is_magic_square([[8,1,6],[3,5,7],[4,9,2]])) # True\nprint_square([[8,1,6],[3,5,7],[4,9,2]])\n\nFalse\nTrue\nTrue\n8 1 6\n3 5 7\n4 9 2\n</pre><paragraph/></document>"
    },
    {
      "id": 381772,
      "original_id": 328508,
      "lesson_id": 53339,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Exercise 5: The numbers round",
      "index": 8,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-07-10T19:24:07.293313+10:00",
      "updated_at": null,
      "challenge_id": 126099,
      "content": "<document version=\"2.0\"><paragraph>On the quiz show \"Letters and Numbers\" there is a round in which contestants are given <bold>six</bold> <bold>ingredient numbers</bold> and <bold>one</bold> <bold>target number</bold>, and their challenge is to apply arithmetic operations (<bold>addition</bold>, <bold>subtraction</bold>, <bold>multiplication</bold>, and <bold>division</bold>) to one or more of the ingredient numbers to get the target number. For example:</paragraph><pre>Ingredient numbers: 1, 2, 6, 10, 75, 100  \nTarget number: 582\nPossible answer: (100 - (2 + 1)) × 6 = 582\nPossible answer: ((100 - 2) - 1)) × 6 = 582\nPossible answer: (6 x 100) - (2 x (10 - 1)) = 582\n</pre><paragraph>The ingredient numbers are chosen randomly as follows:</paragraph><list style=\"bullet\"><list-item><paragraph><bold>0-4</bold> <bold>large numbers</bold>, chosen from {<bold>25, 50, 75, 100</bold>} with <bold>no repeats</bold></paragraph></list-item><list-item><paragraph>The remaining are all <bold>small numbers</bold>, chosen from {<bold>1, 2, 3, ..., 10</bold>} with <bold>no repeats</bold></paragraph></list-item></list><paragraph>Each ingredient number can only be used <bold>once</bold>, but they need not all be used. No fractions are allowed at any stage of the calculation.</paragraph><paragraph>The <bold>target</bold> number is also chosen <bold>randomly</bold> from <bold>100 to 1000</bold>.</paragraph><paragraph><bold>Your challenge is to write a program that is given the ingredient numbers and the target number and calculates all possible answers (if any)</bold>.</paragraph></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "unattempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Week 8",
  "tutorial_regex": "",
  "type": "python",
  "updated_at": null,
  "user_id": 93339
}