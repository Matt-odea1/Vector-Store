{
  "attempt_id": null,
  "attempted_at": null,
  "attempts": null,
  "attempts_remaining": null,
  "available_at": null,
  "clean_attempts": false,
  "course_id": 16645,
  "created_at": "2024-05-27T01:25:53.761254+10:00",
  "due_at": null,
  "effective_available_at": null,
  "effective_due_at": null,
  "effective_locked_at": null,
  "first_viewed_at": "2025-09-18T14:16:04.500291+10:00",
  "grade_passback_auto_send": false,
  "grade_passback_mode": "",
  "grade_passback_scale_to": null,
  "id": 53351,
  "index": null,
  "inverse_regex": false,
  "is_hidden": false,
  "is_timed": false,
  "is_unlisted": false,
  "kind": "content",
  "last_viewed_slide_id": 362160,
  "late_submissions": true,
  "locked_at": null,
  "module_id": 11532,
  "number": -1,
  "openable": false,
  "openable_without_attempt": false,
  "original_id": 47929,
  "outline": "",
  "password": "",
  "password_one_time": false,
  "prerequisites": [],
  "release_challenge_solutions": false,
  "release_challenge_solutions_while_active": false,
  "release_feedback": false,
  "release_feedback_while_active": false,
  "release_quiz_correctness_only": false,
  "release_quiz_solutions": false,
  "reopen_submissions": false,
  "require_user_override": false,
  "settings": {
    "quiz_question_number_style": "",
    "quiz_mode": "multiple-attempts",
    "quiz_active_status": "active"
  },
  "slide_count": 9,
  "slide_marks_summary": [
    {
      "id": 362154,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362155,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362156,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362157,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362158,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362159,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362160,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362161,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    },
    {
      "id": 362162,
      "is_hidden": false,
      "rubric_points": 0,
      "auto_points": 0,
      "scoring_mode": "",
      "scale_to": null,
      "scale_to_auto": null,
      "scale_to_rubric": null
    }
  ],
  "slides": [
    {
      "id": 362154,
      "original_id": 326277,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "pdf",
      "title": "Python 3 Cheat Sheet",
      "index": 10,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "completed",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "content": "",
      "file_url": "https://static.edusercontent.com/files/wtAsN9UFVMYE451tBfLudQpD"
    },
    {
      "id": 362155,
      "original_id": 326278,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 1",
      "index": 11,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119441,
      "content": "<document version=\"2.0\"><paragraph>Complete the code in the function that, given a list <bold>L</bold> of random non negative whole numbers, decomposes <bold>L</bold> into a list <bold>R</bold> of increasing sequences and with consecutive duplicates removed.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(0, 0, 10)\n    Here is L: []\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        []\r\n\n    &gt;&gt;&gt; f(0, 1, 10)\r\n    Here is L: [6]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6]]\n        \r\n    &gt;&gt;&gt; f(0, 2, 10)\r\n    Here is L: [6, 6]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6]]\n        \r\n    &gt;&gt;&gt; f(0, 3, 10)\r\n    Here is L: [6, 6, 0]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0]]\n        \r\n    &gt;&gt;&gt; f(0, 4, 10)\r\n    Here is L: [6, 6, 0, 4]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4]]\n        \r\n    &gt;&gt;&gt; f(0, 5, 10)\r\n    Here is L: [6, 6, 0, 4, 8]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4, 8]]\n        \r\n    &gt;&gt;&gt; f(0, 6, 10)\r\n    Here is L: [6, 6, 0, 4, 8, 7]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4, 8], [7]]\n        \r\n    &gt;&gt;&gt; f(0, 7, 10)\r\n    Here is L: [6, 6, 0, 4, 8, 7, 6]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[6], [0, 4, 8], [7], [6]]\n        \r\n    &gt;&gt;&gt; f(3, 10, 6)\r\n    Here is L: [1, 4, 4, 1, 2, 4, 3, 5, 4, 0]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[1, 4], [1, 2, 4], [3, 5], [4], [0]]\n        \r\n    &gt;&gt;&gt; f(3, 15, 8)\r\n    Here is L: [3, 8, 2, 5, 7, 1, 0, 7, 4, 8, 3, 3, 7, 8, 8]\r\n    The decomposition of L into increasing sequences,\r\n        with consecutive duplicates removed, is:\r\n        [[3, 8], [2, 5, 7], [1], [0, 7], [4, 8], [3, 7, 8]]\n</pre></document>"
    },
    {
      "id": 362156,
      "original_id": 326279,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 2",
      "index": 12,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119442,
      "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>strictly positive</bold> integer and displays its <bold>binary representation</bold> as well as the <bold>number of times the value 1 appears</bold> in its binary representation. You might find the function <code>bin()</code> useful.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(1)\n    1 in binary reads as: 1.\n    Only one bit is set to 1 in the binary representation of 1.\n    \n    &gt;&gt;&gt; f(2)\n    2 in binary reads as: 10.\n    Only one bit is set to 1 in the binary representation of 2.\n    \n    &gt;&gt;&gt; f(3)\n    3 in binary reads as: 11.\n    2 bits are set to 1 in the binary representation of 3.\n    \n    &gt;&gt;&gt; f(7)\n    7 in binary reads as: 111.\n    3 bits are set to 1 in the binary representation of 7.\n    \n    &gt;&gt;&gt; f(2314)\n    2314 in binary reads as: 100100001010.\n    4 bits are set to 1 in the binary representation of 2314.\n    \n    &gt;&gt;&gt; f(9871)\n    9871 in binary reads as: 10011010001111.\n    8 bits are set to 1 in the binary representation of 9871.\n</pre></document>"
    },
    {
      "id": 362157,
      "original_id": 326280,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 3",
      "index": 13,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "seen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119443,
      "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>strictly positive</bold> integer <bold>greater or equal to 2</bold> and \"not too large\" and displays its decomposition into prime factors.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(2)\n    The decomposition of 2 into prime factors reads:\n       2 = 2\n    &gt;&gt;&gt; f(3)\n    The decomposition of 3 into prime factors reads:\n       3 = 3\n    &gt;&gt;&gt; f(4)\n    The decomposition of 4 into prime factors reads:\n       4 = 2^2\n    &gt;&gt;&gt; f(5)\n    The decomposition of 5 into prime factors reads:\n       5 = 5\n    &gt;&gt;&gt; f(6)\n    The decomposition of 6 into prime factors reads:\n       6 = 2 x 3\n    &gt;&gt;&gt; f(8)\n    The decomposition of 8 into prime factors reads:\n       8 = 2^3\n    &gt;&gt;&gt; f(10)\n    The decomposition of 10 into prime factors reads:\n       10 = 2 x 5\n    &gt;&gt;&gt; f(15)\n    The decomposition of 15 into prime factors reads:\n       15 = 3 x 5\n    &gt;&gt;&gt; f(100)\n    The decomposition of 100 into prime factors reads:\n       100 = 2^2 x 5^2\n    &gt;&gt;&gt; f(5432)\n    The decomposition of 5432 into prime factors reads:\n       5432 = 2^3 x 7 x 97\n    &gt;&gt;&gt; f(45103)\n    The decomposition of 45103 into prime factors reads:\n       45103 = 23 x 37 x 53\n    &gt;&gt;&gt; f(45100)\n    The decomposition of 45100 into prime factors reads:\n       45100 = 2^2 x 5^2 x 11 x 41\n</pre></document>"
    },
    {
      "id": 362158,
      "original_id": 326281,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 4",
      "index": 14,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119444,
      "content": "<document version=\"2.0\"><paragraph>Will be tested with <bold>a</bold> at <bold>least</bold> equal to <bold>2</bold> and <bold>b</bold> at <bold>most</bold> equal to <bold>10_000_000</bold>.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(2, 2)\n    There is a unique prime number beween 2 and 2.\n    \n    &gt;&gt;&gt; f(2, 3)\n    There are 2 prime numbers between 2 and 3.\n    \n    &gt;&gt;&gt; f(2, 5)\n    There are 3 prime numbers between 2 and 5.\n    \n    &gt;&gt;&gt; f(4, 4)\n    There is no prime number beween 4 and 4.\n    \n    &gt;&gt;&gt; f(14, 16)\n    There is no prime number beween 14 and 16.\n    \n    &gt;&gt;&gt; f(3, 20)\n    There are 7 prime numbers between 3 and 20.\n    \n    &gt;&gt;&gt; f(100, 800)\n    There are 114 prime numbers between 100 and 800.\n    \n    &gt;&gt;&gt; f(123, 456789)\n    There are 38194 prime numbers between 123 and 456789.\n</pre><paragraph/></document>"
    },
    {
      "id": 362159,
      "original_id": 326282,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 5",
      "index": 15,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "unseen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119445,
      "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>year</bold> between 1913 and 2013 inclusive and displays the maximum inflation during that year and the month(s) in which it was achieved.</paragraph><paragraph>You might find the <code>reader()</code> function of the <code>csv</code> module useful, but you can also use the <code>split()</code> method of the <code>str</code> class.</paragraph><paragraph>Make use of the attached <bold>cpiai.csv</bold> file.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(1914)\n    In 1914, maximum inflation was: 2.0\n    It was achieved in the following months: Aug\n    \n    &gt;&gt;&gt; f(1922)\n    In 1922, maximum inflation was: 0.6\n    It was achieved in the following months: Jul, Oct, Nov, Dec\n    \n    &gt;&gt;&gt; f(1995)\n    In 1995, maximum inflation was: 0.4\n    It was achieved in the following months: Jan, Feb\n    \n    &gt;&gt;&gt; f(2013)\n    In 2013, maximum inflation was: 0.82\n    It was achieved in the following months: Feb\n</pre><paragraph/></document>"
    },
    {
      "id": 362160,
      "original_id": 326283,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 6",
      "index": 16,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "seen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119446,
      "content": "<document version=\"2.0\"><paragraph/><paragraph>You might find the <code>zip()</code> function useful, though you can also do without it.</paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f(0, 2, 2)\r\n    Here is the square: \r\n    1 1\r\n    0 1\r\n    It is not a good square because it contains duplicates, namely: 1\r\n    \n    &gt;&gt;&gt; f(0, 3, 5)\r\n    Here is the square: \r\n    3 3 0\r\n    2 4 3\r\n    3 2 3\r\n    It is not a good square because it contains duplicates, namely: 2 3\r\n    \n    &gt;&gt;&gt; f(0, 6, 50)\r\n    Here is the square: \r\n    24 48 26  2 16 32\r\n    31 25 19 30 22 37\r\n    13 32  8 18  8 48\r\n     6 39 16 34 45 38\r\n     9 19  6 46  4 43\r\n    21 30 35  6 22 27\r\n    It is not a good square because it contains duplicates, namely: 6 8 16 19 22 30 32 48\r\n    \n    &gt;&gt;&gt; f(0, 2, 50)\r\n    Here is the square: \r\n    24 48\r\n    26  2\r\n    It is a good square.\r\n    Ordering the elements from left to right column, from top to bottom, yields:\r\n     2 26\r\n    24 48\r\n    \n    &gt;&gt;&gt; f(0, 3, 100)\r\n    Here is the square: \r\n     49  97  53\r\n      5  33  65\r\n     62  51  38\r\n    It is a good square.\r\n    Ordering the elements from left to right column, from top to bottom, yields:\r\n      5  49  62\r\n     33  51  65\r\n     38  53  97\r\n    \n    &gt;&gt;&gt; f(0, 6, 5000)\r\n    Here is the square: \r\n    3155 3445  331 2121 4188 3980\r\n    3317 2484 3904 2933 4779 1789\r\n    4134 1140 2308 1144  776 2052\r\n    4362 4930 1203 2540  809  604\r\n    2704 3867 4585  824 2898 3556\r\n    2590 1675 4526 3907 3626 4270\r\n    It is a good square.\r\n    Ordering the elements from left to right column, from top to bottom, yields:\r\n     331 1144 2308 2933 3867 4270\r\n     604 1203 2484 3155 3904 4362\r\n     776 1675 2540 3317 3907 4526\r\n     809 1789 2590 3445 3980 4585\r\n     824 2052 2704 3556 4134 4779\r\n    1140 2121 2898 3626 4188 4930\n</pre><paragraph/></document>"
    },
    {
      "id": 362161,
      "original_id": 326284,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 7",
      "index": 17,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "seen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119447,
      "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>strictly positive</bold> integer called <bold>height</bold> and displays a triangle shape of numbers starting from <bold>0</bold> and of height <bold>height</bold>. Use only digits from <bold>0</bold> to <bold>9</bold> to construct the shape as per the examples below:</paragraph><paragraph/><pre>    &gt;&gt;&gt; f(1)\n    0\n    &gt;&gt;&gt; f(2)\n     0\n    123\n    &gt;&gt;&gt; f(3)\n      0\n     123\n    45678\n    &gt;&gt;&gt; f(4)\n       0\n      123\n     45678\n    9012345\n    &gt;&gt;&gt; f(5)\n        0\n       123\n      45678\n     9012345\n    678901234\n    &gt;&gt;&gt; f(6)\n         0\n        123\n       45678\n      9012345\n     678901234\n    56789012345\n    &gt;&gt;&gt; f(20)\n                       0\n                      123\n                     45678\n                    9012345\n                   678901234\n                  56789012345\n                 6789012345678\n                901234567890123\n               45678901234567890\n              1234567890123456789\n             012345678901234567890\n            12345678901234567890123\n           4567890123456789012345678\n          901234567890123456789012345\n         67890123456789012345678901234\n        5678901234567890123456789012345\n       678901234567890123456789012345678\n      90123456789012345678901234567890123\n     4567890123456789012345678901234567890\n    123456789012345678901234567890123456789\n</pre></document>"
    },
    {
      "id": 362162,
      "original_id": 326285,
      "lesson_id": 53351,
      "user_id": 93339,
      "course_id": 16645,
      "type": "code",
      "title": "Question 8",
      "index": 18,
      "is_hidden": false,
      "lesson_markable_id": null,
      "rubric_id": null,
      "rubric_points": null,
      "auto_points": null,
      "status": "seen",
      "correct": null,
      "response": null,
      "created_at": "2024-05-27T01:25:53.761254+10:00",
      "updated_at": null,
      "challenge_id": 119448,
      "content": "<document version=\"2.0\"><paragraph>Write a function that accepts a <bold>string</bold> of <bold>DISTINCT UPPERCASE letters</bold> only called <bold>letters</bold> and displays all pairs of words using all (distinct) letters in <bold>letters</bold>.</paragraph><paragraph>Please note that the words need to be valid. Use the provided <bold>dictionary.txt</bold> to check the validity of words.  </paragraph><paragraph>Here are some execution examples:</paragraph><pre>    &gt;&gt;&gt; f('ABCDEFGH')\n    There is no solution\n    \n    &gt;&gt;&gt; f('GRIHWSNYP')\n    The pairs of words using all (distinct) letters in \"GRIHWSNYP\" are:\n    ('SPRING', 'WHY')\n    \n    &gt;&gt;&gt; f('ONESIX')\n    The pairs of words using all (distinct) letters in \"ONESIX\" are:\n    ('ION', 'SEX')\n    ('ONE', 'SIX')\n    \n    &gt;&gt;&gt; f('UTAROFSMN')\n    The pairs of words using all (distinct) letters in \"UTAROFSMN\" are:\n    ('AFT', 'MOURNS')\n    ('ANT', 'FORUMS')\n    ('ANTS', 'FORUM')\n    ('ARM', 'FOUNTS')\n    ('ARMS', 'FOUNT')\n    ('AUNT', 'FORMS')\n    ('AUNTS', 'FORM')\n    ('AUNTS', 'FROM')\n    ('FAN', 'TUMORS')\n    ('FANS', 'TUMOR')\n    ('FAR', 'MOUNTS')\n    ('FARM', 'SNOUT')\n    ('FARMS', 'UNTO')\n    ('FAST', 'MOURN')\n    ('FAT', 'MOURNS')\n    ('FATS', 'MOURN')\n    ('FAUN', 'STORM')\n    ('FAUN', 'STROM')\n    ('FAUST', 'MORN')\n    ('FAUST', 'NORM')\n    ('FOAM', 'TURNS')\n    ('FOAMS', 'RUNT')\n    ('FOAMS', 'TURN')\n    ('FORMAT', 'SUN')\n    ('FORUM', 'STAN')\n    ('FORUMS', 'NAT')\n    ('FORUMS', 'TAN')\n    ('FOUNT', 'MARS')\n    ('FOUNT', 'RAMS')\n    ('FOUNTS', 'RAM')\n    ('FUR', 'MATSON')\n    ('MASON', 'TURF')\n    ('MOANS', 'TURF')\n</pre><paragraph/></document>"
    }
  ],
  "solutions_at": null,
  "state": "active",
  "status": "attempted",
  "submitted_at": null,
  "timer_duration": 60,
  "timer_effective_duration": 60,
  "timer_expiration_access": false,
  "title": "Sample Exam Questions",
  "tutorial_regex": "",
  "type": "general",
  "updated_at": null,
  "user_id": 93339
}